package main

import (
	"bytes"
	"fmt"
	"io"
	"strings"
	"text/template"

	"github.com/jd3nn1s/gomidl/ast"
	"github.com/pinzolo/casee"
)

type generator struct {
	ctx        *defContext
	importPkgs map[string]bool
	rootNodes  []interface{}
	buf        bytes.Buffer
	varuid     int
}

func newGenerator(ctx *defContext) *generator {
	return &generator{
		ctx:        ctx,
		importPkgs: make(map[string]bool),
	}
}

var pkgMap = map[string]string{
	"ole":  `github.com/go-ole/go-ole`,
	"uuid": `github.com/google/uuid`,
}

func (g *generator) nextvarid() int {
	g.varuid++
	return g.varuid
}

func (g *generator) dump(out io.Writer) {
	fmt.Fprintln(out, fmt.Sprintf(`// Code generated by "go run github.com/tg123/fabric/mkidl"; DO NOT EDIT. `))
	fmt.Fprintln(out, fmt.Sprintf("package fabric"))

	fmt.Fprintln(out, "import (")

	for p := range g.importPkgs {
		op := pkgMap[p]
		if op != "" {
			p = op
		}
		fmt.Fprintln(out, fmt.Sprintf(`"%v"`, p))
	}

	fmt.Fprintln(out, ")")

	_, err := g.buf.WriteTo(out)
	if err != nil {
		panic(err)
	}
}

func (g *generator) printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *generator) printfln(format string, args ...interface{}) {
	g.printf(format, args...)
	fmt.Fprintln(&g.buf)
}

func (g *generator) templateln(txt string, data interface{}) {
	t := template.New("")
	t.Funcs(template.FuncMap{
		"ToCamelCase":  casee.ToCamelCase,
		"ToPascalCase": casee.ToPascalCase,
		"TrimPrefix":   strings.TrimPrefix,
		"ToTitle":      strings.ToTitle,
	})
	t = template.Must(t.Parse(txt))
	err := t.Execute(&g.buf, data)
	if err != nil {
		panic(err)
	}
	fmt.Fprintln(&g.buf)
}

func (g *generator) importpkg(pkg string) {
	if pkg == "" {
		return
	}

	g.importPkgs[pkg] = true
}

func (g *generator) walk(nodes ...interface{}) {
	for _, n := range nodes {
		switch v := n.(type) {
		case *ast.TypedefNode:
			// ignore
		case *ast.ImportNode:
			// ignore
		case *ast.ModuleNode:
			// TODO support
		case *ast.ConstdefNode:
			g.visitConstDef(v)
		case *ast.StructNode:
			g.visitStruct(v)
		case *ast.EnumNode:
			g.visitEnum(v)
		case *ast.InterfaceNode:
			if len(v.Attributes) > 0 {
				g.visitInterface(v)
			}
		case *ast.LibraryNode:
			g.walk(v.Nodes...)
		case *ast.CoClassNode:
			g.generateCoClz(v)
		case []interface{}:
			g.walk(v...)
		default:
			fmt.Printf("ignore type %T\n", v)
		}
	}
}
