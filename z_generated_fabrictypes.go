// Code generated by "go run github.com/tg123/fabric/mkidl"; DO NOT EDIT.
package fabric

import (
	"github.com/google/uuid"
	"time"
	"unsafe"
)

const FabricInvalidSequenceNumber = -1
const FabricAutoSequenceNumber = 0
const FabricInvalidAtomicGroupId = -1
const FabricInvalidOperationIndex = 0xffffffff
const FabricIgnoreSequenceNumberCheck = 0
const FabricInvalidInstanceId = -1
const FabricInvalidNodeInstanceId = 0
const FabricInvalidReplicaId = -1
const FabricHealthReportInfiniteTtl = 0
const FabricSystemApplication = "fabric:/System"
const FabricInfiniteDuration = 0xffffffff

type FabricErrorCode int64

const (
	FabricErrorFirstReservedHresult FabricErrorCode = 0x80071bbc
	FabricErrorLastReservedHresult  FabricErrorCode = 0x80071d4b
	FabricErrorCommunicationError   FabricErrorCode = iota - 2 + FabricErrorFirstReservedHresult
	FabricErrorInvalidAddress
	FabricErrorInvalidNameUri
	FabricErrorInvalidPartitionKey
	FabricErrorNameAlreadyExists
	FabricErrorNameDoesNotExist
	FabricErrorNameNotEmpty
	FabricErrorNodeNotFound
	FabricErrorNodeIsUp
	FabricErrorNoWriteQuorum
	FabricErrorNotPrimary
	FabricErrorNotReady
	FabricErrorOperationNotComplete
	FabricErrorPropertyDoesNotExist
	FabricErrorReconfigurationPending
	FabricErrorReplicationQueueFull
	FabricErrorServiceAlreadyExists
	FabricErrorServiceDoesNotExist
	FabricErrorServiceOffline
	FabricErrorServiceMetadataMismatch
	FabricErrorServiceAffinityChainNotSupported
	FabricErrorServiceTypeAlreadyRegistered
	FabricErrorServiceTypeNotRegistered
	FabricErrorValueTooLarge
	FabricErrorValueEmpty
	FabricErrorPropertyCheckFailed
	FabricErrorWriteConflict
	FabricErrorEnumerationCompleted
	FabricErrorApplicationTypeProvisionInProgress
	FabricErrorApplicationTypeAlreadyExists
	FabricErrorApplicationTypeNotFound
	FabricErrorApplicationTypeInUse
	FabricErrorApplicationAlreadyExists
	FabricErrorApplicationNotFound
	FabricErrorApplicationUpgradeInProgress
	FabricErrorApplicationUpgradeValidationError
	FabricErrorServiceTypeNotFound
	FabricErrorServiceTypeMismatch
	FabricErrorServiceTypeTemplateNotFound
	FabricErrorConfigurationSectionNotFound
	FabricErrorConfigurationParameterNotFound
	FabricErrorInvalidConfiguration
	FabricErrorImagebuilderValidationError
	FabricErrorPartitionNotFound
	FabricErrorReplicaDoesNotExist
	FabricErrorServiceGroupAlreadyExists
	FabricErrorServiceGroupDoesNotExist
	FabricErrorProcessDeactivated
	FabricErrorProcessAborted
	FabricErrorUpgradeFailed
	FabricErrorInvalidCredentialType
	FabricErrorInvalidX509FindType
	FabricErrorInvalidX509StoreLocation
	FabricErrorInvalidX509StoreName
	FabricErrorInvalidX509Thumbprint
	FabricErrorInvalidProtectionLevel
	FabricErrorInvalidX509Store
	FabricErrorInvalidSubjectName
	FabricErrorInvalidAllowedCommonNameList
	FabricErrorInvalidCredentials
	FabricErrorDecryptionFailed
	FabricErrorConfigurationPackageNotFound
	FabricErrorDataPackageNotFound
	FabricErrorCodePackageNotFound
	FabricErrorServiceEndpointResourceNotFound
	FabricErrorInvalidOperation
	FabricErrorObjectClosed
	FabricErrorTimeout
	FabricErrorFileNotFound
	FabricErrorDirectoryNotFound
	FabricErrorInvalidDirectory
	FabricErrorPathTooLong
	FabricErrorImagestoreIoerror
	FabricErrorCorruptedImageStoreObjectFound
	FabricErrorApplicationNotUpgrading
	FabricErrorApplicationAlreadyInTargetVersion
	FabricErrorImagebuilderUnexpectedError
	FabricErrorFabricVersionNotFound
	FabricErrorFabricVersionInUse
	FabricErrorFabricVersionAlreadyExists
	FabricErrorFabricAlreadyInTargetVersion
	FabricErrorFabricNotUpgrading
	FabricErrorFabricUpgradeInProgress
	FabricErrorFabricUpgradeValidationError
	FabricErrorHealthMaxReportsReached
	FabricErrorHealthStaleReport
	FabricErrorKeyTooLarge
	FabricErrorKeyNotFound
	FabricErrorSequenceNumberCheckFailed
	FabricErrorEncryptionFailed
	FabricErrorInvalidAtomicGroup
	FabricErrorHealthEntityNotFound
	FabricErrorServiceManifestNotFound
	FabricErrorReliableSessionTransportStartupFailure
	FabricErrorReliableSessionAlreadyExists
	FabricErrorReliableSessionCannotConnect
	FabricErrorReliableSessionManagerExists
	FabricErrorReliableSessionRejected
	FabricErrorReliableSessionManagerAlreadyListening
	FabricErrorReliableSessionManagerNotFound
	FabricErrorReliableSessionManagerNotListening
	FabricErrorInvalidServiceType
	FabricErrorImagebuilderTimeout
	FabricErrorImagebuilderAccessDenied
	FabricErrorImagebuilderInvalidMsiFile
	FabricErrorServiceTooBusy
	FabricErrorTransactionNotActive
	FabricErrorRepairTaskAlreadyExists
	FabricErrorRepairTaskNotFound
	FabricErrorReliableSessionNotFound
	FabricErrorReliableSessionQueueEmpty
	FabricErrorReliableSessionQuotaExceeded
	FabricErrorReliableSessionServiceFaulted
	FabricErrorReliableSessionInvalidTargetPartition
	FabricErrorTransactionTooLarge
	FabricErrorReplicationOperationTooLarge
	FabricErrorInstanceIdMismatch
	FabricErrorUpgradeDomainAlreadyCompleted
	FabricErrorNodeHasNotStoppedYet
	FabricErrorInsufficientClusterCapacity
	FabricErrorInvalidPackageSharingPolicy
	FabricErrorPredeploymentNotAllowed
	FabricErrorInvalidBackupSetting
	FabricErrorMissingFullBackup
	FabricErrorBackupInProgress
	FabricErrorDuplicateServiceNotificationFilterName
	FabricErrorInvalidReplicaOperation
	FabricErrorInvalidReplicaState
	FabricErrorLoadbalancerNotReady
	FabricErrorInvalidPartitionOperation
	FabricErrorPrimaryAlreadyExists
	FabricErrorSecondaryAlreadyExists
	FabricErrorBackupDirectoryNotEmpty
	FabricErrorForceNotSupportedForReplicaOperation
	FabricErrorAcquireFileLockFailed
	FabricErrorConnectionDenied
	FabricErrorServerAuthenticationFailed
	FabricErrorConstraintKeyUndefined
	FabricErrorMultithreadedTransactionsNotAllowed
	FabricErrorInvalidX509NameList
	FabricErrorVerboseFmPlacementHealthReportingRequired
	FabricErrorGatewayNotReachable
	FabricErrorUserRoleClientCertificateNotConfigured
	FabricErrorTransactionAborted
	FabricErrorCannotConnect
	FabricErrorMessageTooLarge
	FabricErrorConstraintNotSatisfied
	FabricErrorEndpointNotFound
	FabricErrorApplicationUpdateInProgress
	FabricErrorDeleteBackupFileFailed
	FabricErrorConnectionClosedByRemoteEnd
	FabricErrorInvalidTestCommandState
	FabricErrorTestCommandOperationIdAlreadyExists
	FabricErrorCmOperationFailed
	FabricErrorImagebuilderReservedDirectoryError
	FabricErrorCertificateNotFound
	FabricErrorChaosAlreadyRunning
	FabricErrorFabricDataRootNotFound
	FabricErrorInvalidRestoreData
	FabricErrorDuplicateBackups
	FabricErrorInvalidBackupChain
	FabricErrorStopInProgress
	FabricErrorAlreadyStopped
	FabricErrorNodeIsDown
	FabricErrorNodeTransitionInProgress
	FabricErrorInvalidBackup
	FabricErrorInvalidInstanceId
	FabricErrorInvalidDuration
	FabricErrorRestoreSafeCheckFailed
	FabricErrorConfigUpgradeFailed
	FabricErrorUploadSessionRangeNotSatisfiable
	FabricErrorUploadSessionIdConflict
	FabricErrorInvalidPartitionSelector
	FabricErrorInvalidReplicaSelector
	FabricErrorDnsServiceNotFound
	FabricErrorInvalidDnsName
	FabricErrorDnsNameInUse
	FabricErrorComposeDeploymentAlreadyExists
	FabricErrorComposeDeploymentNotFound
	FabricErrorInvalidForStatefulServices
	FabricErrorInvalidForStatelessServices
	FabricErrorOnlyValidForStatefulPersistentServices
	FabricErrorInvalidUploadSessionId
	FabricErrorBackupNotEnabled
	FabricErrorBackupIsEnabled
	FabricErrorBackupPolicyDoesNotExist
	FabricErrorBackupPolicyAlreadyExists
	FabricErrorRestoreInProgress
	FabricErrorRestoreSourceTargetPartitionMismatch
	FabricErrorFaultAnalysisServiceNotEnabled
	FabricErrorContainerNotFound
	FabricErrorObjectDisposed
	FabricErrorNotReadable
	FabricErrorBackupcopierUnexpectedError
	FabricErrorBackupcopierTimeout
	FabricErrorBackupcopierAccessDenied
	FabricErrorInvalidServiceScalingPolicy
	FabricErrorSingleInstanceApplicationAlreadyExists
	FabricErrorSingleInstanceApplicationNotFound
	FabricErrorVolumeAlreadyExists
	FabricErrorVolumeNotFound
	FabricErrorDatabaseMigrationInProgress
	FabricErrorCentralSecretServiceGeneric
	FabricErrorSecretInvalid
	FabricErrorSecretVersionAlreadyExists
	FabricErrorSingleInstanceApplicationUpgradeInProgress
	FabricErrorOperationNotSupported
	FabricErrorComposeDeploymentNotUpgrading
	FabricErrorSecretTypeCannotBeChanged
	FabricErrorNetworkNotFound
	FabricErrorNetworkInUse
	FabricErrorEndpointNotReferenced
	FabricErrorLastUsedHresult FabricErrorCode = FabricErrorEndpointNotReferenced
)

type FabricClientRole int32

const (
	FabricClientRoleUnknown FabricClientRole = 0x0000
	FabricClientRoleUser    FabricClientRole = 0x0001
	FabricClientRoleAdmin   FabricClientRole = 0x0002
)

type FabricQueryServiceStatus int32

const (
	FabricQueryServiceStatusUnknown   FabricQueryServiceStatus = 0x0000
	FabricQueryServiceStatusActive    FabricQueryServiceStatus = 0x0001
	FabricQueryServiceStatusUpgrading FabricQueryServiceStatus = 0x0002
	FabricQueryServiceStatusDeleting  FabricQueryServiceStatus = 0x0003
	FabricQueryServiceStatusCreating  FabricQueryServiceStatus = 0x0004
	FabricQueryServiceStatusFailed    FabricQueryServiceStatus = 0x0005
)

type FabricQueryNodeStatus int32

const (
	FabricQueryNodeStatusInvalid   FabricQueryNodeStatus = 0x0000
	FabricQueryNodeStatusUp        FabricQueryNodeStatus = 0x0001
	FabricQueryNodeStatusDown      FabricQueryNodeStatus = 0x0002
	FabricQueryNodeStatusEnabling  FabricQueryNodeStatus = 0x0003
	FabricQueryNodeStatusDisabling FabricQueryNodeStatus = 0x0004
	FabricQueryNodeStatusDisabled  FabricQueryNodeStatus = 0x0005
	FabricQueryNodeStatusUnknown   FabricQueryNodeStatus = 0x0006
	FabricQueryNodeStatusRemoved   FabricQueryNodeStatus = 0x0007
)

type FabricQueryNodeStatusFilter int32

const (
	FabricQueryNodeStatusFilterDefault   FabricQueryNodeStatusFilter = 0x0000
	FabricQueryNodeStatusFilterAll       FabricQueryNodeStatusFilter = 0xFFFF
	FabricQueryNodeStatusFilterUp        FabricQueryNodeStatusFilter = 0x0001
	FabricQueryNodeStatusFilterDown      FabricQueryNodeStatusFilter = 0x0002
	FabricQueryNodeStatusFilterEnabling  FabricQueryNodeStatusFilter = 0x0004
	FabricQueryNodeStatusFilterDisabling FabricQueryNodeStatusFilter = 0x0008
	FabricQueryNodeStatusFilterDisabled  FabricQueryNodeStatusFilter = 0x0010
	FabricQueryNodeStatusFilterUnknown   FabricQueryNodeStatusFilter = 0x0020
	FabricQueryNodeStatusFilterRemoved   FabricQueryNodeStatusFilter = 0x0040
)

type FabricServiceKind int32

const (
	FabricServiceKindInvalid   FabricServiceKind = 0x0000
	FabricServiceKindStateless FabricServiceKind = 0x0001
	FabricServiceKindStateful  FabricServiceKind = 0x0002
)

type FabricServicePartitionKind int32

const (
	FabricServicePartitionKindInvalid    FabricServicePartitionKind = 0x0000
	FabricServicePartitionKindSingleton  FabricServicePartitionKind = 0x0001
	FabricServicePartitionKindInt64Range FabricServicePartitionKind = 0x0002
	FabricServicePartitionKindNamed      FabricServicePartitionKind = 0x0003
)

type FabricQueryServicePartitionStatus int32

const (
	FabricQueryServicePartitionStatusInvalid       FabricQueryServicePartitionStatus = 0x0000
	FabricQueryServicePartitionStatusReady         FabricQueryServicePartitionStatus = 0x0001
	FabricQueryServicePartitionStatusNotReady      FabricQueryServicePartitionStatus = 0x0002
	FabricQueryServicePartitionStatusInQuorumLoss  FabricQueryServicePartitionStatus = 0x0003
	FabricQueryServicePartitionStatusReconfiguring FabricQueryServicePartitionStatus = 0x0004
	FabricQueryServicePartitionStatusDeleting      FabricQueryServicePartitionStatus = 0x0005
)

type FabricQueryServiceReplicaStatus int32

const (
	FabricQueryServiceReplicaStatusInvalid FabricQueryServiceReplicaStatus = 0x0000
	FabricQueryServiceReplicaStatusInbuild FabricQueryServiceReplicaStatus = 0x0001
	FabricQueryServiceReplicaStatusStandby FabricQueryServiceReplicaStatus = 0x0002
	FabricQueryServiceReplicaStatusReady   FabricQueryServiceReplicaStatus = 0x0003
	FabricQueryServiceReplicaStatusDown    FabricQueryServiceReplicaStatus = 0x0004
	FabricQueryServiceReplicaStatusDropped FabricQueryServiceReplicaStatus = 0x0005
)

type FabricQueryServiceReplicaStatusFilter int32

const (
	FabricQueryServiceReplicaStatusFilterDefault FabricQueryServiceReplicaStatusFilter = 0x0000
	FabricQueryServiceReplicaStatusFilterAll     FabricQueryServiceReplicaStatusFilter = 0xFFFF
	FabricQueryServiceReplicaStatusFilterInbuild FabricQueryServiceReplicaStatusFilter = 0x0001
	FabricQueryServiceReplicaStatusFilterStandby FabricQueryServiceReplicaStatusFilter = 0x0002
	FabricQueryServiceReplicaStatusFilterReady   FabricQueryServiceReplicaStatusFilter = 0x0004
	FabricQueryServiceReplicaStatusFilterDown    FabricQueryServiceReplicaStatusFilter = 0x0008
	FabricQueryServiceReplicaStatusFilterDropped FabricQueryServiceReplicaStatusFilter = 0x0010
)

type FabricQueryServiceOperationName int32

const (
	FabricQueryServiceOperationNameInvalid    FabricQueryServiceOperationName = 0x0000
	FabricQueryServiceOperationNameNone       FabricQueryServiceOperationName = 0x0001
	FabricQueryServiceOperationNameOpen       FabricQueryServiceOperationName = 0x0002
	FabricQueryServiceOperationNameChangerole FabricQueryServiceOperationName = 0x0004
	FabricQueryServiceOperationNameClose      FabricQueryServiceOperationName = 0x0008
	FabricQueryServiceOperationNameAbort      FabricQueryServiceOperationName = 0x0010
)

type FabricQueryReplicatorOperationName int32

const (
	FabricQueryReplicatorOperationNameInvalid        FabricQueryReplicatorOperationName = 0x0000
	FabricQueryReplicatorOperationNameNone           FabricQueryReplicatorOperationName = 0x0001
	FabricQueryReplicatorOperationNameOpen           FabricQueryReplicatorOperationName = 0x0002
	FabricQueryReplicatorOperationNameChangerole     FabricQueryReplicatorOperationName = 0x0004
	FabricQueryReplicatorOperationNameUpdateepoch    FabricQueryReplicatorOperationName = 0x0008
	FabricQueryReplicatorOperationNameClose          FabricQueryReplicatorOperationName = 0x0010
	FabricQueryReplicatorOperationNameAbort          FabricQueryReplicatorOperationName = 0x0020
	FabricQueryReplicatorOperationNameOndataloss     FabricQueryReplicatorOperationName = 0x0040
	FabricQueryReplicatorOperationNameWaitforcatchup FabricQueryReplicatorOperationName = 0x0080
	FabricQueryReplicatorOperationNameBuild          FabricQueryReplicatorOperationName = 0x0100
)

type FabricCodePackageEntryPointKind int32

const (
	FabricCodePackageEntryPointKindInvalid       FabricCodePackageEntryPointKind = 0x0000
	FabricCodePackageEntryPointKindNone          FabricCodePackageEntryPointKind = 0x0001
	FabricCodePackageEntryPointKindExehost       FabricCodePackageEntryPointKind = 0x0002
	FabricCodePackageEntryPointKindDllhost       FabricCodePackageEntryPointKind = 0x0003
	FabricCodePackageEntryPointKindContainerhost FabricCodePackageEntryPointKind = 0x0004
)

type FabricErrorxehostWorkingFolder int32

const (
	FabricErrorxehostWorkingFolderInvalid     FabricErrorxehostWorkingFolder = 0x0000
	FabricErrorxehostWorkingFolderWork        FabricErrorxehostWorkingFolder = 0x0001
	FabricErrorxehostWorkingFolderCodePackage FabricErrorxehostWorkingFolder = 0x0002
	FabricErrorxehostWorkingFolderCodeBase    FabricErrorxehostWorkingFolder = 0x0003
)

type FabricDllhostHostedDllKind int32

const (
	FabricDllhostHostedDllKindInvalid   FabricDllhostHostedDllKind = 0x0000
	FabricDllhostHostedDllKindUnmanaged FabricDllhostHostedDllKind = 0x0001
	FabricDllhostHostedDllKindManaged   FabricDllhostHostedDllKind = 0x0002
)

type FabricDllhostIsolationPolicy int32

const (
	FabricDllhostIsolationPolicyInvalid          FabricDllhostIsolationPolicy = 0x0000
	FabricDllhostIsolationPolicySharedDomain     FabricDllhostIsolationPolicy = 0x0001
	FabricDllhostIsolationPolicyDedicatedDomain  FabricDllhostIsolationPolicy = 0x0002
	FabricDllhostIsolationPolicyDedicatedProcess FabricDllhostIsolationPolicy = 0x0003
)

type FabricSecurityCredentialKind int32

const (
	FabricSecurityCredentialKindNone    FabricSecurityCredentialKind = 0x0000
	FabricSecurityCredentialKindX509    FabricSecurityCredentialKind = 0x0001
	FabricSecurityCredentialKindWindows FabricSecurityCredentialKind = 0x0002
	FabricSecurityCredentialKindClaims  FabricSecurityCredentialKind = 0x0003
	FabricSecurityCredentialKindX5092   FabricSecurityCredentialKind = 0x0004
	FabricSecurityCredentialKindInvalid FabricSecurityCredentialKind = 0x00ff
)

type FabricClaimsRetrievalMetadataKind int32

const (
	FabricClaimsRetrievalMetadataKindNone FabricClaimsRetrievalMetadataKind = 0x0000
	FabricClaimsRetrievalMetadataKindAad  FabricClaimsRetrievalMetadataKind = 0x0001
)

type FabricProtectionLevel int32

const (
	FabricProtectionLevelNone           FabricProtectionLevel = 0x0000
	FabricProtectionLevelSign           FabricProtectionLevel = 0x0001
	FabricProtectionLevelEncryptandsign FabricProtectionLevel = 0x0002
)

type FabricX509StoreLocation int32

const (
	FabricX509StoreLocationInvalid      FabricX509StoreLocation = 0x0000
	FabricX509StoreLocationCurrentuser  FabricX509StoreLocation = 0x0001
	FabricX509StoreLocationLocalmachine FabricX509StoreLocation = 0x0002
)

type FabricX509FindType int32

const (
	FabricX509FindTypeFindbythumbprint  FabricX509FindType = 0x0000
	FabricX509FindTypeFindbysubjectname FabricX509FindType = 0x0001
	FabricX509FindTypeFindbyextension   FabricX509FindType = 0x000c
)

type FabricServiceLoadMetricWeight int32

const (
	FabricServiceLoadMetricWeightZero   FabricServiceLoadMetricWeight = 0x0000
	FabricServiceLoadMetricWeightLow    FabricServiceLoadMetricWeight = 0x0001
	FabricServiceLoadMetricWeightMedium FabricServiceLoadMetricWeight = 0x0002
	FabricServiceLoadMetricWeightHigh   FabricServiceLoadMetricWeight = 0x0003
)

type FabricMoveCost int32

const (
	FabricMoveCostZero   FabricMoveCost = 0x0000
	FabricMoveCostLow    FabricMoveCost = 0x0001
	FabricMoveCostMedium FabricMoveCost = 0x0002
	FabricMoveCostHigh   FabricMoveCost = 0x0003
)

type FabricServicePackageActivationMode int32

const (
	FabricServicePackageActivationModeSharedProcess    FabricServicePackageActivationMode = 0x0000
	FabricServicePackageActivationModeExclusiveProcess FabricServicePackageActivationMode = 0x0001
)

type FabricServiceCorrelationScheme int32

const (
	FabricServiceCorrelationSchemeInvalid            FabricServiceCorrelationScheme = 0x0000
	FabricServiceCorrelationSchemeAffinity           FabricServiceCorrelationScheme = 0x0001
	FabricServiceCorrelationSchemeAlignedAffinity    FabricServiceCorrelationScheme = 0x0002
	FabricServiceCorrelationSchemeNonalignedAffinity FabricServiceCorrelationScheme = 0x0003
)

type FabricServicePartitionAccessStatus int32

const (
	FabricServicePartitionAccessStatusInvalid                FabricServicePartitionAccessStatus = 0x0000
	FabricServicePartitionAccessStatusGranted                FabricServicePartitionAccessStatus = 0x0001
	FabricServicePartitionAccessStatusReconfigurationPending FabricServicePartitionAccessStatus = 0x0002
	FabricServicePartitionAccessStatusNotPrimary             FabricServicePartitionAccessStatus = 0x0003
	FabricServicePartitionAccessStatusNoWriteQuorum          FabricServicePartitionAccessStatus = 0x0004
)

type FabricReplicaRole int32

const (
	FabricReplicaRoleUnknown         FabricReplicaRole = 0x0000
	FabricReplicaRoleNone            FabricReplicaRole = 0x0001
	FabricReplicaRolePrimary         FabricReplicaRole = 0x0002
	FabricReplicaRoleIdleSecondary   FabricReplicaRole = 0x0003
	FabricReplicaRoleActiveSecondary FabricReplicaRole = 0x0004
)

type FabricReplicaOpenMode int32

const (
	FabricReplicaOpenModeInvalid  FabricReplicaOpenMode = 0x0000
	FabricReplicaOpenModeNew      FabricReplicaOpenMode = 0x0001
	FabricReplicaOpenModeExisting FabricReplicaOpenMode = 0x0002
)

type FabricReplicaStatus int32

const (
	FabricReplicaStatusInvalid FabricReplicaStatus = 0x0000
	FabricReplicaStatusDown    FabricReplicaStatus = 0x0001
	FabricReplicaStatusUp      FabricReplicaStatus = 0x0002
)

type FabricOperationType int32

const (
	FabricOperationTypeInvalid              FabricOperationType = 0x0000
	FabricOperationTypeNormal               FabricOperationType = 0x0001
	FabricOperationTypeEndOfStream          FabricOperationType = 0x0002
	FabricOperationTypeCreateAtomicGroup    FabricOperationType = 0x0010
	FabricOperationTypeAtomicGroupOperation FabricOperationType = 0x0020
	FabricOperationTypeCommitAtomicGroup    FabricOperationType = 0x0040
	FabricOperationTypeRollbackAtomicGroup  FabricOperationType = 0x0080
	FabricOperationTypeHasAtomicGroupMask   FabricOperationType = 0x00F0
)

type FabricReplicaSetQuorumMode int32

const (
	FabricReplicaSetQuorumInvalid FabricReplicaSetQuorumMode = 0x0000
	FabricReplicaSetWriteQuorum   FabricReplicaSetQuorumMode = 0x0001
	FabricReplicaSetQuorumAll     FabricReplicaSetQuorumMode = 0x0002
)

type FabricReplicatorSettingsFlags int32

const (
	FabricReplicatorSettingsNone                              FabricReplicatorSettingsFlags = 0x0000
	FabricReplicatorAddress                                   FabricReplicatorSettingsFlags = 0x0001
	FabricReplicatorSecurity                                  FabricReplicatorSettingsFlags = 0x0002
	FabricReplicatorRetryInterval                             FabricReplicatorSettingsFlags = 0x0004
	FabricReplicatorBatchAcknowledgementInterval              FabricReplicatorSettingsFlags = 0x0008
	FabricReplicatorRequireServiceAck                         FabricReplicatorSettingsFlags = 0x0010
	FabricReplicatorReplicationQueueInitialSize               FabricReplicatorSettingsFlags = 0x0020
	FabricReplicatorReplicationQueueMaxSize                   FabricReplicatorSettingsFlags = 0x0040
	FabricReplicatorCopyQueueInitialSize                      FabricReplicatorSettingsFlags = 0x0080
	FabricReplicatorCopyQueueMaxSize                          FabricReplicatorSettingsFlags = 0x0100
	FabricReplicatorReplicationQueueMaxMemorySize             FabricReplicatorSettingsFlags = 0x0200
	FabricReplicatorSecondaryClearAcknowledgedOperations      FabricReplicatorSettingsFlags = 0x0400
	FabricReplicatorReplicationMessageMaxSize                 FabricReplicatorSettingsFlags = 0x0800
	FabricReplicatorUseStreamfaultsAndEndofstreamOperationack FabricReplicatorSettingsFlags = 0x1000
	FabricReplicatorSecondaryReplicationQueueInitialSize      FabricReplicatorSettingsFlags = 0x2000
	FabricReplicatorSecondaryReplicationQueueMaxSize          FabricReplicatorSettingsFlags = 0x4000
	FabricReplicatorSecondaryReplicationQueueMaxMemorySize    FabricReplicatorSettingsFlags = 0x8000
	FabricReplicatorPrimaryReplicationQueueInitialSize        FabricReplicatorSettingsFlags = 0x10000
	FabricReplicatorPrimaryReplicationQueueMaxSize            FabricReplicatorSettingsFlags = 0x20000
	FabricReplicatorPrimaryReplicationQueueMaxMemorySize      FabricReplicatorSettingsFlags = 0x40000
	FabricReplicatorPrimaryWaitForPendingQuorumsTimeout       FabricReplicatorSettingsFlags = 0x80000
	FabricReplicatorListenAddress                             FabricReplicatorSettingsFlags = 0x100000
	FabricReplicatorPublishAddress                            FabricReplicatorSettingsFlags = 0x200000
)

type FabricFaultType int32

const (
	FabricFaultTypeInvalid   FabricFaultType = 0x0000
	FabricFaultTypePermanent FabricFaultType = 0x0001
	FabricFaultTypeTransient FabricFaultType = 0x0002
)

type FabricHealthState int32

const (
	FabricHealthStateInvalid FabricHealthState = 0x0000
	FabricHealthStateOk      FabricHealthState = 0x0001
	FabricHealthStateWarning FabricHealthState = 0x0002
	FabricHealthStateError   FabricHealthState = 0x0003
	FabricHealthStateUnknown FabricHealthState = 0xFFFF
)

type FabricHealthReportKind int32

const (
	FabricHealthReportKindInvalid                  FabricHealthReportKind = 0x0000
	FabricHealthReportKindStatefulServiceReplica   FabricHealthReportKind = 0x0001
	FabricHealthReportKindStatelessServiceInstance FabricHealthReportKind = 0x0002
	FabricHealthReportKindPartition                FabricHealthReportKind = 0x0003
	FabricHealthReportKindNode                     FabricHealthReportKind = 0x0004
	FabricHealthReportKindService                  FabricHealthReportKind = 0x0005
	FabricHealthReportKindApplication              FabricHealthReportKind = 0x0006
	FabricHealthReportKindDeployedApplication      FabricHealthReportKind = 0x0007
	FabricHealthReportKindDeployedServicePackage   FabricHealthReportKind = 0x0008
	FabricHealthReportKindCluster                  FabricHealthReportKind = 0x0009
)

type FabricHealthEntityKind int32

const (
	FabricHealthEntityKindInvalid                FabricHealthEntityKind = 0x0000
	FabricHealthEntityKindNode                   FabricHealthEntityKind = 0x0001
	FabricHealthEntityKindPartition              FabricHealthEntityKind = 0x0002
	FabricHealthEntityKindService                FabricHealthEntityKind = 0x0003
	FabricHealthEntityKindApplication            FabricHealthEntityKind = 0x0004
	FabricHealthEntityKindReplica                FabricHealthEntityKind = 0x0005
	FabricHealthEntityKindDeployedApplication    FabricHealthEntityKind = 0x0006
	FabricHealthEntityKindDeployedServicePackage FabricHealthEntityKind = 0x0007
	FabricHealthEntityKindCluster                FabricHealthEntityKind = 0x0008
)

type FabricHealthEvaluationKind int32

const (
	FabricHealthEvaluationKindInvalid                           FabricHealthEvaluationKind = 0x0000
	FabricHealthEvaluationKindEvent                             FabricHealthEvaluationKind = 0x0001
	FabricHealthEvaluationKindReplicas                          FabricHealthEvaluationKind = 0x0002
	FabricHealthEvaluationKindPartitions                        FabricHealthEvaluationKind = 0x0003
	FabricHealthEvaluationKindDeployedServicePackages           FabricHealthEvaluationKind = 0x0004
	FabricHealthEvaluationKindDeployedApplications              FabricHealthEvaluationKind = 0x0005
	FabricHealthEvaluationKindServices                          FabricHealthEvaluationKind = 0x0006
	FabricHealthEvaluationKindNodes                             FabricHealthEvaluationKind = 0x0007
	FabricHealthEvaluationKindApplications                      FabricHealthEvaluationKind = 0x0008
	FabricHealthEvaluationKindSystemApplication                 FabricHealthEvaluationKind = 0x0009
	FabricHealthEvaluationKindUpgradeDomainDeployedApplications FabricHealthEvaluationKind = 0x000A
	FabricHealthEvaluationKindUpgradeDomainNodes                FabricHealthEvaluationKind = 0x000B
	FabricHealthEvaluationKindNode                              FabricHealthEvaluationKind = 0x000C
	FabricHealthEvaluationKindReplica                           FabricHealthEvaluationKind = 0x000D
	FabricHealthEvaluationKindPartition                         FabricHealthEvaluationKind = 0x000E
	FabricHealthEvaluationKindService                           FabricHealthEvaluationKind = 0x000F
	FabricHealthEvaluationKindDeployedServicePackage            FabricHealthEvaluationKind = 0x0010
	FabricHealthEvaluationKindDeployedApplication               FabricHealthEvaluationKind = 0x0011
	FabricHealthEvaluationKindApplication                       FabricHealthEvaluationKind = 0x0012
	FabricHealthEvaluationKindDeltaNodesCheck                   FabricHealthEvaluationKind = 0x0013
	FabricHealthEvaluationKindUpgradeDomainDeltaNodesCheck      FabricHealthEvaluationKind = 0x0014
	FabricHealthEvaluationKindApplicationTypeApplications       FabricHealthEvaluationKind = 0x0015
)

type FabricPropertyTypeId int32

const (
	FabricPropertyTypeInvalid FabricPropertyTypeId = 0x0000
	FabricPropertyTypeBinary  FabricPropertyTypeId = 0x0001
	FabricPropertyTypeInt64   FabricPropertyTypeId = 0x0002
	FabricPropertyTypeDouble  FabricPropertyTypeId = 0x0003
	FabricPropertyTypeWstring FabricPropertyTypeId = 0x0004
	FabricPropertyTypeGuid    FabricPropertyTypeId = 0x0005
)

type FabricPropertyBatchOperationKind int32

const (
	FabricPropertyBatchOperationKindInvalid       FabricPropertyBatchOperationKind = 0x0000
	FabricPropertyBatchOperationKindPut           FabricPropertyBatchOperationKind = 0x0001
	FabricPropertyBatchOperationKindGet           FabricPropertyBatchOperationKind = 0x0002
	FabricPropertyBatchOperationKindCheckExists   FabricPropertyBatchOperationKind = 0x0003
	FabricPropertyBatchOperationKindCheckSequence FabricPropertyBatchOperationKind = 0x0004
	FabricPropertyBatchOperationKindDelete        FabricPropertyBatchOperationKind = 0x0005
	FabricPropertyBatchOperationKindPutCustom     FabricPropertyBatchOperationKind = 0x0006
	FabricPropertyBatchOperationKindCheckValue    FabricPropertyBatchOperationKind = 0x0007
)

type FabricServiceEndpointRole int32

const (
	FabricServiceRoleInvalid           FabricServiceEndpointRole = 0x0000
	FabricServiceRoleStateless         FabricServiceEndpointRole = 0x0001
	FabricServiceRoleStatefulPrimary   FabricServiceEndpointRole = 0x0002
	FabricServiceRoleStatefulSecondary FabricServiceEndpointRole = 0x0003
)

type FabricErrornumerationStatus int32

const (
	FabricErrornumerationInvalid            FabricErrornumerationStatus = 0x0000
	FabricErrornumerationBestEffortMoreData FabricErrornumerationStatus = 0x0001
	FabricErrornumerationConsistentMoreData FabricErrornumerationStatus = 0x0002
	FabricErrornumerationBestEffortFinished FabricErrornumerationStatus = 0x0004
	FabricErrornumerationConsistentFinished FabricErrornumerationStatus = 0x0008
	FabricErrornumerationValidMask          FabricErrornumerationStatus = 0x000F
	FabricErrornumerationBestEffortMask     FabricErrornumerationStatus = 0x0005
	FabricErrornumerationConsistentMask     FabricErrornumerationStatus = 0x000A
	FabricErrornumerationMoreDataMask       FabricErrornumerationStatus = 0x0003
	FabricErrornumerationFinishedMask       FabricErrornumerationStatus = 0x000C
)

type FabricPartitionKeyType int32

const (
	FabricPartitionKeyTypeInvalid FabricPartitionKeyType = 0x0000
	FabricPartitionKeyTypeNone    FabricPartitionKeyType = 0x0001
	FabricPartitionKeyTypeInt64   FabricPartitionKeyType = 0x0002
	FabricPartitionKeyTypeString  FabricPartitionKeyType = 0x0003
)

type FabricPartitionScheme int32

const (
	FabricPartitionSchemeInvalid           FabricPartitionScheme = 0x0000
	FabricPartitionSchemeSingleton         FabricPartitionScheme = 0x0001
	FabricPartitionSchemeUniformInt64Range FabricPartitionScheme = 0x0002
	FabricPartitionSchemeNamed             FabricPartitionScheme = 0x0003
)

type FabricServiceDescriptionKind int32

const (
	FabricServiceDescriptionKindInvalid   FabricServiceDescriptionKind = 0x0000
	FabricServiceDescriptionKindStateless FabricServiceDescriptionKind = 0x0001
	FabricServiceDescriptionKindStateful  FabricServiceDescriptionKind = 0x0002
)

type FabricStatefulServiceFailoverSettingsFlags int32

const (
	FabricStatefulServiceSettingsNone                       FabricStatefulServiceFailoverSettingsFlags = 0x0000
	FabricStatefulServiceSettingsReplicaRestartWaitDuration FabricStatefulServiceFailoverSettingsFlags = 0x0001
	FabricStatefulServiceSettingsQuorumLossWaitDuration     FabricStatefulServiceFailoverSettingsFlags = 0x0002
	FabricStatefulServiceSettingsStandbyReplicaKeepDuration FabricStatefulServiceFailoverSettingsFlags = 0x0004
)

type FabricStatelessServiceUpdateDescriptionFlags int32

const (
	FabricStatelessServiceNone                 FabricStatelessServiceUpdateDescriptionFlags = 0x0000
	FabricStatelessServiceInstanceCount        FabricStatelessServiceUpdateDescriptionFlags = 0x0001
	FabricStatelessServicePlacementConstraints FabricStatelessServiceUpdateDescriptionFlags = 0x0002
	FabricStatelessServicePolicyList           FabricStatelessServiceUpdateDescriptionFlags = 0x0004
	FabricStatelessServiceCorrelations         FabricStatelessServiceUpdateDescriptionFlags = 0x0008
	FabricStatelessServiceMetrics              FabricStatelessServiceUpdateDescriptionFlags = 0x0010
	FabricStatelessServiceMoveCost             FabricStatelessServiceUpdateDescriptionFlags = 0x0020
	FabricStatelessServiceScalingPolicy        FabricStatelessServiceUpdateDescriptionFlags = 0x0040
)

type FabricStatefulServiceUpdateDescriptionFlags int32

const (
	FabricStatefulServiceNone                       FabricStatefulServiceUpdateDescriptionFlags = 0x0000
	FabricStatefulServiceTargetReplicaSetSize       FabricStatefulServiceUpdateDescriptionFlags = 0x0001
	FabricStatefulServiceReplicaRestartWaitDuration FabricStatefulServiceUpdateDescriptionFlags = 0x0002
	FabricStatefulServiceQuorumLossWaitDuration     FabricStatefulServiceUpdateDescriptionFlags = 0x0004
	FabricStatefulServiceStandbyReplicaKeepDuration FabricStatefulServiceUpdateDescriptionFlags = 0x0008
	FabricStatefulServiceMinReplicaSetSize          FabricStatefulServiceUpdateDescriptionFlags = 0x0010
	FabricStatefulServicePlacementConstraints       FabricStatefulServiceUpdateDescriptionFlags = 0x0020
	FabricStatefulServicePolicyList                 FabricStatefulServiceUpdateDescriptionFlags = 0x0040
	FabricStatefulServiceCorrelations               FabricStatefulServiceUpdateDescriptionFlags = 0x0080
	FabricStatefulServiceMetrics                    FabricStatefulServiceUpdateDescriptionFlags = 0x0100
	FabricStatefulServiceMoveCost                   FabricStatefulServiceUpdateDescriptionFlags = 0x0200
	FabricStatefulServiceScalingPolicy              FabricStatefulServiceUpdateDescriptionFlags = 0x0400
)

type FabricServiceNotificationFilterFlags int32

const (
	FabricServiceNotificationFilterFlagsNone        FabricServiceNotificationFilterFlags = 0x0000
	FabricServiceNotificationFilterFlagsNamePrefix  FabricServiceNotificationFilterFlags = 0x0001
	FabricServiceNotificationFilterFlagsPrimaryOnly FabricServiceNotificationFilterFlags = 0x0002
)

type FabricApplicationUpgradeKind int32

const (
	FabricApplicationUpgradeKindInvalid FabricApplicationUpgradeKind = 0x0000
	FabricApplicationUpgradeKindRolling FabricApplicationUpgradeKind = 0x0001
)

type FabricUpgradeKind int32

const (
	FabricUpgradeKindInvalid FabricUpgradeKind = 0x0000
	FabricUpgradeKindRolling FabricUpgradeKind = 0x0001
)

type FabricRollingUpgradeMode int32

const (
	FabricRollingUpgradeModeInvalid           FabricRollingUpgradeMode = 0x0000
	FabricRollingUpgradeModeUnmonitoredAuto   FabricRollingUpgradeMode = 0x0001
	FabricRollingUpgradeModeUnmonitoredManual FabricRollingUpgradeMode = 0x0002
	FabricRollingUpgradeModeMonitored         FabricRollingUpgradeMode = 0x0003
)

type FabricMonitoredUpgradeFailureAction int32

const (
	FabricMonitoredUpgradeFailureActionInvalid  FabricMonitoredUpgradeFailureAction = 0x0000
	FabricMonitoredUpgradeFailureActionRollback FabricMonitoredUpgradeFailureAction = 0x0001
	FabricMonitoredUpgradeFailureActionManual   FabricMonitoredUpgradeFailureAction = 0x0002
)

type FabricRollingUpgradeUpdateFlags int32

const (
	FabricRollingUpgradeUpdateFlagsNone                              FabricRollingUpgradeUpdateFlags = 0x0000
	FabricRollingUpgradeUpdateFlagsUpgradeMode                       FabricRollingUpgradeUpdateFlags = 0x0001
	FabricRollingUpgradeUpdateFlagsForceRestart                      FabricRollingUpgradeUpdateFlags = 0x0002
	FabricRollingUpgradeUpdateFlagsReplicaSetCheckTimeout            FabricRollingUpgradeUpdateFlags = 0x0004
	FabricRollingUpgradeUpdateFlagsFailureAction                     FabricRollingUpgradeUpdateFlags = 0x0008
	FabricRollingUpgradeUpdateFlagsHealthCheckWait                   FabricRollingUpgradeUpdateFlags = 0x0010
	FabricRollingUpgradeUpdateFlagsHealthCheckStable                 FabricRollingUpgradeUpdateFlags = 0x0020
	FabricRollingUpgradeUpdateFlagsHealthCheckRetry                  FabricRollingUpgradeUpdateFlags = 0x0040
	FabricRollingUpgradeUpdateFlagsUpgradeTimeout                    FabricRollingUpgradeUpdateFlags = 0x0080
	FabricRollingUpgradeUpdateFlagsUpgradeDomainTimeout              FabricRollingUpgradeUpdateFlags = 0x0100
	FabricRollingUpgradeUpdateFlagsHealthPolicy                      FabricRollingUpgradeUpdateFlags = 0x0200
	FabricRollingUpgradeUpdateFlagsEnableDeltas                      FabricRollingUpgradeUpdateFlags = 0x0400
	FabricRollingUpgradeUpdateFlagsUpgradeHealthPolicy               FabricRollingUpgradeUpdateFlags = 0x0800
	FabricRollingUpgradeUpdateFlagsUpgradeApplicationHealthPolicyMap FabricRollingUpgradeUpdateFlags = 0x1000
)

type FabricApplicationUpgradeState int32

const (
	FabricApplicationUpgradeStateInvalid                  FabricApplicationUpgradeState = 0x0000
	FabricApplicationUpgradeStateRollingBackInProgress    FabricApplicationUpgradeState = 0x0001
	FabricApplicationUpgradeStateRollingBackCompleted     FabricApplicationUpgradeState = 0x0002
	FabricApplicationUpgradeStateRollingForwardPending    FabricApplicationUpgradeState = 0x0003
	FabricApplicationUpgradeStateRollingForwardInProgress FabricApplicationUpgradeState = 0x0004
	FabricApplicationUpgradeStateRollingForwardCompleted  FabricApplicationUpgradeState = 0x0005
	FabricApplicationUpgradeStateFailed                   FabricApplicationUpgradeState = 0x0006
	FabricApplicationUpgradeStateRollingBackPending       FabricApplicationUpgradeState = 0x0007
)

type FabricUpgradeState int32

const (
	FabricUpgradeStateInvalid                  FabricUpgradeState = 0x0000
	FabricUpgradeStateRollingBackInProgress    FabricUpgradeState = 0x0001
	FabricUpgradeStateRollingBackCompleted     FabricUpgradeState = 0x0002
	FabricUpgradeStateRollingForwardPending    FabricUpgradeState = 0x0003
	FabricUpgradeStateRollingForwardInProgress FabricUpgradeState = 0x0004
	FabricUpgradeStateRollingForwardCompleted  FabricUpgradeState = 0x0005
	FabricUpgradeStateFailed                   FabricUpgradeState = 0x0006
	FabricUpgradeStateRollingBackPending       FabricUpgradeState = 0x0007
)

type FabricUpgradeDomainState int32

const (
	FabricUpgradeDomainStateInvalid    FabricUpgradeDomainState = 0x0000
	FabricUpgradeDomainStatePending    FabricUpgradeDomainState = 0x0001
	FabricUpgradeDomainStateInProgress FabricUpgradeDomainState = 0x0002
	FabricUpgradeDomainStateCompleted  FabricUpgradeDomainState = 0x0003
)

type FabricUpgradeFailureReason int32

const (
	FabricUpgradeFailureReasonNone                  FabricUpgradeFailureReason = 0x0000
	FabricUpgradeFailureReasonInterrupted           FabricUpgradeFailureReason = 0x0001
	FabricUpgradeFailureReasonHealthCheck           FabricUpgradeFailureReason = 0x0002
	FabricUpgradeFailureReasonUpgradeDomainTimeout  FabricUpgradeFailureReason = 0x0003
	FabricUpgradeFailureReasonOverallUpgradeTimeout FabricUpgradeFailureReason = 0x0004
	FabricUpgradeFailureReasonProcessingFailure     FabricUpgradeFailureReason = 0x0005
)

type FabricLocalStoreKind int32

const (
	FabricLocalStoreKindInvalid FabricLocalStoreKind = 0x0000
	FabricLocalStoreKindEse     FabricLocalStoreKind = 0x0001
)

type FabricServiceReplicaKind int32

const (
	FabricServiceReplicaKindInvalid       FabricServiceReplicaKind = 0x0000
	FabricServiceReplicaKindKeyValueStore FabricServiceReplicaKind = 0x0001
)

type FabricKeyValueStoreNotificationMode int32

const (
	FabricKeyValueStoreNotificationModeInvalid                FabricKeyValueStoreNotificationMode = 0x0000
	FabricKeyValueStoreNotificationModeNone                   FabricKeyValueStoreNotificationMode = 0x0001
	FabricKeyValueStoreNotificationModeNonBlockingQuorumAcked FabricKeyValueStoreNotificationMode = 0x0002
	FabricKeyValueStoreNotificationModeBlockSecondaryAck      FabricKeyValueStoreNotificationMode = 0x0003
)

type FabricKeyValueStoreFullCopyMode int32

const (
	FabricKeyValueStoreFullCopyModeDefault  FabricKeyValueStoreFullCopyMode = 0x0000
	FabricKeyValueStoreFullCopyModePhysical FabricKeyValueStoreFullCopyMode = 0x0001
	FabricKeyValueStoreFullCopyModeLogical  FabricKeyValueStoreFullCopyMode = 0x0002
	FabricKeyValueStoreFullCopyModeRebuild  FabricKeyValueStoreFullCopyMode = 0x0003
)

type FabricTransactionIsolationLevel int32

const (
	FabricTransactionIsolationLevelDefault         FabricTransactionIsolationLevel = 0x0000
	FabricTransactionIsolationLevelReadUncommitted FabricTransactionIsolationLevel = 0x0001
	FabricTransactionIsolationLevelReadCommitted   FabricTransactionIsolationLevel = 0x0002
	FabricTransactionIsolationLevelRepeatableRead  FabricTransactionIsolationLevel = 0x0003
	FabricTransactionIsolationLevelSnapshot        FabricTransactionIsolationLevel = 0x0004
	FabricTransactionIsolationLevelSerializable    FabricTransactionIsolationLevel = 0x0005
)

type FabricNodeDeactivationIntent int32

const (
	FabricNodeDeactivationIntentInvalid    FabricNodeDeactivationIntent = 0x0000
	FabricNodeDeactivationIntentPause      FabricNodeDeactivationIntent = 0x0001
	FabricNodeDeactivationIntentRestart    FabricNodeDeactivationIntent = 0x0002
	FabricNodeDeactivationIntentRemoveData FabricNodeDeactivationIntent = 0x0003
	FabricNodeDeactivationIntentRemoveNode FabricNodeDeactivationIntent = 0x0004
)

type FabricApplicationTypeStatus int32

const (
	FabricApplicationTypeStatusInvalid        FabricApplicationTypeStatus = 0x0000
	FabricApplicationTypeStatusProvisioning   FabricApplicationTypeStatus = 0x0001
	FabricApplicationTypeStatusAvailable      FabricApplicationTypeStatus = 0x0002
	FabricApplicationTypeStatusUnprovisioning FabricApplicationTypeStatus = 0x0003
	FabricApplicationTypeStatusFailed         FabricApplicationTypeStatus = 0x0004
)

type FabricApplicationStatus int32

const (
	FabricApplicationStatusInvalid   FabricApplicationStatus = 0x0000
	FabricApplicationStatusReady     FabricApplicationStatus = 0x0001
	FabricApplicationStatusUpgrading FabricApplicationStatus = 0x0002
	FabricApplicationStatusCreating  FabricApplicationStatus = 0x0003
	FabricApplicationStatusDeleting  FabricApplicationStatus = 0x0004
	FabricApplicationStatusFailed    FabricApplicationStatus = 0x0005
)

type FabricApplicationDefinitionKind int32

const (
	FabricApplicationDefinitionKindInvalid                             FabricApplicationDefinitionKind = 0xFFFF
	FabricApplicationDefinitionKindServiceFabricApplicationDescription FabricApplicationDefinitionKind = 0x0000
	FabricApplicationDefinitionKindCompose                             FabricApplicationDefinitionKind = 0x0001
	FabricApplicationDefinitionKindMeshApplicationDescription          FabricApplicationDefinitionKind = 0x0002
)

type FabricApplicationTypeDefinitionKind int32

const (
	FabricApplicationTypeDefinitionKindInvalid                         FabricApplicationTypeDefinitionKind = 0x0000
	FabricApplicationTypeDefinitionKindServiceFabricApplicationPackage FabricApplicationTypeDefinitionKind = 0x0001
	FabricApplicationTypeDefinitionKindCompose                         FabricApplicationTypeDefinitionKind = 0x0002
	FabricApplicationTypeDefinitionKindMeshApplicationDescription      FabricApplicationTypeDefinitionKind = 0x0003
)

type FabricApplicationDefinitionKindFilter int32

const (
	FabricApplicationDefinitionKindFilterDefault                             FabricApplicationDefinitionKindFilter = 0x0000
	FabricApplicationDefinitionKindFilterAll                                 FabricApplicationDefinitionKindFilter = 0xFFFF
	FabricApplicationDefinitionKindFilterServiceFabricApplicationDescription FabricApplicationDefinitionKindFilter = 0x0001
	FabricApplicationDefinitionKindFilterCompose                             FabricApplicationDefinitionKindFilter = 0x0002
	FabricApplicationDefinitionKindFilterMeshApplicationDescription          FabricApplicationDefinitionKindFilter = 0x0004
)

type FabricApplicationTypeDefinitionKindFilter int32

const (
	FabricApplicationTypeDefinitionKindFilterDefault                         FabricApplicationTypeDefinitionKindFilter = 0x0000
	FabricApplicationTypeDefinitionKindFilterAll                             FabricApplicationTypeDefinitionKindFilter = 0xFFFF
	FabricApplicationTypeDefinitionKindFilterServiceFabricApplicationPackage FabricApplicationTypeDefinitionKindFilter = 0x0001
	FabricApplicationTypeDefinitionKindFilterCompose                         FabricApplicationTypeDefinitionKindFilter = 0x0002
	FabricApplicationTypeDefinitionKindFilterMeshApplicationDescription      FabricApplicationTypeDefinitionKindFilter = 0x0004
)

type FabricServiceTypeRegistrationStatus int32

const (
	FabricServiceTypeRegistrationStatusInvalid       FabricServiceTypeRegistrationStatus = 0x0000
	FabricServiceTypeRegistrationStatusDisabled      FabricServiceTypeRegistrationStatus = 0x0001
	FabricServiceTypeRegistrationStatusNotRegistered FabricServiceTypeRegistrationStatus = 0x0002
	FabricServiceTypeRegistrationStatusRegistered    FabricServiceTypeRegistrationStatus = 0x0003
)

type FabricDeploymentStatus int32

const (
	FabricDeploymentStatusInvalid      FabricDeploymentStatus = 0x0000
	FabricDeploymentStatusDownloading  FabricDeploymentStatus = 0x0001
	FabricDeploymentStatusActivating   FabricDeploymentStatus = 0x0002
	FabricDeploymentStatusActive       FabricDeploymentStatus = 0x0003
	FabricDeploymentStatusUpgrading    FabricDeploymentStatus = 0x0004
	FabricDeploymentStatusDeactivating FabricDeploymentStatus = 0x0005
)

type FabricHostType int32

const (
	FabricHostTypeInvalid       FabricHostType = 0x0000
	FabricHostTypeExeHost       FabricHostType = 0x0001
	FabricHostTypeContainerHost FabricHostType = 0x0002
)

type FabricHostIsolationMode int32

const (
	FabricHostIsolationModeNone    FabricHostIsolationMode = 0x0000
	FabricHostIsolationModeProcess FabricHostIsolationMode = 0x0001
	FabricHostIsolationModeHyperV  FabricHostIsolationMode = 0x0002
)

type FabricErrorntryPointStatus int32

const (
	FabricErrorntryPointStatusInvalid  FabricErrorntryPointStatus = 0x0000
	FabricErrorntryPointStatusPending  FabricErrorntryPointStatus = 0x0001
	FabricErrorntryPointStatusStarting FabricErrorntryPointStatus = 0x0002
	FabricErrorntryPointStatusStarted  FabricErrorntryPointStatus = 0x0003
	FabricErrorntryPointStatusStopping FabricErrorntryPointStatus = 0x0004
	FabricErrorntryPointStatusStopped  FabricErrorntryPointStatus = 0x0005
)

type FabricNodeUpgradePhase int32

const (
	FabricNodeUpgradePhaseInvalid                FabricNodeUpgradePhase = 0x0000
	FabricNodeUpgradePhasePreUpgradeSafetyCheck  FabricNodeUpgradePhase = 0x0001
	FabricNodeUpgradePhaseUpgrading              FabricNodeUpgradePhase = 0x0002
	FabricNodeUpgradePhasePostUpgradeSafetyCheck FabricNodeUpgradePhase = 0x0003
)

type FabricUpgradeSafetyCheckKind int32

const (
	FabricUpgradeSafetyCheckKindInvalid                              FabricUpgradeSafetyCheckKind = 0x0000
	FabricUpgradeSeedNodeSafetyCheckKindEnsureQuorum                 FabricUpgradeSafetyCheckKind = 0x0001
	FabricUpgradePartitionSafetyCheckKindEnsureQuorum                FabricUpgradeSafetyCheckKind = 0x0002
	FabricUpgradePartitionSafetyCheckKindWaitForPrimaryPlacement     FabricUpgradeSafetyCheckKind = 0x0003
	FabricUpgradePartitionSafetyCheckKindWaitForPrimarySwap          FabricUpgradeSafetyCheckKind = 0x0004
	FabricUpgradePartitionSafetyCheckKindWaitForReconfiguration      FabricUpgradeSafetyCheckKind = 0x0005
	FabricUpgradePartitionSafetyCheckKindWaitForInbuildReplica       FabricUpgradeSafetyCheckKind = 0x0006
	FabricUpgradePartitionSafetyCheckKindEnsureAvailability          FabricUpgradeSafetyCheckKind = 0x0007
	FabricUpgradePartitionSafetyCheckKindWaitForResourceAvailability FabricUpgradeSafetyCheckKind = 0x0008
)

type FabricSafetyCheckKind int32

const (
	FabricSafetyCheckKindInvalid                          FabricSafetyCheckKind = 0x0000
	FabricSeedNodeSafetyCheckKindEnsureQuorum             FabricSafetyCheckKind = 0x0001
	FabricPartitionSafetyCheckKindEnsureQuorum            FabricSafetyCheckKind = 0x0002
	FabricPartitionSafetyCheckKindWaitForPrimaryPlacement FabricSafetyCheckKind = 0x0003
	FabricPartitionSafetyCheckKindWaitForPrimarySwap      FabricSafetyCheckKind = 0x0004
	FabricPartitionSafetyCheckKindWaitForReconfiguration  FabricSafetyCheckKind = 0x0005
	FabricPartitionSafetyCheckKindWaitForInbuildReplica   FabricSafetyCheckKind = 0x0006
	FabricPartitionSafetyCheckKindEnsureAvailability      FabricSafetyCheckKind = 0x0007
)

type FabricRepairScopeIdentifierKind int32

const (
	FabricRepairScopeIdentifierKindInvalid FabricRepairScopeIdentifierKind = 0x0000
	FabricRepairScopeIdentifierKindCluster FabricRepairScopeIdentifierKind = 0x0001
)

type FabricRepairTargetKind int32

const (
	FabricRepairTargetKindInvalid FabricRepairTargetKind = 0x0000
	FabricRepairTargetKindNode    FabricRepairTargetKind = 0x0001
)

type FabricRestartNodeDescriptionKind int32

const (
	FabricRestartNodeDescriptionKindInvalid       FabricRestartNodeDescriptionKind = 0x0000
	FabricRestartNodeDescriptionKindUsingNodeName FabricRestartNodeDescriptionKind = 0x0001
)

type FabricStartNodeDescriptionKind int32

const (
	FabricStartNodeDescriptionKindInvalid       FabricStartNodeDescriptionKind = 0x0000
	FabricStartNodeDescriptionKindUsingNodeName FabricStartNodeDescriptionKind = 0x0001
)

type FabricStopNodeDescriptionKind int32

const (
	FabricStopNodeDescriptionKindInvalid       FabricStopNodeDescriptionKind = 0x0000
	FabricStopNodeDescriptionKindUsingNodeName FabricStopNodeDescriptionKind = 0x0001
)

type FabricRestartDeployedCodePackageDescriptionKind int32

const (
	FabricRestartDeployedCodePackageDescriptionKindInvalid       FabricRestartDeployedCodePackageDescriptionKind = 0x0000
	FabricRestartDeployedCodePackageDescriptionKindUsingNodeName FabricRestartDeployedCodePackageDescriptionKind = 0x0001
)

type FabricRepairTaskState int32

const (
	FabricRepairTaskStateInvalid   FabricRepairTaskState = 0x0000
	FabricRepairTaskStateCreated   FabricRepairTaskState = 0x0001
	FabricRepairTaskStateClaimed   FabricRepairTaskState = 0x0002
	FabricRepairTaskStatePreparing FabricRepairTaskState = 0x0004
	FabricRepairTaskStateApproved  FabricRepairTaskState = 0x0008
	FabricRepairTaskStateExecuting FabricRepairTaskState = 0x0010
	FabricRepairTaskStateRestoring FabricRepairTaskState = 0x0020
	FabricRepairTaskStateCompleted FabricRepairTaskState = 0x0040
)

type FabricRepairTaskHealthCheckState int32

const (
	FabricRepairTaskHealthCheckStateNotStarted FabricRepairTaskHealthCheckState = 0x0000
	FabricRepairTaskHealthCheckStateInProgress FabricRepairTaskHealthCheckState = 0x0001
	FabricRepairTaskHealthCheckStateSucceeded  FabricRepairTaskHealthCheckState = 0x0002
	FabricRepairTaskHealthCheckStateSkipped    FabricRepairTaskHealthCheckState = 0x0003
	FabricRepairTaskHealthCheckStateTimedout   FabricRepairTaskHealthCheckState = 0x0004
)

type FabricRepairTaskHealthPolicyUpdateSettingsFlags int32

const (
	FabricRepairTaskHealthPolicyUpdateSettingsNone                             FabricRepairTaskHealthPolicyUpdateSettingsFlags = 0x0000
	FabricRepairTaskHealthPolicyUpdateSettingsHonorPerformPreparingHealthCheck FabricRepairTaskHealthPolicyUpdateSettingsFlags = 0x0001
	FabricRepairTaskHealthPolicyUpdateSettingsHonorPerformRestoringHealthCheck FabricRepairTaskHealthPolicyUpdateSettingsFlags = 0x0002
)

type FabricRepairTaskStateFilter int32

const (
	FabricRepairTaskStateFilterDefault        FabricRepairTaskStateFilter = 0x0000
	FabricRepairTaskStateFilterCreated        FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStateCreated)
	FabricRepairTaskStateFilterClaimed        FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStateClaimed)
	FabricRepairTaskStateFilterPreparing      FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStatePreparing)
	FabricRepairTaskStateFilterApproved       FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStateApproved)
	FabricRepairTaskStateFilterExecuting      FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStateExecuting)
	FabricRepairTaskStateFilterRestoring      FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStateRestoring)
	FabricRepairTaskStateFilterCompleted      FabricRepairTaskStateFilter = FabricRepairTaskStateFilter(FabricRepairTaskStateCompleted)
	FabricRepairTaskStateFilterReadyToExecute FabricRepairTaskStateFilter = FabricRepairTaskStateFilterApproved | FabricRepairTaskStateFilterExecuting
	FabricRepairTaskStateFilterActive         FabricRepairTaskStateFilter = FabricRepairTaskStateFilterCreated | FabricRepairTaskStateFilterClaimed | FabricRepairTaskStateFilterPreparing | FabricRepairTaskStateFilterApproved | FabricRepairTaskStateFilterExecuting | FabricRepairTaskStateFilterRestoring
	FabricRepairTaskStateFilterAll            FabricRepairTaskStateFilter = FabricRepairTaskStateFilterActive | FabricRepairTaskStateFilterCompleted
)

type FabricRepairTaskFlags int32

const (
	FabricRepairTaskFlagsNone            FabricRepairTaskFlags = 0x0000
	FabricRepairTaskFlagsCancelRequested FabricRepairTaskFlags = 0x0001
	FabricRepairTaskFlagsAbortRequested  FabricRepairTaskFlags = 0x0002
	FabricRepairTaskFlagsForcedApproval  FabricRepairTaskFlags = 0x0004
	FabricRepairTaskFlagsValidMask       FabricRepairTaskFlags = FabricRepairTaskFlagsNone | FabricRepairTaskFlagsCancelRequested | FabricRepairTaskFlagsAbortRequested | FabricRepairTaskFlagsForcedApproval
)

type FabricRepairImpactKind int32

const (
	FabricRepairImpactKindInvalid FabricRepairImpactKind = 0x0000
	FabricRepairImpactKindNode    FabricRepairImpactKind = 0x0001
)

type FabricRepairNodeImpactLevel int32

const (
	FabricRepairNodeImpactLevelInvalid    FabricRepairNodeImpactLevel = 0x0000
	FabricRepairNodeImpactLevelNone       FabricRepairNodeImpactLevel = 0x0001
	FabricRepairNodeImpactLevelRestart    FabricRepairNodeImpactLevel = 0x0002
	FabricRepairNodeImpactLevelRemoveData FabricRepairNodeImpactLevel = 0x0003
	FabricRepairNodeImpactLevelRemoveNode FabricRepairNodeImpactLevel = 0x0004
)

type FabricRepairTaskResult int32

const (
	FabricRepairTaskResultInvalid     FabricRepairTaskResult = 0x0000
	FabricRepairTaskResultSucceeded   FabricRepairTaskResult = 0x0001
	FabricRepairTaskResultCancelled   FabricRepairTaskResult = 0x0002
	FabricRepairTaskResultInterrupted FabricRepairTaskResult = 0x0004
	FabricRepairTaskResultFailed      FabricRepairTaskResult = 0x0008
	FabricRepairTaskResultPending     FabricRepairTaskResult = 0x0010
)

type FabricNodeDeactivationStatus int32

const (
	FabricNodeDeactivationStatusNone                  FabricNodeDeactivationStatus = 0x0000
	FabricNodeDeactivationStatusSafetyCheckInProgress FabricNodeDeactivationStatus = 0x0001
	FabricNodeDeactivationStatusSafetyCheckComplete   FabricNodeDeactivationStatus = 0x0002
	FabricNodeDeactivationStatusCompleted             FabricNodeDeactivationStatus = 0x0003
)

type FabricNodeDeactivationTaskType int32

const (
	FabricNodeDeactivationTaskTypeInvalid        FabricNodeDeactivationTaskType = 0x0000
	FabricNodeDeactivationTaskTypeInfrastructure FabricNodeDeactivationTaskType = 0x0001
	FabricNodeDeactivationTaskTypeRepair         FabricNodeDeactivationTaskType = 0x0002
	FabricNodeDeactivationTaskTypeClient         FabricNodeDeactivationTaskType = 0x0003
)

type FabricPartitionSelectorType int32

const (
	FabricPartitionSelectorTypeNone         FabricPartitionSelectorType = 0x0000
	FabricPartitionSelectorTypeSingleton    FabricPartitionSelectorType = 0x0001
	FabricPartitionSelectorTypeNamed        FabricPartitionSelectorType = 0x0002
	FabricPartitionSelectorTypeUniformInt64 FabricPartitionSelectorType = 0x0003
	FabricPartitionSelectorTypePartitionId  FabricPartitionSelectorType = 0x0004
	FabricPartitionSelectorTypeRandom       FabricPartitionSelectorType = 0x0005
)

type FabricDataLossMode int32

const (
	FabricDataLossModeInvalid FabricDataLossMode = 0x0000
	FabricDataLossModePartial FabricDataLossMode = 0x0001
	FabricDataLossModeFull    FabricDataLossMode = 0x0002
)

type FabricTestCommandProgressState int32

const (
	FabricTestCommandProgressStateInvalid        FabricTestCommandProgressState = 0x0000
	FabricTestCommandProgressStateRunning        FabricTestCommandProgressState = 0x0001
	FabricTestCommandProgressStateRollingBack    FabricTestCommandProgressState = 0x0002
	FabricTestCommandProgressStateCompleted      FabricTestCommandProgressState = 0x0003
	FabricTestCommandProgressStateFaulted        FabricTestCommandProgressState = 0x0004
	FabricTestCommandProgressStateCancelled      FabricTestCommandProgressState = 0x0005
	FabricTestCommandProgressStateForceCancelled FabricTestCommandProgressState = 0x0006
)

type FabricQuorumLossMode int32

const (
	FabricQuorumLossModeInvalid        FabricQuorumLossMode = 0x0000
	FabricQuorumLossModeQuorumReplicas FabricQuorumLossMode = 0x0001
	FabricQuorumLossModeAllReplicas    FabricQuorumLossMode = 0x0002
)

type FabricRestartPartitionMode int32

const (
	FabricRestartPartitionModeInvalid                FabricRestartPartitionMode = 0x0000
	FabricRestartPartitionModeAllReplicasOrInstances FabricRestartPartitionMode = 0x0001
	FabricRestartPartitionModeOnlyActiveSecondaries  FabricRestartPartitionMode = 0x0002
)

type FabricMovePrimaryDescriptionKind int32

const (
	FabricMovePrimaryDescriptionKindInvalid              FabricMovePrimaryDescriptionKind = 0x0000
	FabricMovePrimaryDescriptionKindUsingNodeName        FabricMovePrimaryDescriptionKind = 0x0001
	FabricMovePrimaryDescriptionKindUsingReplicaSelector FabricMovePrimaryDescriptionKind = 0x0002
)

type FabricMoveSecondaryDescriptionKind int32

const (
	FabricMoveSecondaryDescriptionKindInvalid              FabricMoveSecondaryDescriptionKind = 0x0000
	FabricMoveSecondaryDescriptionKindUsingNodeName        FabricMoveSecondaryDescriptionKind = 0x0001
	FabricMoveSecondaryDescriptionKindUsingReplicaSelector FabricMoveSecondaryDescriptionKind = 0x0002
)

type FabricNodeTransitionType int32

const (
	FabricNodeTransitionTypeInvalid FabricNodeTransitionType = 0x0000
	FabricNodeTransitionTypeStart   FabricNodeTransitionType = 0x0001
	FabricNodeTransitionTypeStop    FabricNodeTransitionType = 0x0002
)

type FabricReconfigurationPhase int32

const (
	FabricReconfigurationPhaseInvalid   FabricReconfigurationPhase = 0x0000
	FabricReconfigurationPhaseNone      FabricReconfigurationPhase = 0x0001
	FabricReconfigurationPhaseZero      FabricReconfigurationPhase = 0x0002
	FabricReconfigurationPhaseOne       FabricReconfigurationPhase = 0x0003
	FabricReconfigurationPhaseTwo       FabricReconfigurationPhase = 0x0004
	FabricReconfigurationPhaseThree     FabricReconfigurationPhase = 0x0005
	FabricReconfigurationPhaseFour      FabricReconfigurationPhase = 0x0006
	FabricReconfigurationAbortPhaseZero FabricReconfigurationPhase = 0x0007
)

type FabricReconfigurationType int32

const (
	FabricReconfigurationTypeInvalid     FabricReconfigurationType = 0x0000
	FabricReconfigurationTypeSwapprimary FabricReconfigurationType = 0x0001
	FabricReconfigurationTypeFailover    FabricReconfigurationType = 0x0002
	FabricReconfigurationTypeOther       FabricReconfigurationType = 0x0003
	FabricReconfigurationTypeNone        FabricReconfigurationType = 0x0004
)

type FabricChaosStatus int32

const (
	FabricChaosStatusInvalid FabricChaosStatus = 0x0000
	FabricChaosStatusRunning FabricChaosStatus = 0x0001
	FabricChaosStatusStopped FabricChaosStatus = 0x0002
)

type FabricChaosScheduleStatus int32

const (
	FabricChaosScheduleStatusInvalid FabricChaosScheduleStatus = 0x0000
	FabricChaosScheduleStatusActive  FabricChaosScheduleStatus = 0x0001
	FabricChaosScheduleStatusExpired FabricChaosScheduleStatus = 0x0002
	FabricChaosScheduleStatusPending FabricChaosScheduleStatus = 0x0003
	FabricChaosScheduleStatusStopped FabricChaosScheduleStatus = 0x0004
)

type FabricChaosEventKind int32

const (
	FabricChaosEventKindInvalid          FabricChaosEventKind = 0x0000
	FabricChaosEventKindStarted          FabricChaosEventKind = 0x0001
	FabricChaosEventKindExecutingFaults  FabricChaosEventKind = 0x0002
	FabricChaosEventKindWaiting          FabricChaosEventKind = 0x0003
	FabricChaosEventKindValidationFailed FabricChaosEventKind = 0x0004
	FabricChaosEventKindTestError        FabricChaosEventKind = 0x0005
	FabricChaosEventKindStopped          FabricChaosEventKind = 0x0006
)

type FabricProvisionApplicationTypeKind int32

const (
	FabricProvisionApplicationTypeKindInvalid        FabricProvisionApplicationTypeKind = 0x0000
	FabricProvisionApplicationTypeKindImageStorePath FabricProvisionApplicationTypeKind = 0x0001
	FabricProvisionApplicationTypeKindExternalStore  FabricProvisionApplicationTypeKind = 0x0002
)

type FabricApplicationPackageCleanupPolicy int32

const (
	FabricApplicationPackageCleanupPolicyInvalid   FabricApplicationPackageCleanupPolicy = 0x0000
	FabricApplicationPackageCleanupPolicyDefault   FabricApplicationPackageCleanupPolicy = 0x0001
	FabricApplicationPackageCleanupPolicyAutomatic FabricApplicationPackageCleanupPolicy = 0x0002
	FabricApplicationPackageCleanupPolicyManual    FabricApplicationPackageCleanupPolicy = 0x0003
)

type FabricDiagnosticsSinksKind int32

const (
	FabricDiagnosticsSinksKindInvalid       FabricDiagnosticsSinksKind = 0x000
	FabricDiagnosticsSinksKindAzureinternal FabricDiagnosticsSinksKind = 0x001
)

type FabricPlacementPolicyType int32

const (
	FabricPlacementPolicyInvalid                    FabricPlacementPolicyType = 0x0000
	FabricPlacementPolicyInvalidDomain              FabricPlacementPolicyType = 0x0001
	FabricPlacementPolicyRequiredDomain             FabricPlacementPolicyType = 0x0002
	FabricPlacementPolicyPreferredPrimaryDomain     FabricPlacementPolicyType = 0x0003
	FabricPlacementPolicyRequiredDomainDistribution FabricPlacementPolicyType = 0x0004
	FabricPlacementPolicyNonpartiallyPlaceService   FabricPlacementPolicyType = 0x0005
)

type FabricPackageSharingPolicyScope int32

const (
	FabricPackageSharingPolicyScopeNone   FabricPackageSharingPolicyScope = 0x0000
	FabricPackageSharingPolicyScopeAll    FabricPackageSharingPolicyScope = 0x0001
	FabricPackageSharingPolicyScopeCode   FabricPackageSharingPolicyScope = 0x0002
	FabricPackageSharingPolicyScopeConfig FabricPackageSharingPolicyScope = 0x0003
	FabricPackageSharingPolicyScopeData   FabricPackageSharingPolicyScope = 0x0004
)

type FabricHealthStateFilter int32

const (
	FabricHealthStateFilterDefault FabricHealthStateFilter = 0x0000
	FabricHealthStateFilterNone    FabricHealthStateFilter = 0x0001
	FabricHealthStateFilterOk      FabricHealthStateFilter = 0x0002
	FabricHealthStateFilterWarning FabricHealthStateFilter = 0x0004
	FabricHealthStateFilterError   FabricHealthStateFilter = 0x0008
	FabricHealthStateFilterAll     FabricHealthStateFilter = 0xFFFF
)

type FabricApplicationUpdateDescriptionFlags int32

const (
	FabricApplicationUpdateDescriptionFlagsNone     FabricApplicationUpdateDescriptionFlags = 0x0000
	FabricApplicationUpdateDescriptionFlagsMinnodes FabricApplicationUpdateDescriptionFlags = 0x0001
	FabricApplicationUpdateDescriptionFlagsMaxnodes FabricApplicationUpdateDescriptionFlags = 0x0002
	FabricApplicationUpdateDescriptionFlagsMetrics  FabricApplicationUpdateDescriptionFlags = 0x0004
)

type FabricScalingTriggerKind int32

const (
	FabricScalingTriggerKindInvalid              FabricScalingTriggerKind = 0x0000
	FabricScalingTriggerKindAveragePartitionLoad FabricScalingTriggerKind = 0x0001
	FabricScalingTriggerKindAverageServiceLoad   FabricScalingTriggerKind = 0x0002
)

type FabricScalingMechanismKind int32

const (
	FabricScalingMechanismInvalid                                FabricScalingMechanismKind = 0x0000
	FabricScalingMechanismKindScalePartitionInstanceCount        FabricScalingMechanismKind = 0x0001
	FabricScalingMechanismKindAddRemoveIncrementalNamedPartition FabricScalingMechanismKind = 0x0002
)

type FabricTestCommandStateFilter int32

const (
	FabricTestCommandStateFilterDefault               FabricTestCommandStateFilter = 0x0000
	FabricTestCommandStateFilterAll                   FabricTestCommandStateFilter = 0xFFFF
	FabricTestCommandStateFilterRunning               FabricTestCommandStateFilter = 0x0001
	FabricTestCommandStateFilterRollingBack           FabricTestCommandStateFilter = 0x0002
	FabricTestCommandStateFilterCompletedSuccessfully FabricTestCommandStateFilter = 0x0008
	FabricTestCommandStateFilterFailed                FabricTestCommandStateFilter = 0x0010
	FabricTestCommandStateFilterCancelled             FabricTestCommandStateFilter = 0x0020
	FabricTestCommandStateFilterForceCancelled        FabricTestCommandStateFilter = 0x0040
)

type FabricTestCommandTypeFilter int32

const (
	FabricTestCommandTypeFilterDefault             FabricTestCommandTypeFilter = 0x0000
	FabricTestCommandTypeFilterAll                 FabricTestCommandTypeFilter = 0xFFFF
	FabricTestCommandTypeFilterPartitionDataLoss   FabricTestCommandTypeFilter = 0x0001
	FabricTestCommandTypeFilterPartitionQuorumLoss FabricTestCommandTypeFilter = 0x0002
	FabricTestCommandTypeFilterPartitionRestart    FabricTestCommandTypeFilter = 0x0004
)

type FabricTestCommandType int32

const (
	FabricTestCommandTypeDefault                FabricTestCommandType = 0x0000
	FabricTestCommandTypeInvokeDataLoss         FabricTestCommandType = 0x0001
	FabricTestCommandTypeInvokeQuorumLoss       FabricTestCommandType = 0x0002
	FabricTestCommandTypeInvokeRestartPartition FabricTestCommandType = 0x0004
	FabricTestCommandTypeStartNodeTransition    FabricTestCommandType = 0x0008
)

type FabricKeyValueStoreMigrationPhase int32

const (
	FabricKeyValueStoreMigrationPhaseInactive              FabricKeyValueStoreMigrationPhase = 0
	FabricKeyValueStoreMigrationPhaseMigration             FabricKeyValueStoreMigrationPhase = 1
	FabricKeyValueStoreMigrationPhaseTargetDatabaseSwap    FabricKeyValueStoreMigrationPhase = 2
	FabricKeyValueStoreMigrationPhaseTargetDatabaseCleanup FabricKeyValueStoreMigrationPhase = 3
	FabricKeyValueStoreMigrationPhaseSourceDatabaseCleanup FabricKeyValueStoreMigrationPhase = 4
	FabricKeyValueStoreMigrationPhaseTargetDatabaseActive  FabricKeyValueStoreMigrationPhase = 5
	FabricKeyValueStoreMigrationPhaseRestoreSourceBackup   FabricKeyValueStoreMigrationPhase = 6
)

type FabricKeyValueStoreMigrationState int32

const (
	FabricKeyValueStoreMigrationStateInactive   FabricKeyValueStoreMigrationState = 0
	FabricKeyValueStoreMigrationStateProcessing FabricKeyValueStoreMigrationState = 1
	FabricKeyValueStoreMigrationStateCompleted  FabricKeyValueStoreMigrationState = 2
	FabricKeyValueStoreMigrationStateCanceled   FabricKeyValueStoreMigrationState = 3
	FabricKeyValueStoreMigrationStateFailed     FabricKeyValueStoreMigrationState = 4
)

type FabricKeyValueStoreProviderKind int32

const (
	FabricKeyValueStoreProviderKindUnknown FabricKeyValueStoreProviderKind = 0
	FabricKeyValueStoreProviderKindEse     FabricKeyValueStoreProviderKind = 1
	FabricKeyValueStoreProviderKindTstore  FabricKeyValueStoreProviderKind = 2
)

type FabricNetworkType int32

const (
	FabricNetworkTypeInvalid   FabricNetworkType = 0x0000
	FabricNetworkTypeLocal     FabricNetworkType = 0x0001
	FabricNetworkTypeFederated FabricNetworkType = 0x0002
)

type FabricNetworkStatus int32

const (
	FabricNetworkStatusInvalid  FabricNetworkStatus = 0x0000
	FabricNetworkStatusReady    FabricNetworkStatus = 0x0001
	FabricNetworkStatusCreating FabricNetworkStatus = 0x0002
	FabricNetworkStatusDeleting FabricNetworkStatus = 0x0003
	FabricNetworkStatusUpdating FabricNetworkStatus = 0x0004
	FabricNetworkStatusFailed   FabricNetworkStatus = 0x0005
)

type FabricNetworkStatusFilter int32

const (
	FabricNetworkStatusFilterDefault  FabricNetworkStatusFilter = 0x0000
	FabricNetworkStatusFilterAll      FabricNetworkStatusFilter = 0xFFFF
	FabricNetworkStatusFilterReady    FabricNetworkStatusFilter = 0x0001
	FabricNetworkStatusFilterCreating FabricNetworkStatusFilter = 0x0002
	FabricNetworkStatusFilterDeleting FabricNetworkStatusFilter = 0x0004
	FabricNetworkStatusFilterUpdating FabricNetworkStatusFilter = 0x0008
	FabricNetworkStatusFilterFailed   FabricNetworkStatusFilter = 0x0010
)

type FabricNodeId struct {
	Low  uint64
	High uint64
}
type innerFabricNodeId struct {
	FabricNodeId
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeId) toGoStruct() *FabricNodeId {
	if obj == nil {
		return nil
	}
	return &obj.FabricNodeId
}
func (obj *FabricNodeId) toInnerStruct() *innerFabricNodeId {
	if obj == nil {
		return nil
	}
	return &innerFabricNodeId{*obj, nil}
}

type FabricOperationDataBuffer struct {
	Buffer []byte
}
type innerFabricOperationDataBuffer struct {
	FabricOperationDataBuffer
}

func (obj *innerFabricOperationDataBuffer) toGoStruct() *FabricOperationDataBuffer {
	if obj == nil {
		return nil
	}
	return &obj.FabricOperationDataBuffer
}
func (obj *FabricOperationDataBuffer) toInnerStruct() *innerFabricOperationDataBuffer {
	if obj == nil {
		return nil
	}
	return &innerFabricOperationDataBuffer{*obj}
}

type FabricServiceLoadMetricDescription struct {
	Name                 string
	Weight               FabricServiceLoadMetricWeight
	PrimaryDefaultLoad   uint32
	SecondaryDefaultLoad uint32
}

func (obj *FabricServiceLoadMetricDescription) toInnerStruct() *innerFabricServiceLoadMetricDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceLoadMetricDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Weight = obj.Weight
	dst.PrimaryDefaultLoad = obj.PrimaryDefaultLoad
	dst.SecondaryDefaultLoad = obj.SecondaryDefaultLoad
	return dst
}

type innerFabricServiceLoadMetricDescription struct {
	Name                 *uint16
	Weight               FabricServiceLoadMetricWeight
	PrimaryDefaultLoad   uint32
	SecondaryDefaultLoad uint32
	Reserved             unsafe.Pointer
}

func (obj *innerFabricServiceLoadMetricDescription) toGoStruct() (dst *FabricServiceLoadMetricDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceLoadMetricDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Weight = obj.Weight
	dst.PrimaryDefaultLoad = obj.PrimaryDefaultLoad
	dst.SecondaryDefaultLoad = obj.SecondaryDefaultLoad
	return
}

type FabricPartitionSelector struct {
	ServiceName           string
	PartitionSelectorType FabricPartitionSelectorType
	PartitionKey          string
}

func (obj *FabricPartitionSelector) toInnerStruct() *innerFabricPartitionSelector {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionSelector{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionSelectorType = obj.PartitionSelectorType
	dst.PartitionKey = utf16PtrFromString(obj.PartitionKey)
	return dst
}

type innerFabricPartitionSelector struct {
	ServiceName           *uint16
	PartitionSelectorType FabricPartitionSelectorType
	PartitionKey          *uint16
	Reserved              unsafe.Pointer
}

func (obj *innerFabricPartitionSelector) toGoStruct() (dst *FabricPartitionSelector) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionSelector{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionSelectorType = obj.PartitionSelectorType
	dst.PartitionKey = utf16PtrToString(obj.PartitionKey)
	return
}

type FabricStartPartitionDataLossDescription struct {
	OperationId       uuid.UUID
	PartitionSelector *FabricPartitionSelector
	DataLossMode      FabricDataLossMode
}
type innerFabricStartPartitionDataLossDescription struct {
	FabricStartPartitionDataLossDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricStartPartitionDataLossDescription) toGoStruct() *FabricStartPartitionDataLossDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricStartPartitionDataLossDescription
}
func (obj *FabricStartPartitionDataLossDescription) toInnerStruct() *innerFabricStartPartitionDataLossDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricStartPartitionDataLossDescription{*obj, nil}
}

type FabricSelectedPartition struct {
	ServiceName string
	PartitionId uuid.UUID
}

func (obj *FabricSelectedPartition) toInnerStruct() *innerFabricSelectedPartition {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSelectedPartition{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	return dst
}

type innerFabricSelectedPartition struct {
	ServiceName *uint16
	PartitionId uuid.UUID
	Reserved    unsafe.Pointer
}

func (obj *innerFabricSelectedPartition) toGoStruct() (dst *FabricSelectedPartition) {
	if obj == nil {
		return
	}
	dst = &FabricSelectedPartition{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	return
}

type FabricPartitionDataLossResult struct {
	SelectedPartition *FabricSelectedPartition
	ErrorCode         FabricErrorCode
}
type innerFabricPartitionDataLossResult struct {
	FabricPartitionDataLossResult
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionDataLossResult) toGoStruct() *FabricPartitionDataLossResult {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionDataLossResult
}
func (obj *FabricPartitionDataLossResult) toInnerStruct() *innerFabricPartitionDataLossResult {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionDataLossResult{*obj, nil}
}

type FabricPartitionDataLossProgress struct {
	State  FabricTestCommandProgressState
	Result *FabricPartitionDataLossResult
}
type innerFabricPartitionDataLossProgress struct {
	FabricPartitionDataLossProgress
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionDataLossProgress) toGoStruct() *FabricPartitionDataLossProgress {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionDataLossProgress
}
func (obj *FabricPartitionDataLossProgress) toInnerStruct() *innerFabricPartitionDataLossProgress {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionDataLossProgress{*obj, nil}
}

type FabricStartPartitionQuorumLossDescription struct {
	OperationId                      uuid.UUID
	PartitionSelector                *FabricPartitionSelector
	QuorumLossMode                   FabricQuorumLossMode
	QuorumLossDurationInMilliSeconds int32
}
type innerFabricStartPartitionQuorumLossDescription struct {
	FabricStartPartitionQuorumLossDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricStartPartitionQuorumLossDescription) toGoStruct() *FabricStartPartitionQuorumLossDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricStartPartitionQuorumLossDescription
}
func (obj *FabricStartPartitionQuorumLossDescription) toInnerStruct() *innerFabricStartPartitionQuorumLossDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricStartPartitionQuorumLossDescription{*obj, nil}
}

type FabricPartitionQuorumLossResult struct {
	SelectedPartition *FabricSelectedPartition
	ErrorCode         FabricErrorCode
}
type innerFabricPartitionQuorumLossResult struct {
	FabricPartitionQuorumLossResult
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionQuorumLossResult) toGoStruct() *FabricPartitionQuorumLossResult {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionQuorumLossResult
}
func (obj *FabricPartitionQuorumLossResult) toInnerStruct() *innerFabricPartitionQuorumLossResult {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionQuorumLossResult{*obj, nil}
}

type FabricPartitionQuorumLossProgress struct {
	State  FabricTestCommandProgressState
	Result *FabricPartitionQuorumLossResult
}
type innerFabricPartitionQuorumLossProgress struct {
	FabricPartitionQuorumLossProgress
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionQuorumLossProgress) toGoStruct() *FabricPartitionQuorumLossProgress {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionQuorumLossProgress
}
func (obj *FabricPartitionQuorumLossProgress) toInnerStruct() *innerFabricPartitionQuorumLossProgress {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionQuorumLossProgress{*obj, nil}
}

type FabricStartPartitionRestartDescription struct {
	OperationId          uuid.UUID
	PartitionSelector    *FabricPartitionSelector
	RestartPartitionMode FabricRestartPartitionMode
}
type innerFabricStartPartitionRestartDescription struct {
	FabricStartPartitionRestartDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricStartPartitionRestartDescription) toGoStruct() *FabricStartPartitionRestartDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricStartPartitionRestartDescription
}
func (obj *FabricStartPartitionRestartDescription) toInnerStruct() *innerFabricStartPartitionRestartDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricStartPartitionRestartDescription{*obj, nil}
}

type FabricOrchestrationUpgradeProgress struct {
	UpgradeState   FabricUpgradeState
	ProgressStatus uint32
	ConfigVersion  string
	Details        string
}

func (obj *FabricOrchestrationUpgradeProgress) toInnerStruct() *innerFabricOrchestrationUpgradeProgress {
	if obj == nil {
		return nil
	}
	dst := &innerFabricOrchestrationUpgradeProgress{}
	dst.UpgradeState = obj.UpgradeState
	dst.ProgressStatus = obj.ProgressStatus
	ex0 := dst
	ex1 := &innerFabricOrchestrationUpgradeProgressEx1{}
	ex1.ConfigVersion = utf16PtrFromString(obj.ConfigVersion)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricOrchestrationUpgradeProgressEx2{}
	ex2.Details = utf16PtrFromString(obj.Details)
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricOrchestrationUpgradeProgress struct {
	UpgradeState   FabricUpgradeState
	ProgressStatus uint32
	Reserved       unsafe.Pointer
}
type innerFabricOrchestrationUpgradeProgressEx1 struct {
	ConfigVersion *uint16
	Reserved      unsafe.Pointer
}
type innerFabricOrchestrationUpgradeProgressEx2 struct {
	Details  *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricOrchestrationUpgradeProgress) toGoStruct() (dst *FabricOrchestrationUpgradeProgress) {
	if obj == nil {
		return
	}
	dst = &FabricOrchestrationUpgradeProgress{}
	dst.UpgradeState = obj.UpgradeState
	dst.ProgressStatus = obj.ProgressStatus
	ex0 := obj
	ex1 := (*innerFabricOrchestrationUpgradeProgressEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ConfigVersion = utf16PtrToString(ex1.ConfigVersion)
	ex2 := (*innerFabricOrchestrationUpgradeProgressEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.Details = utf16PtrToString(ex2.Details)
	return
}

type FabricPartitionRestartResult struct {
	SelectedPartition *FabricSelectedPartition
	ErrorCode         FabricErrorCode
}
type innerFabricPartitionRestartResult struct {
	FabricPartitionRestartResult
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionRestartResult) toGoStruct() *FabricPartitionRestartResult {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionRestartResult
}
func (obj *FabricPartitionRestartResult) toInnerStruct() *innerFabricPartitionRestartResult {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionRestartResult{*obj, nil}
}

type FabricPartitionRestartProgress struct {
	State  FabricTestCommandProgressState
	Result *FabricPartitionRestartResult
}
type innerFabricPartitionRestartProgress struct {
	FabricPartitionRestartProgress
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionRestartProgress) toGoStruct() *FabricPartitionRestartProgress {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionRestartProgress
}
func (obj *FabricPartitionRestartProgress) toInnerStruct() *innerFabricPartitionRestartProgress {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionRestartProgress{*obj, nil}
}

type FabricCancelTestCommandDescription struct {
	OperationId uuid.UUID
	Force       bool
}
type innerFabricCancelTestCommandDescription struct {
	FabricCancelTestCommandDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricCancelTestCommandDescription) toGoStruct() *FabricCancelTestCommandDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricCancelTestCommandDescription
}
func (obj *FabricCancelTestCommandDescription) toInnerStruct() *innerFabricCancelTestCommandDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricCancelTestCommandDescription{*obj, nil}
}

type FabricOperationId struct {
	PartitionId uuid.UUID
}
type innerFabricOperationId struct {
	FabricOperationId
	Reserved unsafe.Pointer
}

func (obj *innerFabricOperationId) toGoStruct() *FabricOperationId {
	if obj == nil {
		return nil
	}
	return &obj.FabricOperationId
}
func (obj *FabricOperationId) toInnerStruct() *innerFabricOperationId {
	if obj == nil {
		return nil
	}
	return &innerFabricOperationId{*obj, nil}
}

type FabricTestCommandListDescription struct {
	TestCommandStateFilter FabricTestCommandStateFilter
	TestCommandTypeFilter  FabricTestCommandTypeFilter
}
type innerFabricTestCommandListDescription struct {
	FabricTestCommandListDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricTestCommandListDescription) toGoStruct() *FabricTestCommandListDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricTestCommandListDescription
}
func (obj *FabricTestCommandListDescription) toInnerStruct() *innerFabricTestCommandListDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricTestCommandListDescription{*obj, nil}
}

type TestCommandQueryResultItem struct {
	OperationId      uuid.UUID
	TestCommandState FabricTestCommandProgressState
	TestCommandType  FabricTestCommandType
}
type innerTestCommandQueryResultItem struct {
	TestCommandQueryResultItem
	Reserved unsafe.Pointer
}

func (obj *innerTestCommandQueryResultItem) toGoStruct() *TestCommandQueryResultItem {
	if obj == nil {
		return nil
	}
	return &obj.TestCommandQueryResultItem
}
func (obj *TestCommandQueryResultItem) toInnerStruct() *innerTestCommandQueryResultItem {
	if obj == nil {
		return nil
	}
	return &innerTestCommandQueryResultItem{*obj, nil}
}

type innerTestCommandQueryResultList struct {
	Count uint32
	Items unsafe.Pointer
}

func (obj *innerTestCommandQueryResultList) toGoStruct() []interface{} {
	var dst []interface{}
	{
		var innerlst []unsafe.Pointer
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem interface{}

			tmpitem = fromUnsafePointer(item)

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricNodeResult struct {
	NodeName     string
	NodeInstance uint64
}

func (obj *FabricNodeResult) toInnerStruct() *innerFabricNodeResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeResult{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstance = obj.NodeInstance
	return dst
}

type innerFabricNodeResult struct {
	NodeName     *uint16
	NodeInstance uint64
	Reserved     unsafe.Pointer
}

func (obj *innerFabricNodeResult) toGoStruct() (dst *FabricNodeResult) {
	if obj == nil {
		return
	}
	dst = &FabricNodeResult{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstance = obj.NodeInstance
	return
}

type FabricRestartNodeStatus struct {
	NodeResult *FabricNodeResult
}
type innerFabricRestartNodeStatus struct {
	FabricRestartNodeStatus
	Reserved unsafe.Pointer
}

func (obj *innerFabricRestartNodeStatus) toGoStruct() *FabricRestartNodeStatus {
	if obj == nil {
		return nil
	}
	return &obj.FabricRestartNodeStatus
}
func (obj *FabricRestartNodeStatus) toInnerStruct() *innerFabricRestartNodeStatus {
	if obj == nil {
		return nil
	}
	return &innerFabricRestartNodeStatus{*obj, nil}
}

type FabricStartNodeStatus struct {
	NodeResult *FabricNodeResult
}
type innerFabricStartNodeStatus struct {
	FabricStartNodeStatus
	Reserved unsafe.Pointer
}

func (obj *innerFabricStartNodeStatus) toGoStruct() *FabricStartNodeStatus {
	if obj == nil {
		return nil
	}
	return &obj.FabricStartNodeStatus
}
func (obj *FabricStartNodeStatus) toInnerStruct() *innerFabricStartNodeStatus {
	if obj == nil {
		return nil
	}
	return &innerFabricStartNodeStatus{*obj, nil}
}

type FabricStopNodeStatus struct {
	NodeResult *FabricNodeResult
}
type innerFabricStopNodeStatus struct {
	FabricStopNodeStatus
	Reserved unsafe.Pointer
}

func (obj *innerFabricStopNodeStatus) toGoStruct() *FabricStopNodeStatus {
	if obj == nil {
		return nil
	}
	return &obj.FabricStopNodeStatus
}
func (obj *FabricStopNodeStatus) toInnerStruct() *innerFabricStopNodeStatus {
	if obj == nil {
		return nil
	}
	return &innerFabricStopNodeStatus{*obj, nil}
}

type FabricNodeTransitionResult struct {
	ErrorCode  FabricErrorCode
	NodeResult *FabricNodeResult
}
type innerFabricNodeTransitionResult struct {
	FabricNodeTransitionResult
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeTransitionResult) toGoStruct() *FabricNodeTransitionResult {
	if obj == nil {
		return nil
	}
	return &obj.FabricNodeTransitionResult
}
func (obj *FabricNodeTransitionResult) toInnerStruct() *innerFabricNodeTransitionResult {
	if obj == nil {
		return nil
	}
	return &innerFabricNodeTransitionResult{*obj, nil}
}

type FabricNodeTransitionProgress struct {
	State  FabricTestCommandProgressState
	Result *FabricNodeTransitionResult
}
type innerFabricNodeTransitionProgress struct {
	FabricNodeTransitionProgress
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeTransitionProgress) toGoStruct() *FabricNodeTransitionProgress {
	if obj == nil {
		return nil
	}
	return &obj.FabricNodeTransitionProgress
}
func (obj *FabricNodeTransitionProgress) toInnerStruct() *innerFabricNodeTransitionProgress {
	if obj == nil {
		return nil
	}
	return &innerFabricNodeTransitionProgress{*obj, nil}
}

type innerFabricServiceLoadMetricDescriptionList struct {
	Count uint32
	Items *innerFabricServiceLoadMetricDescription
}

func (obj *innerFabricServiceLoadMetricDescriptionList) toGoStruct() []FabricServiceLoadMetricDescription {
	var dst []FabricServiceLoadMetricDescription
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceCorrelationDescription struct {
	ServiceName string
	Scheme      FabricServiceCorrelationScheme
}

func (obj *FabricServiceCorrelationDescription) toInnerStruct() *innerFabricServiceCorrelationDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceCorrelationDescription{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.Scheme = obj.Scheme
	return dst
}

type innerFabricServiceCorrelationDescription struct {
	ServiceName *uint16
	Scheme      FabricServiceCorrelationScheme
	Reserved    unsafe.Pointer
}

func (obj *innerFabricServiceCorrelationDescription) toGoStruct() (dst *FabricServiceCorrelationDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceCorrelationDescription{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.Scheme = obj.Scheme
	return
}

type FabricScalingTrigger struct {
	ScalingTriggerKind        FabricScalingTriggerKind
	ScalingTriggerDescription interface{}
}

func (obj *FabricScalingTrigger) toInnerStruct() *innerFabricScalingTrigger {
	if obj == nil {
		return nil
	}
	dst := &innerFabricScalingTrigger{}
	dst.ScalingTriggerKind = obj.ScalingTriggerKind
	dst.ScalingTriggerDescription = toUnsafePointer(obj.ScalingTriggerDescription)
	return dst
}

type innerFabricScalingTrigger struct {
	ScalingTriggerKind        FabricScalingTriggerKind
	ScalingTriggerDescription unsafe.Pointer
}

func (obj *innerFabricScalingTrigger) toGoStruct() (dst *FabricScalingTrigger) {
	if obj == nil {
		return
	}
	dst = &FabricScalingTrigger{}
	dst.ScalingTriggerKind = obj.ScalingTriggerKind
	dst.ScalingTriggerDescription = fromUnsafePointer(obj.ScalingTriggerDescription)
	return
}

type FabricScalingMechanism struct {
	ScalingMechanismKind        FabricScalingMechanismKind
	ScalingMechanismDescription interface{}
}

func (obj *FabricScalingMechanism) toInnerStruct() *innerFabricScalingMechanism {
	if obj == nil {
		return nil
	}
	dst := &innerFabricScalingMechanism{}
	dst.ScalingMechanismKind = obj.ScalingMechanismKind
	dst.ScalingMechanismDescription = toUnsafePointer(obj.ScalingMechanismDescription)
	return dst
}

type innerFabricScalingMechanism struct {
	ScalingMechanismKind        FabricScalingMechanismKind
	ScalingMechanismDescription unsafe.Pointer
}

func (obj *innerFabricScalingMechanism) toGoStruct() (dst *FabricScalingMechanism) {
	if obj == nil {
		return
	}
	dst = &FabricScalingMechanism{}
	dst.ScalingMechanismKind = obj.ScalingMechanismKind
	dst.ScalingMechanismDescription = fromUnsafePointer(obj.ScalingMechanismDescription)
	return
}

type FabricServiceScalingPolicy struct {
	ServiceScalingPolicyTrigger   FabricScalingTrigger
	ServiceScalingPolicyMechanism FabricScalingMechanism
}
type innerFabricServiceScalingPolicy struct {
	FabricServiceScalingPolicy
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceScalingPolicy) toGoStruct() *FabricServiceScalingPolicy {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceScalingPolicy
}
func (obj *FabricServiceScalingPolicy) toInnerStruct() *innerFabricServiceScalingPolicy {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceScalingPolicy{*obj, nil}
}

type FabricScalingTriggerAveragePartitionLoad struct {
	MetricName             string
	LowerLoadThreshold     float64
	UpperLoadThreshold     float64
	ScaleIntervalInSeconds uint32
}

func (obj *FabricScalingTriggerAveragePartitionLoad) toInnerStruct() *innerFabricScalingTriggerAveragePartitionLoad {
	if obj == nil {
		return nil
	}
	dst := &innerFabricScalingTriggerAveragePartitionLoad{}
	dst.MetricName = utf16PtrFromString(obj.MetricName)
	dst.LowerLoadThreshold = obj.LowerLoadThreshold
	dst.UpperLoadThreshold = obj.UpperLoadThreshold
	dst.ScaleIntervalInSeconds = obj.ScaleIntervalInSeconds
	return dst
}

type innerFabricScalingTriggerAveragePartitionLoad struct {
	MetricName             *uint16
	LowerLoadThreshold     float64
	UpperLoadThreshold     float64
	ScaleIntervalInSeconds uint32
	Reserved               unsafe.Pointer
}

func (obj *innerFabricScalingTriggerAveragePartitionLoad) toGoStruct() (dst *FabricScalingTriggerAveragePartitionLoad) {
	if obj == nil {
		return
	}
	dst = &FabricScalingTriggerAveragePartitionLoad{}
	dst.MetricName = utf16PtrToString(obj.MetricName)
	dst.LowerLoadThreshold = obj.LowerLoadThreshold
	dst.UpperLoadThreshold = obj.UpperLoadThreshold
	dst.ScaleIntervalInSeconds = obj.ScaleIntervalInSeconds
	return
}

type FabricScalingTriggerAverageServiceLoad struct {
	MetricName             string
	LowerLoadThreshold     float64
	UpperLoadThreshold     float64
	ScaleIntervalInSeconds uint32
	UseOnlyPrimaryLoad     bool
}

func (obj *FabricScalingTriggerAverageServiceLoad) toInnerStruct() *innerFabricScalingTriggerAverageServiceLoad {
	if obj == nil {
		return nil
	}
	dst := &innerFabricScalingTriggerAverageServiceLoad{}
	dst.MetricName = utf16PtrFromString(obj.MetricName)
	dst.LowerLoadThreshold = obj.LowerLoadThreshold
	dst.UpperLoadThreshold = obj.UpperLoadThreshold
	dst.ScaleIntervalInSeconds = obj.ScaleIntervalInSeconds
	ex0 := dst
	ex1 := &innerFabricScalingTriggerAverageServiceLoadEx1{}
	ex1.UseOnlyPrimaryLoad = obj.UseOnlyPrimaryLoad
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricScalingTriggerAverageServiceLoad struct {
	MetricName             *uint16
	LowerLoadThreshold     float64
	UpperLoadThreshold     float64
	ScaleIntervalInSeconds uint32
	Reserved               unsafe.Pointer
}
type innerFabricScalingTriggerAverageServiceLoadEx1 struct {
	UseOnlyPrimaryLoad bool
	Reserved           unsafe.Pointer
}

func (obj *innerFabricScalingTriggerAverageServiceLoad) toGoStruct() (dst *FabricScalingTriggerAverageServiceLoad) {
	if obj == nil {
		return
	}
	dst = &FabricScalingTriggerAverageServiceLoad{}
	dst.MetricName = utf16PtrToString(obj.MetricName)
	dst.LowerLoadThreshold = obj.LowerLoadThreshold
	dst.UpperLoadThreshold = obj.UpperLoadThreshold
	dst.ScaleIntervalInSeconds = obj.ScaleIntervalInSeconds
	ex0 := obj
	ex1 := (*innerFabricScalingTriggerAverageServiceLoadEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.UseOnlyPrimaryLoad = ex1.UseOnlyPrimaryLoad
	return
}

type FabricScalingMechanismPartitionInstanceCount struct {
	MaximumInstanceCount int32
	MinimumInstanceCount int32
	ScaleIncrement       int32
}
type innerFabricScalingMechanismPartitionInstanceCount struct {
	FabricScalingMechanismPartitionInstanceCount
	Reserved unsafe.Pointer
}

func (obj *innerFabricScalingMechanismPartitionInstanceCount) toGoStruct() *FabricScalingMechanismPartitionInstanceCount {
	if obj == nil {
		return nil
	}
	return &obj.FabricScalingMechanismPartitionInstanceCount
}
func (obj *FabricScalingMechanismPartitionInstanceCount) toInnerStruct() *innerFabricScalingMechanismPartitionInstanceCount {
	if obj == nil {
		return nil
	}
	return &innerFabricScalingMechanismPartitionInstanceCount{*obj, nil}
}

type FabricScalingMechanismAddRemoveIncrementalNamedPartition struct {
	MaximumPartitionCount int32
	MinimumPartitionCount int32
	ScaleIncrement        int32
}
type innerFabricScalingMechanismAddRemoveIncrementalNamedPartition struct {
	FabricScalingMechanismAddRemoveIncrementalNamedPartition
	Reserved unsafe.Pointer
}

func (obj *innerFabricScalingMechanismAddRemoveIncrementalNamedPartition) toGoStruct() *FabricScalingMechanismAddRemoveIncrementalNamedPartition {
	if obj == nil {
		return nil
	}
	return &obj.FabricScalingMechanismAddRemoveIncrementalNamedPartition
}
func (obj *FabricScalingMechanismAddRemoveIncrementalNamedPartition) toInnerStruct() *innerFabricScalingMechanismAddRemoveIncrementalNamedPartition {
	if obj == nil {
		return nil
	}
	return &innerFabricScalingMechanismAddRemoveIncrementalNamedPartition{*obj, nil}
}

type FabricPlacementPolicyInvalidDomainDescription struct {
	InvalidFaultDomain string
}

func (obj *FabricPlacementPolicyInvalidDomainDescription) toInnerStruct() *innerFabricPlacementPolicyInvalidDomainDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPlacementPolicyInvalidDomainDescription{}
	dst.InvalidFaultDomain = utf16PtrFromString(obj.InvalidFaultDomain)
	return dst
}

type innerFabricPlacementPolicyInvalidDomainDescription struct {
	InvalidFaultDomain *uint16
	Reserved           unsafe.Pointer
}

func (obj *innerFabricPlacementPolicyInvalidDomainDescription) toGoStruct() (dst *FabricPlacementPolicyInvalidDomainDescription) {
	if obj == nil {
		return
	}
	dst = &FabricPlacementPolicyInvalidDomainDescription{}
	dst.InvalidFaultDomain = utf16PtrToString(obj.InvalidFaultDomain)
	return
}

type FabricPlacementPolicyRequiredDomainDescription struct {
	RequiredFaultDomain string
}

func (obj *FabricPlacementPolicyRequiredDomainDescription) toInnerStruct() *innerFabricPlacementPolicyRequiredDomainDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPlacementPolicyRequiredDomainDescription{}
	dst.RequiredFaultDomain = utf16PtrFromString(obj.RequiredFaultDomain)
	return dst
}

type innerFabricPlacementPolicyRequiredDomainDescription struct {
	RequiredFaultDomain *uint16
	Reserved            unsafe.Pointer
}

func (obj *innerFabricPlacementPolicyRequiredDomainDescription) toGoStruct() (dst *FabricPlacementPolicyRequiredDomainDescription) {
	if obj == nil {
		return
	}
	dst = &FabricPlacementPolicyRequiredDomainDescription{}
	dst.RequiredFaultDomain = utf16PtrToString(obj.RequiredFaultDomain)
	return
}

type FabricPlacementPolicyPreferredPrimaryDomainDescription struct {
	PreferredPrimaryFaultDomain string
}

func (obj *FabricPlacementPolicyPreferredPrimaryDomainDescription) toInnerStruct() *innerFabricPlacementPolicyPreferredPrimaryDomainDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPlacementPolicyPreferredPrimaryDomainDescription{}
	dst.PreferredPrimaryFaultDomain = utf16PtrFromString(obj.PreferredPrimaryFaultDomain)
	return dst
}

type innerFabricPlacementPolicyPreferredPrimaryDomainDescription struct {
	PreferredPrimaryFaultDomain *uint16
	Reserved                    unsafe.Pointer
}

func (obj *innerFabricPlacementPolicyPreferredPrimaryDomainDescription) toGoStruct() (dst *FabricPlacementPolicyPreferredPrimaryDomainDescription) {
	if obj == nil {
		return
	}
	dst = &FabricPlacementPolicyPreferredPrimaryDomainDescription{}
	dst.PreferredPrimaryFaultDomain = utf16PtrToString(obj.PreferredPrimaryFaultDomain)
	return
}

type FabricPlacementPolicyRequiredDomainDistributionDescription struct {
}
type innerFabricPlacementPolicyRequiredDomainDistributionDescription struct {
	FabricPlacementPolicyRequiredDomainDistributionDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricPlacementPolicyRequiredDomainDistributionDescription) toGoStruct() *FabricPlacementPolicyRequiredDomainDistributionDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricPlacementPolicyRequiredDomainDistributionDescription
}
func (obj *FabricPlacementPolicyRequiredDomainDistributionDescription) toInnerStruct() *innerFabricPlacementPolicyRequiredDomainDistributionDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricPlacementPolicyRequiredDomainDistributionDescription{*obj, nil}
}

type FabricPlacementPolicyNonpartiallyPlaceServiceDescription struct {
}
type innerFabricPlacementPolicyNonpartiallyPlaceServiceDescription struct {
	FabricPlacementPolicyNonpartiallyPlaceServiceDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricPlacementPolicyNonpartiallyPlaceServiceDescription) toGoStruct() *FabricPlacementPolicyNonpartiallyPlaceServiceDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricPlacementPolicyNonpartiallyPlaceServiceDescription
}
func (obj *FabricPlacementPolicyNonpartiallyPlaceServiceDescription) toInnerStruct() *innerFabricPlacementPolicyNonpartiallyPlaceServiceDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricPlacementPolicyNonpartiallyPlaceServiceDescription{*obj, nil}
}

type FabricServicePlacementPolicyDescription struct {
	Type  FabricPlacementPolicyType
	Value interface{}
}

func (obj *FabricServicePlacementPolicyDescription) toInnerStruct() *innerFabricServicePlacementPolicyDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServicePlacementPolicyDescription{}
	dst.Type = obj.Type
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServicePlacementPolicyDescription struct {
	Type  FabricPlacementPolicyType
	Value unsafe.Pointer
}

func (obj *innerFabricServicePlacementPolicyDescription) toGoStruct() (dst *FabricServicePlacementPolicyDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServicePlacementPolicyDescription{}
	dst.Type = obj.Type
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricServicePlacementPolicyList struct {
	PolicyCount uint32
	Policies    *innerFabricServicePlacementPolicyDescription
}

func (obj *innerFabricServicePlacementPolicyList) toGoStruct() []FabricServicePlacementPolicyDescription {
	var dst []FabricServicePlacementPolicyDescription
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Policies), int(obj.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServicePartitionInformation struct {
	Kind  FabricServicePartitionKind
	Value interface{}
}

func (obj *FabricServicePartitionInformation) toInnerStruct() *innerFabricServicePartitionInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServicePartitionInformation{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServicePartitionInformation struct {
	Kind  FabricServicePartitionKind
	Value unsafe.Pointer
}

func (obj *innerFabricServicePartitionInformation) toGoStruct() (dst *FabricServicePartitionInformation) {
	if obj == nil {
		return
	}
	dst = &FabricServicePartitionInformation{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricSingletonPartitionInformation struct {
	Id uuid.UUID
}
type innerFabricSingletonPartitionInformation struct {
	FabricSingletonPartitionInformation
	Reserved unsafe.Pointer
}

func (obj *innerFabricSingletonPartitionInformation) toGoStruct() *FabricSingletonPartitionInformation {
	if obj == nil {
		return nil
	}
	return &obj.FabricSingletonPartitionInformation
}
func (obj *FabricSingletonPartitionInformation) toInnerStruct() *innerFabricSingletonPartitionInformation {
	if obj == nil {
		return nil
	}
	return &innerFabricSingletonPartitionInformation{*obj, nil}
}

type FabricInt64RangePartitionInformation struct {
	Id      uuid.UUID
	LowKey  int64
	HighKey int64
}
type innerFabricInt64RangePartitionInformation struct {
	FabricInt64RangePartitionInformation
	Reserved unsafe.Pointer
}

func (obj *innerFabricInt64RangePartitionInformation) toGoStruct() *FabricInt64RangePartitionInformation {
	if obj == nil {
		return nil
	}
	return &obj.FabricInt64RangePartitionInformation
}
func (obj *FabricInt64RangePartitionInformation) toInnerStruct() *innerFabricInt64RangePartitionInformation {
	if obj == nil {
		return nil
	}
	return &innerFabricInt64RangePartitionInformation{*obj, nil}
}

type FabricNamedPartitionInformation struct {
	Id   uuid.UUID
	Name string
}

func (obj *FabricNamedPartitionInformation) toInnerStruct() *innerFabricNamedPartitionInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNamedPartitionInformation{}
	dst.Id = obj.Id
	dst.Name = utf16PtrFromString(obj.Name)
	return dst
}

type innerFabricNamedPartitionInformation struct {
	Id       uuid.UUID
	Name     *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricNamedPartitionInformation) toGoStruct() (dst *FabricNamedPartitionInformation) {
	if obj == nil {
		return
	}
	dst = &FabricNamedPartitionInformation{}
	dst.Id = obj.Id
	dst.Name = utf16PtrToString(obj.Name)
	return
}

type FabricCodePackageEntryPointDescription struct {
	Kind  FabricCodePackageEntryPointKind
	Value interface{}
}

func (obj *FabricCodePackageEntryPointDescription) toInnerStruct() *innerFabricCodePackageEntryPointDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCodePackageEntryPointDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricCodePackageEntryPointDescription struct {
	Kind  FabricCodePackageEntryPointKind
	Value unsafe.Pointer
}

func (obj *innerFabricCodePackageEntryPointDescription) toGoStruct() (dst *FabricCodePackageEntryPointDescription) {
	if obj == nil {
		return
	}
	dst = &FabricCodePackageEntryPointDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricContainerhostEntryPointDescription struct {
	ImageName  string
	Commands   string
	EntryPoint string
}

func (obj *FabricContainerhostEntryPointDescription) toInnerStruct() *innerFabricContainerhostEntryPointDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricContainerhostEntryPointDescription{}
	dst.ImageName = utf16PtrFromString(obj.ImageName)
	dst.Commands = utf16PtrFromString(obj.Commands)
	dst.EntryPoint = utf16PtrFromString(obj.EntryPoint)
	return dst
}

type innerFabricContainerhostEntryPointDescription struct {
	ImageName  *uint16
	Commands   *uint16
	EntryPoint *uint16
	Reserved   unsafe.Pointer
}

func (obj *innerFabricContainerhostEntryPointDescription) toGoStruct() (dst *FabricContainerhostEntryPointDescription) {
	if obj == nil {
		return
	}
	dst = &FabricContainerhostEntryPointDescription{}
	dst.ImageName = utf16PtrToString(obj.ImageName)
	dst.Commands = utf16PtrToString(obj.Commands)
	dst.EntryPoint = utf16PtrToString(obj.EntryPoint)
	return
}

type FabricExehostEntryPointDescription struct {
	Program       string
	Arguments     string
	WorkingFolder FabricErrorxehostWorkingFolder
}

func (obj *FabricExehostEntryPointDescription) toInnerStruct() *innerFabricExehostEntryPointDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricExehostEntryPointDescription{}
	dst.Program = utf16PtrFromString(obj.Program)
	dst.Arguments = utf16PtrFromString(obj.Arguments)
	dst.WorkingFolder = obj.WorkingFolder
	return dst
}

type innerFabricExehostEntryPointDescription struct {
	Program       *uint16
	Arguments     *uint16
	WorkingFolder FabricErrorxehostWorkingFolder
	Reserved      unsafe.Pointer
}

func (obj *innerFabricExehostEntryPointDescription) toGoStruct() (dst *FabricExehostEntryPointDescription) {
	if obj == nil {
		return
	}
	dst = &FabricExehostEntryPointDescription{}
	dst.Program = utf16PtrToString(obj.Program)
	dst.Arguments = utf16PtrToString(obj.Arguments)
	dst.WorkingFolder = obj.WorkingFolder
	return
}

type FabricExehostEntryPointDescriptionEx1 struct {
	PeriodicIntervalInSeconds            uint32
	ConsoleRedirectionEnabled            bool
	ConsoleRedirectionFileRetentionCount uint32
	ConsoleRedirectionFileMaxSizeInKb    uint32
}
type innerFabricExehostEntryPointDescriptionEx1 struct {
	FabricExehostEntryPointDescriptionEx1
	Reserved unsafe.Pointer
}

func (obj *innerFabricExehostEntryPointDescriptionEx1) toGoStruct() *FabricExehostEntryPointDescriptionEx1 {
	if obj == nil {
		return nil
	}
	return &obj.FabricExehostEntryPointDescriptionEx1
}
func (obj *FabricExehostEntryPointDescriptionEx1) toInnerStruct() *innerFabricExehostEntryPointDescriptionEx1 {
	if obj == nil {
		return nil
	}
	return &innerFabricExehostEntryPointDescriptionEx1{*obj, nil}
}

type FabricExehostEntryPointDescriptionEx2 struct {
	IsExternalExecutable bool
}
type innerFabricExehostEntryPointDescriptionEx2 struct {
	FabricExehostEntryPointDescriptionEx2
	Reserved unsafe.Pointer
}

func (obj *innerFabricExehostEntryPointDescriptionEx2) toGoStruct() *FabricExehostEntryPointDescriptionEx2 {
	if obj == nil {
		return nil
	}
	return &obj.FabricExehostEntryPointDescriptionEx2
}
func (obj *FabricExehostEntryPointDescriptionEx2) toInnerStruct() *innerFabricExehostEntryPointDescriptionEx2 {
	if obj == nil {
		return nil
	}
	return &innerFabricExehostEntryPointDescriptionEx2{*obj, nil}
}

type FabricDllhostHostedDllDescription struct {
	Kind  FabricDllhostHostedDllKind
	Value interface{}
}

func (obj *FabricDllhostHostedDllDescription) toInnerStruct() *innerFabricDllhostHostedDllDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDllhostHostedDllDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricDllhostHostedDllDescription struct {
	Kind  FabricDllhostHostedDllKind
	Value unsafe.Pointer
}

func (obj *innerFabricDllhostHostedDllDescription) toGoStruct() (dst *FabricDllhostHostedDllDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDllhostHostedDllDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricDllhostHostedUnmanagedDllDescription struct {
	DllName string
}

func (obj *FabricDllhostHostedUnmanagedDllDescription) toInnerStruct() *innerFabricDllhostHostedUnmanagedDllDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDllhostHostedUnmanagedDllDescription{}
	dst.DllName = utf16PtrFromString(obj.DllName)
	return dst
}

type innerFabricDllhostHostedUnmanagedDllDescription struct {
	DllName  *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricDllhostHostedUnmanagedDllDescription) toGoStruct() (dst *FabricDllhostHostedUnmanagedDllDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDllhostHostedUnmanagedDllDescription{}
	dst.DllName = utf16PtrToString(obj.DllName)
	return
}

type FabricDllhostHostedManagedDllDescription struct {
	AssemblyName string
}

func (obj *FabricDllhostHostedManagedDllDescription) toInnerStruct() *innerFabricDllhostHostedManagedDllDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDllhostHostedManagedDllDescription{}
	dst.AssemblyName = utf16PtrFromString(obj.AssemblyName)
	return dst
}

type innerFabricDllhostHostedManagedDllDescription struct {
	AssemblyName *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricDllhostHostedManagedDllDescription) toGoStruct() (dst *FabricDllhostHostedManagedDllDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDllhostHostedManagedDllDescription{}
	dst.AssemblyName = utf16PtrToString(obj.AssemblyName)
	return
}

type innerFabricDllhostHostedDllDescriptionList struct {
	Count uint32
	Items *innerFabricDllhostHostedDllDescription
}

func (obj *innerFabricDllhostHostedDllDescriptionList) toGoStruct() []FabricDllhostHostedDllDescription {
	var dst []FabricDllhostHostedDllDescription
	{
		var innerlst []innerFabricDllhostHostedDllDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDllhostHostedDllDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDllhostEntryPointDescription struct {
	IsolationPolicyType FabricDllhostIsolationPolicy
	HostedDlls          []FabricDllhostHostedDllDescription
}

func (obj *FabricDllhostEntryPointDescription) toInnerStruct() *innerFabricDllhostEntryPointDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDllhostEntryPointDescription{}
	dst.IsolationPolicyType = obj.IsolationPolicyType
	lst_1 := &innerFabricDllhostHostedDllDescriptionList{}
	{

		var tmp []innerFabricDllhostHostedDllDescription

		for _, item := range obj.HostedDlls {
			var tmpitem innerFabricDllhostHostedDllDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_1.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_1.Items = &tmp[0]
		}

	}
	dst.HostedDlls = lst_1
	return dst
}

type innerFabricDllhostEntryPointDescription struct {
	IsolationPolicyType FabricDllhostIsolationPolicy
	HostedDlls          *innerFabricDllhostHostedDllDescriptionList
	Reserved            unsafe.Pointer
}

func (obj *innerFabricDllhostEntryPointDescription) toGoStruct() (dst *FabricDllhostEntryPointDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDllhostEntryPointDescription{}
	dst.IsolationPolicyType = obj.IsolationPolicyType
	{
		var innerlst []innerFabricDllhostHostedDllDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HostedDlls.Items), int(obj.HostedDlls.Count))

		for _, item := range innerlst {
			var tmpitem FabricDllhostHostedDllDescription

			tmpitem = *item.toGoStruct()

			dst.HostedDlls = append(dst.HostedDlls, tmpitem)
		}

	}
	return
}

type FabricCodePackageDescription struct {
	Name                   string
	Version                string
	ServiceManifestName    string
	ServiceManifestVersion string
	IsShared               bool
	SetupEntryPoint        *FabricExehostEntryPointDescription
	EntryPoint             *FabricCodePackageEntryPointDescription
}

func (obj *FabricCodePackageDescription) toInnerStruct() *innerFabricCodePackageDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCodePackageDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Version = utf16PtrFromString(obj.Version)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.IsShared = obj.IsShared
	dst.SetupEntryPoint = obj.SetupEntryPoint.toInnerStruct()
	dst.EntryPoint = obj.EntryPoint.toInnerStruct()
	return dst
}

type innerFabricCodePackageDescription struct {
	Name                   *uint16
	Version                *uint16
	ServiceManifestName    *uint16
	ServiceManifestVersion *uint16
	IsShared               bool
	SetupEntryPoint        *innerFabricExehostEntryPointDescription
	EntryPoint             *innerFabricCodePackageEntryPointDescription
	Reserved               unsafe.Pointer
}

func (obj *innerFabricCodePackageDescription) toGoStruct() (dst *FabricCodePackageDescription) {
	if obj == nil {
		return
	}
	dst = &FabricCodePackageDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Version = utf16PtrToString(obj.Version)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.IsShared = obj.IsShared
	dst.SetupEntryPoint = obj.SetupEntryPoint.toGoStruct()
	dst.EntryPoint = obj.EntryPoint.toGoStruct()
	return
}

type FabricRunasPolicyDescription struct {
	UserName string
}

func (obj *FabricRunasPolicyDescription) toInnerStruct() *innerFabricRunasPolicyDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRunasPolicyDescription{}
	dst.UserName = utf16PtrFromString(obj.UserName)
	return dst
}

type innerFabricRunasPolicyDescription struct {
	UserName *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricRunasPolicyDescription) toGoStruct() (dst *FabricRunasPolicyDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRunasPolicyDescription{}
	dst.UserName = utf16PtrToString(obj.UserName)
	return
}

type FabricConfigurationPackageDescription struct {
	Name                   string
	Version                string
	ServiceManifestName    string
	ServiceManifestVersion string
}

func (obj *FabricConfigurationPackageDescription) toInnerStruct() *innerFabricConfigurationPackageDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricConfigurationPackageDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Version = utf16PtrFromString(obj.Version)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	return dst
}

type innerFabricConfigurationPackageDescription struct {
	Name                   *uint16
	Version                *uint16
	ServiceManifestName    *uint16
	ServiceManifestVersion *uint16
	Reserved               unsafe.Pointer
}

func (obj *innerFabricConfigurationPackageDescription) toGoStruct() (dst *FabricConfigurationPackageDescription) {
	if obj == nil {
		return
	}
	dst = &FabricConfigurationPackageDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Version = utf16PtrToString(obj.Version)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	return
}

type FabricDataPackageDescription struct {
	Name                   string
	Version                string
	ServiceManifestName    string
	ServiceManifestVersion string
}

func (obj *FabricDataPackageDescription) toInnerStruct() *innerFabricDataPackageDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDataPackageDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Version = utf16PtrFromString(obj.Version)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	return dst
}

type innerFabricDataPackageDescription struct {
	Name                   *uint16
	Version                *uint16
	ServiceManifestName    *uint16
	ServiceManifestVersion *uint16
	Reserved               unsafe.Pointer
}

func (obj *innerFabricDataPackageDescription) toGoStruct() (dst *FabricDataPackageDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDataPackageDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Version = utf16PtrToString(obj.Version)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	return
}

type FabricServiceTypeDescription struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricServiceTypeDescription) toInnerStruct() *innerFabricServiceTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceTypeDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServiceTypeDescription struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricServiceTypeDescription) toGoStruct() (dst *FabricServiceTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceTypeDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricServiceTypeDescriptionList struct {
	Count uint32
	Items *innerFabricServiceTypeDescription
}

func (obj *innerFabricServiceTypeDescriptionList) toGoStruct() []FabricServiceTypeDescription {
	var dst []FabricServiceTypeDescription
	{
		var innerlst []innerFabricServiceTypeDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceTypeDescriptionExtension struct {
	Name  string
	Value string
}

func (obj *FabricServiceTypeDescriptionExtension) toInnerStruct() *innerFabricServiceTypeDescriptionExtension {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceTypeDescriptionExtension{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Value = utf16PtrFromString(obj.Value)
	return dst
}

type innerFabricServiceTypeDescriptionExtension struct {
	Name     *uint16
	Value    *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceTypeDescriptionExtension) toGoStruct() (dst *FabricServiceTypeDescriptionExtension) {
	if obj == nil {
		return
	}
	dst = &FabricServiceTypeDescriptionExtension{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Value = utf16PtrToString(obj.Value)
	return
}

type innerFabricServiceTypeDescriptionExtensionList struct {
	Count uint32
	Items *innerFabricServiceTypeDescriptionExtension
}

func (obj *innerFabricServiceTypeDescriptionExtensionList) toGoStruct() []FabricServiceTypeDescriptionExtension {
	var dst []FabricServiceTypeDescriptionExtension
	{
		var innerlst []innerFabricServiceTypeDescriptionExtension
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeDescriptionExtension

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricStatelessServiceTypeDescription struct {
	ServiceTypeName      string
	PlacementConstraints string
	LoadMetrics          []FabricServiceLoadMetricDescription
	Extensions           []FabricServiceTypeDescriptionExtension
	UseImplicitHost      bool
	PolicyList           []FabricServicePlacementPolicyDescription
}

func (obj *FabricStatelessServiceTypeDescription) toInnerStruct() *innerFabricStatelessServiceTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceTypeDescription{}
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.PlacementConstraints = utf16PtrFromString(obj.PlacementConstraints)
	lst_2 := &innerFabricServiceLoadMetricDescriptionList{}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.LoadMetrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_2.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_2.Items = &tmp[0]
		}

	}
	dst.LoadMetrics = lst_2
	lst_3 := &innerFabricServiceTypeDescriptionExtensionList{}
	{

		var tmp []innerFabricServiceTypeDescriptionExtension

		for _, item := range obj.Extensions {
			var tmpitem innerFabricServiceTypeDescriptionExtension

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_3.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_3.Items = &tmp[0]
		}

	}
	dst.Extensions = lst_3
	dst.UseImplicitHost = obj.UseImplicitHost
	ex0 := dst
	ex1 := &innerFabricStatelessServiceTypeDescriptionEx1{}
	lst_4 := &innerFabricServicePlacementPolicyList{}
	{

		var tmp []innerFabricServicePlacementPolicyDescription

		for _, item := range obj.PolicyList {
			var tmpitem innerFabricServicePlacementPolicyDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_4.PolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_4.Policies = &tmp[0]
		}

	}
	ex1.PolicyList = lst_4
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatelessServiceTypeDescription struct {
	ServiceTypeName      *uint16
	PlacementConstraints *uint16
	LoadMetrics          *innerFabricServiceLoadMetricDescriptionList
	Extensions           *innerFabricServiceTypeDescriptionExtensionList
	UseImplicitHost      bool
	Reserved             unsafe.Pointer
}
type innerFabricStatelessServiceTypeDescriptionEx1 struct {
	PolicyList *innerFabricServicePlacementPolicyList
	Reserved   unsafe.Pointer
}

func (obj *innerFabricStatelessServiceTypeDescription) toGoStruct() (dst *FabricStatelessServiceTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceTypeDescription{}
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.PlacementConstraints = utf16PtrToString(obj.PlacementConstraints)
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.LoadMetrics.Items), int(obj.LoadMetrics.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.LoadMetrics = append(dst.LoadMetrics, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceTypeDescriptionExtension
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Extensions.Items), int(obj.Extensions.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeDescriptionExtension

			tmpitem = *item.toGoStruct()

			dst.Extensions = append(dst.Extensions, tmpitem)
		}

	}
	dst.UseImplicitHost = obj.UseImplicitHost
	ex0 := obj
	ex1 := (*innerFabricStatelessServiceTypeDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.PolicyList.Policies), int(ex1.PolicyList.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst.PolicyList = append(dst.PolicyList, tmpitem)
		}

	}
	return
}

type FabricStatefulServiceTypeDescription struct {
	ServiceTypeName      string
	PlacementConstraints string
	LoadMetrics          []FabricServiceLoadMetricDescription
	Extensions           []FabricServiceTypeDescriptionExtension
	HasPersistedState    bool
	PolicyList           []FabricServicePlacementPolicyDescription
}

func (obj *FabricStatefulServiceTypeDescription) toInnerStruct() *innerFabricStatefulServiceTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceTypeDescription{}
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.PlacementConstraints = utf16PtrFromString(obj.PlacementConstraints)
	lst_5 := &innerFabricServiceLoadMetricDescriptionList{}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.LoadMetrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_5.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_5.Items = &tmp[0]
		}

	}
	dst.LoadMetrics = lst_5
	lst_6 := &innerFabricServiceTypeDescriptionExtensionList{}
	{

		var tmp []innerFabricServiceTypeDescriptionExtension

		for _, item := range obj.Extensions {
			var tmpitem innerFabricServiceTypeDescriptionExtension

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_6.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_6.Items = &tmp[0]
		}

	}
	dst.Extensions = lst_6
	dst.HasPersistedState = obj.HasPersistedState
	ex0 := dst
	ex1 := &innerFabricStatefulServiceTypeDescriptionEx1{}
	lst_7 := &innerFabricServicePlacementPolicyList{}
	{

		var tmp []innerFabricServicePlacementPolicyDescription

		for _, item := range obj.PolicyList {
			var tmpitem innerFabricServicePlacementPolicyDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_7.PolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_7.Policies = &tmp[0]
		}

	}
	ex1.PolicyList = lst_7
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatefulServiceTypeDescription struct {
	ServiceTypeName      *uint16
	PlacementConstraints *uint16
	LoadMetrics          *innerFabricServiceLoadMetricDescriptionList
	Extensions           *innerFabricServiceTypeDescriptionExtensionList
	HasPersistedState    bool
	Reserved             unsafe.Pointer
}
type innerFabricStatefulServiceTypeDescriptionEx1 struct {
	PolicyList *innerFabricServicePlacementPolicyList
	Reserved   unsafe.Pointer
}

func (obj *innerFabricStatefulServiceTypeDescription) toGoStruct() (dst *FabricStatefulServiceTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceTypeDescription{}
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.PlacementConstraints = utf16PtrToString(obj.PlacementConstraints)
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.LoadMetrics.Items), int(obj.LoadMetrics.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.LoadMetrics = append(dst.LoadMetrics, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceTypeDescriptionExtension
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Extensions.Items), int(obj.Extensions.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeDescriptionExtension

			tmpitem = *item.toGoStruct()

			dst.Extensions = append(dst.Extensions, tmpitem)
		}

	}
	dst.HasPersistedState = obj.HasPersistedState
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceTypeDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.PolicyList.Policies), int(ex1.PolicyList.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst.PolicyList = append(dst.PolicyList, tmpitem)
		}

	}
	return
}

type FabricServiceGroupTypeMemberDescription struct {
	ServiceTypeName string
	LoadMetrics     []FabricServiceLoadMetricDescription
}

func (obj *FabricServiceGroupTypeMemberDescription) toInnerStruct() *innerFabricServiceGroupTypeMemberDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupTypeMemberDescription{}
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	lst_8 := &innerFabricServiceLoadMetricDescriptionList{}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.LoadMetrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_8.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_8.Items = &tmp[0]
		}

	}
	dst.LoadMetrics = lst_8
	return dst
}

type innerFabricServiceGroupTypeMemberDescription struct {
	ServiceTypeName *uint16
	LoadMetrics     *innerFabricServiceLoadMetricDescriptionList
	Reserved        unsafe.Pointer
}

func (obj *innerFabricServiceGroupTypeMemberDescription) toGoStruct() (dst *FabricServiceGroupTypeMemberDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupTypeMemberDescription{}
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.LoadMetrics.Items), int(obj.LoadMetrics.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.LoadMetrics = append(dst.LoadMetrics, tmpitem)
		}

	}
	return
}

type innerFabricServiceGroupTypeMemberDescriptionList struct {
	Count uint32
	Items *innerFabricServiceGroupTypeMemberDescription
}

func (obj *innerFabricServiceGroupTypeMemberDescriptionList) toGoStruct() []FabricServiceGroupTypeMemberDescription {
	var dst []FabricServiceGroupTypeMemberDescription
	{
		var innerlst []innerFabricServiceGroupTypeMemberDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupTypeMemberDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceGroupTypeDescription struct {
	Description        *FabricServiceTypeDescription
	Members            []FabricServiceGroupTypeMemberDescription
	UseImplicitFactory bool
}

func (obj *FabricServiceGroupTypeDescription) toInnerStruct() *innerFabricServiceGroupTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupTypeDescription{}
	dst.Description = obj.Description.toInnerStruct()
	lst_9 := &innerFabricServiceGroupTypeMemberDescriptionList{}
	{

		var tmp []innerFabricServiceGroupTypeMemberDescription

		for _, item := range obj.Members {
			var tmpitem innerFabricServiceGroupTypeMemberDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_9.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_9.Items = &tmp[0]
		}

	}
	dst.Members = lst_9
	dst.UseImplicitFactory = obj.UseImplicitFactory
	return dst
}

type innerFabricServiceGroupTypeDescription struct {
	Description        *innerFabricServiceTypeDescription
	Members            *innerFabricServiceGroupTypeMemberDescriptionList
	UseImplicitFactory bool
	Reserved           unsafe.Pointer
}

func (obj *innerFabricServiceGroupTypeDescription) toGoStruct() (dst *FabricServiceGroupTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupTypeDescription{}
	dst.Description = obj.Description.toGoStruct()
	{
		var innerlst []innerFabricServiceGroupTypeMemberDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Members.Items), int(obj.Members.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupTypeMemberDescription

			tmpitem = *item.toGoStruct()

			dst.Members = append(dst.Members, tmpitem)
		}

	}
	dst.UseImplicitFactory = obj.UseImplicitFactory
	return
}

type innerFabricServiceGroupTypeDescriptionList struct {
	Count uint32
	Items *innerFabricServiceGroupTypeDescription
}

func (obj *innerFabricServiceGroupTypeDescriptionList) toGoStruct() []FabricServiceGroupTypeDescription {
	var dst []FabricServiceGroupTypeDescription
	{
		var innerlst []innerFabricServiceGroupTypeDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupTypeDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricEndpointResourceDescription struct {
	Name            string
	Protocol        string
	Type            string
	Port            uint32
	CertificateName string
	UriScheme       string
	PathSuffix      string
	CodePackageName string
	IpAddressOrFqdn string
}

func (obj *FabricEndpointResourceDescription) toInnerStruct() *innerFabricEndpointResourceDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricEndpointResourceDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Protocol = utf16PtrFromString(obj.Protocol)
	dst.Type = utf16PtrFromString(obj.Type)
	dst.Port = obj.Port
	dst.CertificateName = utf16PtrFromString(obj.CertificateName)
	ex0 := dst
	ex1 := &innerFabricEndpointResourceDescriptionEx1{}
	ex1.UriScheme = utf16PtrFromString(obj.UriScheme)
	ex1.PathSuffix = utf16PtrFromString(obj.PathSuffix)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricEndpointResourceDescriptionEx2{}
	ex2.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	ex2.IpAddressOrFqdn = utf16PtrFromString(obj.IpAddressOrFqdn)
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricEndpointResourceDescription struct {
	Name            *uint16
	Protocol        *uint16
	Type            *uint16
	Port            uint32
	CertificateName *uint16
	Reserved        unsafe.Pointer
}
type innerFabricEndpointResourceDescriptionEx1 struct {
	UriScheme  *uint16
	PathSuffix *uint16
	Reserved   unsafe.Pointer
}
type innerFabricEndpointResourceDescriptionEx2 struct {
	CodePackageName *uint16
	IpAddressOrFqdn *uint16
	Reserved        unsafe.Pointer
}

func (obj *innerFabricEndpointResourceDescription) toGoStruct() (dst *FabricEndpointResourceDescription) {
	if obj == nil {
		return
	}
	dst = &FabricEndpointResourceDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Protocol = utf16PtrToString(obj.Protocol)
	dst.Type = utf16PtrToString(obj.Type)
	dst.Port = obj.Port
	dst.CertificateName = utf16PtrToString(obj.CertificateName)
	ex0 := obj
	ex1 := (*innerFabricEndpointResourceDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.UriScheme = utf16PtrToString(ex1.UriScheme)
	dst.PathSuffix = utf16PtrToString(ex1.PathSuffix)
	ex2 := (*innerFabricEndpointResourceDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.CodePackageName = utf16PtrToString(ex2.CodePackageName)
	dst.IpAddressOrFqdn = utf16PtrToString(ex2.IpAddressOrFqdn)
	return
}

type innerFabricEndpointResourceDescriptionList struct {
	Count uint32
	Items *innerFabricEndpointResourceDescription
}

func (obj *innerFabricEndpointResourceDescriptionList) toGoStruct() []FabricEndpointResourceDescription {
	var dst []FabricEndpointResourceDescription
	{
		var innerlst []innerFabricEndpointResourceDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricEndpointResourceDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type innerFabricCodePackageDescriptionList struct {
	Count uint32
	Items *innerFabricCodePackageDescription
}

func (obj *innerFabricCodePackageDescriptionList) toGoStruct() []FabricCodePackageDescription {
	var dst []FabricCodePackageDescription
	{
		var innerlst []innerFabricCodePackageDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricCodePackageDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type innerFabricConfigurationPackageDescriptionList struct {
	Count uint32
	Items *innerFabricConfigurationPackageDescription
}

func (obj *innerFabricConfigurationPackageDescriptionList) toGoStruct() []FabricConfigurationPackageDescription {
	var dst []FabricConfigurationPackageDescription
	{
		var innerlst []innerFabricConfigurationPackageDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricConfigurationPackageDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type innerFabricDataPackageDescriptionList struct {
	Count uint32
	Items *innerFabricDataPackageDescription
}

func (obj *innerFabricDataPackageDescriptionList) toGoStruct() []FabricDataPackageDescription {
	var dst []FabricDataPackageDescription
	{
		var innerlst []innerFabricDataPackageDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDataPackageDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricConfigurationParameter struct {
	Name         string
	Value        string
	MustOverride bool
	IsEncrypted  bool
	Type         string
}

func (obj *FabricConfigurationParameter) toInnerStruct() *innerFabricConfigurationParameter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricConfigurationParameter{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Value = utf16PtrFromString(obj.Value)
	dst.MustOverride = obj.MustOverride
	dst.IsEncrypted = obj.IsEncrypted
	ex0 := dst
	ex1 := &innerFabricConfigurationParameterEx1{}
	ex1.Type = utf16PtrFromString(obj.Type)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricConfigurationParameter struct {
	Name         *uint16
	Value        *uint16
	MustOverride bool
	IsEncrypted  bool
	Reserved     unsafe.Pointer
}
type innerFabricConfigurationParameterEx1 struct {
	Type     *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricConfigurationParameter) toGoStruct() (dst *FabricConfigurationParameter) {
	if obj == nil {
		return
	}
	dst = &FabricConfigurationParameter{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Value = utf16PtrToString(obj.Value)
	dst.MustOverride = obj.MustOverride
	dst.IsEncrypted = obj.IsEncrypted
	ex0 := obj
	ex1 := (*innerFabricConfigurationParameterEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.Type = utf16PtrToString(ex1.Type)
	return
}

type innerFabricConfigurationParameterList struct {
	Count uint32
	Items *innerFabricConfigurationParameter
}

func (obj *innerFabricConfigurationParameterList) toGoStruct() []FabricConfigurationParameter {
	var dst []FabricConfigurationParameter
	{
		var innerlst []innerFabricConfigurationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricConfigurationParameter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricConfigurationSection struct {
	Name       string
	Parameters []FabricConfigurationParameter
}

func (obj *FabricConfigurationSection) toInnerStruct() *innerFabricConfigurationSection {
	if obj == nil {
		return nil
	}
	dst := &innerFabricConfigurationSection{}
	dst.Name = utf16PtrFromString(obj.Name)
	lst_10 := &innerFabricConfigurationParameterList{}
	{

		var tmp []innerFabricConfigurationParameter

		for _, item := range obj.Parameters {
			var tmpitem innerFabricConfigurationParameter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_10.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_10.Items = &tmp[0]
		}

	}
	dst.Parameters = lst_10
	return dst
}

type innerFabricConfigurationSection struct {
	Name       *uint16
	Parameters *innerFabricConfigurationParameterList
	Reserved   unsafe.Pointer
}

func (obj *innerFabricConfigurationSection) toGoStruct() (dst *FabricConfigurationSection) {
	if obj == nil {
		return
	}
	dst = &FabricConfigurationSection{}
	dst.Name = utf16PtrToString(obj.Name)
	{
		var innerlst []innerFabricConfigurationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Parameters.Items), int(obj.Parameters.Count))

		for _, item := range innerlst {
			var tmpitem FabricConfigurationParameter

			tmpitem = *item.toGoStruct()

			dst.Parameters = append(dst.Parameters, tmpitem)
		}

	}
	return
}

type innerFabricConfigurationSectionList struct {
	Count uint32
	Items *innerFabricConfigurationSection
}

func (obj *innerFabricConfigurationSectionList) toGoStruct() []FabricConfigurationSection {
	var dst []FabricConfigurationSection
	{
		var innerlst []innerFabricConfigurationSection
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricConfigurationSection

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricConfigurationSettings struct {
	Sections []FabricConfigurationSection
}

func (obj *FabricConfigurationSettings) toInnerStruct() *innerFabricConfigurationSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricConfigurationSettings{}
	lst_11 := &innerFabricConfigurationSectionList{}
	{

		var tmp []innerFabricConfigurationSection

		for _, item := range obj.Sections {
			var tmpitem innerFabricConfigurationSection

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_11.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_11.Items = &tmp[0]
		}

	}
	dst.Sections = lst_11
	return dst
}

type innerFabricConfigurationSettings struct {
	Sections *innerFabricConfigurationSectionList
	Reserved unsafe.Pointer
}

func (obj *innerFabricConfigurationSettings) toGoStruct() (dst *FabricConfigurationSettings) {
	if obj == nil {
		return
	}
	dst = &FabricConfigurationSettings{}
	{
		var innerlst []innerFabricConfigurationSection
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Sections.Items), int(obj.Sections.Count))

		for _, item := range innerlst {
			var tmpitem FabricConfigurationSection

			tmpitem = *item.toGoStruct()

			dst.Sections = append(dst.Sections, tmpitem)
		}

	}
	return
}

type innerFabricStringList struct {
	Count uint32
	Items **uint16
}

func (obj *innerFabricStringList) toGoStruct() []string {
	var dst []string
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricEpoch struct {
	DataLossNumber      int64
	ConfigurationNumber int64
}
type innerFabricEpoch struct {
	FabricEpoch
	Reserved unsafe.Pointer
}

func (obj *innerFabricEpoch) toGoStruct() *FabricEpoch {
	if obj == nil {
		return nil
	}
	return &obj.FabricEpoch
}
func (obj *FabricEpoch) toInnerStruct() *innerFabricEpoch {
	if obj == nil {
		return nil
	}
	return &innerFabricEpoch{*obj, nil}
}

type FabricOperationMetadata struct {
	Type           FabricOperationType
	SequenceNumber int64
	AtomicGroupId  int64
}
type innerFabricOperationMetadata struct {
	FabricOperationMetadata
	Reserved unsafe.Pointer
}

func (obj *innerFabricOperationMetadata) toGoStruct() *FabricOperationMetadata {
	if obj == nil {
		return nil
	}
	return &obj.FabricOperationMetadata
}
func (obj *FabricOperationMetadata) toInnerStruct() *innerFabricOperationMetadata {
	if obj == nil {
		return nil
	}
	return &innerFabricOperationMetadata{*obj, nil}
}

type FabricReplicaInformation struct {
	Id                int64
	Role              FabricReplicaRole
	Status            FabricReplicaStatus
	ReplicatorAddress string
	CurrentProgress   int64
	CatchUpCapability int64
	MustCatchup       bool
}

func (obj *FabricReplicaInformation) toInnerStruct() *innerFabricReplicaInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicaInformation{}
	dst.Id = obj.Id
	dst.Role = obj.Role
	dst.Status = obj.Status
	dst.ReplicatorAddress = utf16PtrFromString(obj.ReplicatorAddress)
	dst.CurrentProgress = obj.CurrentProgress
	dst.CatchUpCapability = obj.CatchUpCapability
	ex0 := dst
	ex1 := &innerFabricReplicaInformationEx1{}
	ex1.MustCatchup = obj.MustCatchup
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricReplicaInformation struct {
	Id                int64
	Role              FabricReplicaRole
	Status            FabricReplicaStatus
	ReplicatorAddress *uint16
	CurrentProgress   int64
	CatchUpCapability int64
	Reserved          unsafe.Pointer
}
type innerFabricReplicaInformationEx1 struct {
	MustCatchup bool
	Reserved    unsafe.Pointer
}

func (obj *innerFabricReplicaInformation) toGoStruct() (dst *FabricReplicaInformation) {
	if obj == nil {
		return
	}
	dst = &FabricReplicaInformation{}
	dst.Id = obj.Id
	dst.Role = obj.Role
	dst.Status = obj.Status
	dst.ReplicatorAddress = utf16PtrToString(obj.ReplicatorAddress)
	dst.CurrentProgress = obj.CurrentProgress
	dst.CatchUpCapability = obj.CatchUpCapability
	ex0 := obj
	ex1 := (*innerFabricReplicaInformationEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.MustCatchup = ex1.MustCatchup
	return
}

type FabricReplicaSetConfiguration struct {
	Replicas    []FabricReplicaInformation
	WriteQuorum uint32
}
type innerFabricReplicaSetConfiguration struct {
	FabricReplicaSetConfiguration
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaSetConfiguration) toGoStruct() *FabricReplicaSetConfiguration {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicaSetConfiguration
}
func (obj *FabricReplicaSetConfiguration) toInnerStruct() *innerFabricReplicaSetConfiguration {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicaSetConfiguration{*obj, nil}
}

type FabricLoadMetric struct {
	Name  string
	Value uint32
}

func (obj *FabricLoadMetric) toInnerStruct() *innerFabricLoadMetric {
	if obj == nil {
		return nil
	}
	dst := &innerFabricLoadMetric{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Value = obj.Value
	return dst
}

type innerFabricLoadMetric struct {
	Name     *uint16
	Value    uint32
	Reserved unsafe.Pointer
}

func (obj *innerFabricLoadMetric) toGoStruct() (dst *FabricLoadMetric) {
	if obj == nil {
		return
	}
	dst = &FabricLoadMetric{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Value = obj.Value
	return
}

type FabricSecurityCredentials struct {
	Kind  FabricSecurityCredentialKind
	Value interface{}
}

func (obj *FabricSecurityCredentials) toInnerStruct() *innerFabricSecurityCredentials {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSecurityCredentials{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricSecurityCredentials struct {
	Kind  FabricSecurityCredentialKind
	Value unsafe.Pointer
}

func (obj *innerFabricSecurityCredentials) toGoStruct() (dst *FabricSecurityCredentials) {
	if obj == nil {
		return
	}
	dst = &FabricSecurityCredentials{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricReplicatorSettings struct {
	Flags                                           uint32
	RetryIntervalMilliseconds                       uint32
	BatchAcknowledgementIntervalMilliseconds        uint32
	ReplicatorAddress                               string
	RequireServiceAck                               bool
	InitialReplicationQueueSize                     uint32
	MaxReplicationQueueSize                         uint32
	InitialCopyQueueSize                            uint32
	MaxCopyQueueSize                                uint32
	SecurityCredentials                             *FabricSecurityCredentials
	MaxReplicationQueueMemorySize                   uint32
	SecondaryClearAcknowledgedOperations            bool
	MaxReplicationMessageSize                       uint32
	UseStreamFaultsAndEndOfStreamOperationAck       bool
	InitialPrimaryReplicationQueueSize              uint32
	MaxPrimaryReplicationQueueSize                  uint32
	MaxPrimaryReplicationQueueMemorySize            uint32
	InitialSecondaryReplicationQueueSize            uint32
	MaxSecondaryReplicationQueueSize                uint32
	MaxSecondaryReplicationQueueMemorySize          uint32
	PrimaryWaitForPendingQuorumsTimeoutMilliseconds uint32
	ReplicatorListenAddress                         string
	ReplicatorPublishAddress                        string
}

func (obj *FabricReplicatorSettings) toInnerStruct() *innerFabricReplicatorSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicatorSettings{}
	dst.Flags = obj.Flags
	dst.RetryIntervalMilliseconds = obj.RetryIntervalMilliseconds
	dst.BatchAcknowledgementIntervalMilliseconds = obj.BatchAcknowledgementIntervalMilliseconds
	dst.ReplicatorAddress = utf16PtrFromString(obj.ReplicatorAddress)
	dst.RequireServiceAck = obj.RequireServiceAck
	dst.InitialReplicationQueueSize = obj.InitialReplicationQueueSize
	dst.MaxReplicationQueueSize = obj.MaxReplicationQueueSize
	dst.InitialCopyQueueSize = obj.InitialCopyQueueSize
	dst.MaxCopyQueueSize = obj.MaxCopyQueueSize
	dst.SecurityCredentials = obj.SecurityCredentials.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricReplicatorSettingsEx1{}
	ex1.MaxReplicationQueueMemorySize = obj.MaxReplicationQueueMemorySize
	ex1.SecondaryClearAcknowledgedOperations = obj.SecondaryClearAcknowledgedOperations
	ex1.MaxReplicationMessageSize = obj.MaxReplicationMessageSize
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricReplicatorSettingsEx2{}
	ex2.UseStreamFaultsAndEndOfStreamOperationAck = obj.UseStreamFaultsAndEndOfStreamOperationAck
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricReplicatorSettingsEx3{}
	ex3.InitialPrimaryReplicationQueueSize = obj.InitialPrimaryReplicationQueueSize
	ex3.MaxPrimaryReplicationQueueSize = obj.MaxPrimaryReplicationQueueSize
	ex3.MaxPrimaryReplicationQueueMemorySize = obj.MaxPrimaryReplicationQueueMemorySize
	ex3.InitialSecondaryReplicationQueueSize = obj.InitialSecondaryReplicationQueueSize
	ex3.MaxSecondaryReplicationQueueSize = obj.MaxSecondaryReplicationQueueSize
	ex3.MaxSecondaryReplicationQueueMemorySize = obj.MaxSecondaryReplicationQueueMemorySize
	ex3.PrimaryWaitForPendingQuorumsTimeoutMilliseconds = obj.PrimaryWaitForPendingQuorumsTimeoutMilliseconds
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricReplicatorSettingsEx4{}
	ex4.ReplicatorListenAddress = utf16PtrFromString(obj.ReplicatorListenAddress)
	ex4.ReplicatorPublishAddress = utf16PtrFromString(obj.ReplicatorPublishAddress)
	ex3.Reserved = unsafe.Pointer(ex4)
	return dst
}

type innerFabricReplicatorSettings struct {
	Flags                                    uint32
	RetryIntervalMilliseconds                uint32
	BatchAcknowledgementIntervalMilliseconds uint32
	ReplicatorAddress                        *uint16
	RequireServiceAck                        bool
	InitialReplicationQueueSize              uint32
	MaxReplicationQueueSize                  uint32
	InitialCopyQueueSize                     uint32
	MaxCopyQueueSize                         uint32
	SecurityCredentials                      *innerFabricSecurityCredentials
	Reserved                                 unsafe.Pointer
}
type innerFabricReplicatorSettingsEx1 struct {
	MaxReplicationQueueMemorySize        uint32
	SecondaryClearAcknowledgedOperations bool
	MaxReplicationMessageSize            uint32
	Reserved                             unsafe.Pointer
}
type innerFabricReplicatorSettingsEx2 struct {
	UseStreamFaultsAndEndOfStreamOperationAck bool
	Reserved                                  unsafe.Pointer
}
type innerFabricReplicatorSettingsEx3 struct {
	InitialPrimaryReplicationQueueSize              uint32
	MaxPrimaryReplicationQueueSize                  uint32
	MaxPrimaryReplicationQueueMemorySize            uint32
	InitialSecondaryReplicationQueueSize            uint32
	MaxSecondaryReplicationQueueSize                uint32
	MaxSecondaryReplicationQueueMemorySize          uint32
	PrimaryWaitForPendingQuorumsTimeoutMilliseconds uint32
	Reserved                                        unsafe.Pointer
}
type innerFabricReplicatorSettingsEx4 struct {
	ReplicatorListenAddress  *uint16
	ReplicatorPublishAddress *uint16
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricReplicatorSettings) toGoStruct() (dst *FabricReplicatorSettings) {
	if obj == nil {
		return
	}
	dst = &FabricReplicatorSettings{}
	dst.Flags = obj.Flags
	dst.RetryIntervalMilliseconds = obj.RetryIntervalMilliseconds
	dst.BatchAcknowledgementIntervalMilliseconds = obj.BatchAcknowledgementIntervalMilliseconds
	dst.ReplicatorAddress = utf16PtrToString(obj.ReplicatorAddress)
	dst.RequireServiceAck = obj.RequireServiceAck
	dst.InitialReplicationQueueSize = obj.InitialReplicationQueueSize
	dst.MaxReplicationQueueSize = obj.MaxReplicationQueueSize
	dst.InitialCopyQueueSize = obj.InitialCopyQueueSize
	dst.MaxCopyQueueSize = obj.MaxCopyQueueSize
	dst.SecurityCredentials = obj.SecurityCredentials.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricReplicatorSettingsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.MaxReplicationQueueMemorySize = ex1.MaxReplicationQueueMemorySize
	dst.SecondaryClearAcknowledgedOperations = ex1.SecondaryClearAcknowledgedOperations
	dst.MaxReplicationMessageSize = ex1.MaxReplicationMessageSize
	ex2 := (*innerFabricReplicatorSettingsEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.UseStreamFaultsAndEndOfStreamOperationAck = ex2.UseStreamFaultsAndEndOfStreamOperationAck
	ex3 := (*innerFabricReplicatorSettingsEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.InitialPrimaryReplicationQueueSize = ex3.InitialPrimaryReplicationQueueSize
	dst.MaxPrimaryReplicationQueueSize = ex3.MaxPrimaryReplicationQueueSize
	dst.MaxPrimaryReplicationQueueMemorySize = ex3.MaxPrimaryReplicationQueueMemorySize
	dst.InitialSecondaryReplicationQueueSize = ex3.InitialSecondaryReplicationQueueSize
	dst.MaxSecondaryReplicationQueueSize = ex3.MaxSecondaryReplicationQueueSize
	dst.MaxSecondaryReplicationQueueMemorySize = ex3.MaxSecondaryReplicationQueueMemorySize
	dst.PrimaryWaitForPendingQuorumsTimeoutMilliseconds = ex3.PrimaryWaitForPendingQuorumsTimeoutMilliseconds
	ex4 := (*innerFabricReplicatorSettingsEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	dst.ReplicatorListenAddress = utf16PtrToString(ex4.ReplicatorListenAddress)
	dst.ReplicatorPublishAddress = utf16PtrToString(ex4.ReplicatorPublishAddress)
	return
}

type FabricNamedPropertyMetadata struct {
	PropertyName    string
	TypeId          FabricPropertyTypeId
	ValueSize       int32
	SequenceNumber  int64
	LastModifiedUtc time.Time
	Name            string
	CustomTypeId    string
}

func (obj *FabricNamedPropertyMetadata) toInnerStruct() *innerFabricNamedPropertyMetadata {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNamedPropertyMetadata{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.TypeId = obj.TypeId
	dst.ValueSize = obj.ValueSize
	dst.SequenceNumber = obj.SequenceNumber
	dst.LastModifiedUtc = timeToFiletime(obj.LastModifiedUtc)
	dst.Name = utf16PtrFromString(obj.Name)
	ex0 := dst
	ex1 := &innerFabricNamedPropertyMetadataEx1{}
	ex1.CustomTypeId = utf16PtrFromString(obj.CustomTypeId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricNamedPropertyMetadata struct {
	PropertyName    *uint16
	TypeId          FabricPropertyTypeId
	ValueSize       int32
	SequenceNumber  int64
	LastModifiedUtc filetime
	Name            *uint16
	Reserved        unsafe.Pointer
}
type innerFabricNamedPropertyMetadataEx1 struct {
	CustomTypeId *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricNamedPropertyMetadata) toGoStruct() (dst *FabricNamedPropertyMetadata) {
	if obj == nil {
		return
	}
	dst = &FabricNamedPropertyMetadata{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.TypeId = obj.TypeId
	dst.ValueSize = obj.ValueSize
	dst.SequenceNumber = obj.SequenceNumber
	dst.LastModifiedUtc = obj.LastModifiedUtc.ToTime()
	dst.Name = utf16PtrToString(obj.Name)
	ex0 := obj
	ex1 := (*innerFabricNamedPropertyMetadataEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.CustomTypeId = utf16PtrToString(ex1.CustomTypeId)
	return
}

type FabricNamedProperty struct {
	Metadata *FabricNamedPropertyMetadata
	Value    *byte
}
type innerFabricNamedProperty struct {
	FabricNamedProperty
	Reserved unsafe.Pointer
}

func (obj *innerFabricNamedProperty) toGoStruct() *FabricNamedProperty {
	if obj == nil {
		return nil
	}
	return &obj.FabricNamedProperty
}
func (obj *FabricNamedProperty) toInnerStruct() *innerFabricNamedProperty {
	if obj == nil {
		return nil
	}
	return &innerFabricNamedProperty{*obj, nil}
}

type FabricPutPropertyOperation struct {
	PropertyName   string
	PropertyTypeId FabricPropertyTypeId
	PropertyValue  interface{}
}

func (obj *FabricPutPropertyOperation) toInnerStruct() *innerFabricPutPropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPutPropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.PropertyTypeId = obj.PropertyTypeId
	dst.PropertyValue = toUnsafePointer(obj.PropertyValue)
	return dst
}

type innerFabricPutPropertyOperation struct {
	PropertyName   *uint16
	PropertyTypeId FabricPropertyTypeId
	PropertyValue  unsafe.Pointer
	Reserved       unsafe.Pointer
}

func (obj *innerFabricPutPropertyOperation) toGoStruct() (dst *FabricPutPropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricPutPropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.PropertyTypeId = obj.PropertyTypeId
	dst.PropertyValue = fromUnsafePointer(obj.PropertyValue)
	return
}

type FabricPutCustomPropertyOperation struct {
	PropertyName         string
	PropertyTypeId       FabricPropertyTypeId
	PropertyValue        interface{}
	PropertyCustomTypeId string
}

func (obj *FabricPutCustomPropertyOperation) toInnerStruct() *innerFabricPutCustomPropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPutCustomPropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.PropertyTypeId = obj.PropertyTypeId
	dst.PropertyValue = toUnsafePointer(obj.PropertyValue)
	dst.PropertyCustomTypeId = utf16PtrFromString(obj.PropertyCustomTypeId)
	return dst
}

type innerFabricPutCustomPropertyOperation struct {
	PropertyName         *uint16
	PropertyTypeId       FabricPropertyTypeId
	PropertyValue        unsafe.Pointer
	PropertyCustomTypeId *uint16
	Reserved             unsafe.Pointer
}

func (obj *innerFabricPutCustomPropertyOperation) toGoStruct() (dst *FabricPutCustomPropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricPutCustomPropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.PropertyTypeId = obj.PropertyTypeId
	dst.PropertyValue = fromUnsafePointer(obj.PropertyValue)
	dst.PropertyCustomTypeId = utf16PtrToString(obj.PropertyCustomTypeId)
	return
}

type FabricGetPropertyOperation struct {
	PropertyName string
	IncludeValue bool
}

func (obj *FabricGetPropertyOperation) toInnerStruct() *innerFabricGetPropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricGetPropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.IncludeValue = obj.IncludeValue
	return dst
}

type innerFabricGetPropertyOperation struct {
	PropertyName *uint16
	IncludeValue bool
	Reserved     unsafe.Pointer
}

func (obj *innerFabricGetPropertyOperation) toGoStruct() (dst *FabricGetPropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricGetPropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.IncludeValue = obj.IncludeValue
	return
}

type FabricDeletePropertyOperation struct {
	PropertyName string
}

func (obj *FabricDeletePropertyOperation) toInnerStruct() *innerFabricDeletePropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeletePropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	return dst
}

type innerFabricDeletePropertyOperation struct {
	PropertyName *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricDeletePropertyOperation) toGoStruct() (dst *FabricDeletePropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricDeletePropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	return
}

type FabricCheckSequencePropertyOperation struct {
	PropertyName   string
	SequenceNumber int64
}

func (obj *FabricCheckSequencePropertyOperation) toInnerStruct() *innerFabricCheckSequencePropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCheckSequencePropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.SequenceNumber = obj.SequenceNumber
	return dst
}

type innerFabricCheckSequencePropertyOperation struct {
	PropertyName   *uint16
	SequenceNumber int64
	Reserved       unsafe.Pointer
}

func (obj *innerFabricCheckSequencePropertyOperation) toGoStruct() (dst *FabricCheckSequencePropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricCheckSequencePropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.SequenceNumber = obj.SequenceNumber
	return
}

type FabricCheckExistsPropertyOperation struct {
	PropertyName   string
	ExistenceCheck bool
}

func (obj *FabricCheckExistsPropertyOperation) toInnerStruct() *innerFabricCheckExistsPropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCheckExistsPropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.ExistenceCheck = obj.ExistenceCheck
	return dst
}

type innerFabricCheckExistsPropertyOperation struct {
	PropertyName   *uint16
	ExistenceCheck bool
	Reserved       unsafe.Pointer
}

func (obj *innerFabricCheckExistsPropertyOperation) toGoStruct() (dst *FabricCheckExistsPropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricCheckExistsPropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.ExistenceCheck = obj.ExistenceCheck
	return
}

type FabricCheckValuePropertyOperation struct {
	PropertyName   string
	PropertyTypeId FabricPropertyTypeId
	PropertyValue  interface{}
}

func (obj *FabricCheckValuePropertyOperation) toInnerStruct() *innerFabricCheckValuePropertyOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCheckValuePropertyOperation{}
	dst.PropertyName = utf16PtrFromString(obj.PropertyName)
	dst.PropertyTypeId = obj.PropertyTypeId
	dst.PropertyValue = toUnsafePointer(obj.PropertyValue)
	return dst
}

type innerFabricCheckValuePropertyOperation struct {
	PropertyName   *uint16
	PropertyTypeId FabricPropertyTypeId
	PropertyValue  unsafe.Pointer
	Reserved       unsafe.Pointer
}

func (obj *innerFabricCheckValuePropertyOperation) toGoStruct() (dst *FabricCheckValuePropertyOperation) {
	if obj == nil {
		return
	}
	dst = &FabricCheckValuePropertyOperation{}
	dst.PropertyName = utf16PtrToString(obj.PropertyName)
	dst.PropertyTypeId = obj.PropertyTypeId
	dst.PropertyValue = fromUnsafePointer(obj.PropertyValue)
	return
}

type FabricPropertyBatchOperation struct {
	Kind  FabricPropertyBatchOperationKind
	Value interface{}
}

func (obj *FabricPropertyBatchOperation) toInnerStruct() *innerFabricPropertyBatchOperation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPropertyBatchOperation{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricPropertyBatchOperation struct {
	Kind  FabricPropertyBatchOperationKind
	Value unsafe.Pointer
}

func (obj *innerFabricPropertyBatchOperation) toGoStruct() (dst *FabricPropertyBatchOperation) {
	if obj == nil {
		return
	}
	dst = &FabricPropertyBatchOperation{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricServiceDescription struct {
	Kind  FabricServiceDescriptionKind
	Value interface{}
}

func (obj *FabricServiceDescription) toInnerStruct() *innerFabricServiceDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServiceDescription struct {
	Kind  FabricServiceDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricServiceDescription) toGoStruct() (dst *FabricServiceDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricNodeTransitionDescription struct {
	NodeTransitionType FabricNodeTransitionType
	Value              interface{}
}

func (obj *FabricNodeTransitionDescription) toInnerStruct() *innerFabricNodeTransitionDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeTransitionDescription{}
	dst.NodeTransitionType = obj.NodeTransitionType
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricNodeTransitionDescription struct {
	NodeTransitionType FabricNodeTransitionType
	Value              unsafe.Pointer
}

func (obj *innerFabricNodeTransitionDescription) toGoStruct() (dst *FabricNodeTransitionDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNodeTransitionDescription{}
	dst.NodeTransitionType = obj.NodeTransitionType
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricNodeStopDescription struct {
	OperationId           uuid.UUID
	NodeName              string
	NodeInstanceId        uint64
	StopDurationInSeconds uint32
}

func (obj *FabricNodeStopDescription) toInnerStruct() *innerFabricNodeStopDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeStopDescription{}
	dst.OperationId = obj.OperationId
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.StopDurationInSeconds = obj.StopDurationInSeconds
	return dst
}

type innerFabricNodeStopDescription struct {
	OperationId           uuid.UUID
	NodeName              *uint16
	NodeInstanceId        uint64
	StopDurationInSeconds uint32
	Reserved              unsafe.Pointer
}

func (obj *innerFabricNodeStopDescription) toGoStruct() (dst *FabricNodeStopDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNodeStopDescription{}
	dst.OperationId = obj.OperationId
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.StopDurationInSeconds = obj.StopDurationInSeconds
	return
}

type FabricNodeStartDescription struct {
	OperationId    uuid.UUID
	NodeName       string
	NodeInstanceId uint64
}

func (obj *FabricNodeStartDescription) toInnerStruct() *innerFabricNodeStartDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeStartDescription{}
	dst.OperationId = obj.OperationId
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	return dst
}

type innerFabricNodeStartDescription struct {
	OperationId    uuid.UUID
	NodeName       *uint16
	NodeInstanceId uint64
	Reserved       unsafe.Pointer
}

func (obj *innerFabricNodeStartDescription) toGoStruct() (dst *FabricNodeStartDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNodeStartDescription{}
	dst.OperationId = obj.OperationId
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	return
}

type FabricServiceUpdateDescription struct {
	Kind  FabricServiceDescriptionKind
	Value interface{}
}

func (obj *FabricServiceUpdateDescription) toInnerStruct() *innerFabricServiceUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceUpdateDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServiceUpdateDescription struct {
	Kind  FabricServiceDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricServiceUpdateDescription) toGoStruct() (dst *FabricServiceUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceUpdateDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricDeleteServiceDescription struct {
	ServiceName string
	ForceDelete bool
}

func (obj *FabricDeleteServiceDescription) toInnerStruct() *innerFabricDeleteServiceDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeleteServiceDescription{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ForceDelete = obj.ForceDelete
	return dst
}

type innerFabricDeleteServiceDescription struct {
	ServiceName *uint16
	ForceDelete bool
	Reserved    unsafe.Pointer
}

func (obj *innerFabricDeleteServiceDescription) toGoStruct() (dst *FabricDeleteServiceDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeleteServiceDescription{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ForceDelete = obj.ForceDelete
	return
}

type FabricServiceFromTemplateDescription struct {
	ApplicationName              string
	ServiceName                  string
	ServiceDnsName               string
	ServiceTypeName              string
	ServicePackageActivationMode FabricServicePackageActivationMode
	InitializationDataSize       uint32
	InitializationData           *byte
}

func (obj *FabricServiceFromTemplateDescription) toInnerStruct() *innerFabricServiceFromTemplateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceFromTemplateDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceDnsName = utf16PtrFromString(obj.ServiceDnsName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServicePackageActivationMode = obj.ServicePackageActivationMode
	dst.InitializationDataSize = obj.InitializationDataSize
	dst.InitializationData = obj.InitializationData
	return dst
}

type innerFabricServiceFromTemplateDescription struct {
	ApplicationName              *uint16
	ServiceName                  *uint16
	ServiceDnsName               *uint16
	ServiceTypeName              *uint16
	ServicePackageActivationMode FabricServicePackageActivationMode
	InitializationDataSize       uint32
	InitializationData           *byte
	Reserved                     unsafe.Pointer
}

func (obj *innerFabricServiceFromTemplateDescription) toGoStruct() (dst *FabricServiceFromTemplateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceFromTemplateDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceDnsName = utf16PtrToString(obj.ServiceDnsName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServicePackageActivationMode = obj.ServicePackageActivationMode
	dst.InitializationDataSize = obj.InitializationDataSize
	dst.InitializationData = obj.InitializationData
	return
}

type FabricServiceGroupFromTemplateDescription struct {
	ApplicationName              string
	ServiceName                  string
	ServiceTypeName              string
	ServicePackageActivationMode FabricServicePackageActivationMode
	InitializationDataSize       uint32
	InitializationData           *byte
}

func (obj *FabricServiceGroupFromTemplateDescription) toInnerStruct() *innerFabricServiceGroupFromTemplateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupFromTemplateDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServicePackageActivationMode = obj.ServicePackageActivationMode
	dst.InitializationDataSize = obj.InitializationDataSize
	dst.InitializationData = obj.InitializationData
	return dst
}

type innerFabricServiceGroupFromTemplateDescription struct {
	ApplicationName              *uint16
	ServiceName                  *uint16
	ServiceTypeName              *uint16
	ServicePackageActivationMode FabricServicePackageActivationMode
	InitializationDataSize       uint32
	InitializationData           *byte
	Reserved                     unsafe.Pointer
}

func (obj *innerFabricServiceGroupFromTemplateDescription) toGoStruct() (dst *FabricServiceGroupFromTemplateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupFromTemplateDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServicePackageActivationMode = obj.ServicePackageActivationMode
	dst.InitializationDataSize = obj.InitializationDataSize
	dst.InitializationData = obj.InitializationData
	return
}

type FabricUpgradeDomainStatusDescription struct {
	Name  string
	State FabricUpgradeDomainState
}

func (obj *FabricUpgradeDomainStatusDescription) toInnerStruct() *innerFabricUpgradeDomainStatusDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeDomainStatusDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.State = obj.State
	return dst
}

type innerFabricUpgradeDomainStatusDescription struct {
	Name     *uint16
	State    FabricUpgradeDomainState
	Reserved unsafe.Pointer
}

func (obj *innerFabricUpgradeDomainStatusDescription) toGoStruct() (dst *FabricUpgradeDomainStatusDescription) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeDomainStatusDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.State = obj.State
	return
}

type innerFabricUpgradeDomainStatusDescriptionList struct {
	Count uint32
	Items *innerFabricUpgradeDomainStatusDescription
}

func (obj *innerFabricUpgradeDomainStatusDescriptionList) toGoStruct() []FabricUpgradeDomainStatusDescription {
	var dst []FabricUpgradeDomainStatusDescription
	{
		var innerlst []innerFabricUpgradeDomainStatusDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricUpgradeDomainStatusDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricUpgradeSafetyCheck struct {
	Kind  FabricUpgradeSafetyCheckKind
	Value interface{}
}

func (obj *FabricUpgradeSafetyCheck) toInnerStruct() *innerFabricUpgradeSafetyCheck {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeSafetyCheck{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricUpgradeSafetyCheck struct {
	Kind  FabricUpgradeSafetyCheckKind
	Value unsafe.Pointer
}

func (obj *innerFabricUpgradeSafetyCheck) toGoStruct() (dst *FabricUpgradeSafetyCheck) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeSafetyCheck{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricUpgradePartitionSafetyCheck struct {
	PartitionId uuid.UUID
}
type innerFabricUpgradePartitionSafetyCheck struct {
	FabricUpgradePartitionSafetyCheck
	Reserved unsafe.Pointer
}

func (obj *innerFabricUpgradePartitionSafetyCheck) toGoStruct() *FabricUpgradePartitionSafetyCheck {
	if obj == nil {
		return nil
	}
	return &obj.FabricUpgradePartitionSafetyCheck
}
func (obj *FabricUpgradePartitionSafetyCheck) toInnerStruct() *innerFabricUpgradePartitionSafetyCheck {
	if obj == nil {
		return nil
	}
	return &innerFabricUpgradePartitionSafetyCheck{*obj, nil}
}

type FabricUpgradeSeedNodeSafetyCheck struct {
}
type innerFabricUpgradeSeedNodeSafetyCheck struct {
	FabricUpgradeSeedNodeSafetyCheck
	Reserved unsafe.Pointer
}

func (obj *innerFabricUpgradeSeedNodeSafetyCheck) toGoStruct() *FabricUpgradeSeedNodeSafetyCheck {
	if obj == nil {
		return nil
	}
	return &obj.FabricUpgradeSeedNodeSafetyCheck
}
func (obj *FabricUpgradeSeedNodeSafetyCheck) toInnerStruct() *innerFabricUpgradeSeedNodeSafetyCheck {
	if obj == nil {
		return nil
	}
	return &innerFabricUpgradeSeedNodeSafetyCheck{*obj, nil}
}

type innerFabricUpgradeSafetyCheckList struct {
	Count uint32
	Items *innerFabricUpgradeSafetyCheck
}

func (obj *innerFabricUpgradeSafetyCheckList) toGoStruct() []FabricUpgradeSafetyCheck {
	var dst []FabricUpgradeSafetyCheck
	{
		var innerlst []innerFabricUpgradeSafetyCheck
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricUpgradeSafetyCheck

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricNodeUpgradeProgress struct {
	NodeName            string
	UpgradePhase        FabricNodeUpgradePhase
	PendingSafetyChecks []FabricUpgradeSafetyCheck
}

func (obj *FabricNodeUpgradeProgress) toInnerStruct() *innerFabricNodeUpgradeProgress {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeUpgradeProgress{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.UpgradePhase = obj.UpgradePhase
	lst_12 := &innerFabricUpgradeSafetyCheckList{}
	{

		var tmp []innerFabricUpgradeSafetyCheck

		for _, item := range obj.PendingSafetyChecks {
			var tmpitem innerFabricUpgradeSafetyCheck

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_12.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_12.Items = &tmp[0]
		}

	}
	dst.PendingSafetyChecks = lst_12
	return dst
}

type innerFabricNodeUpgradeProgress struct {
	NodeName            *uint16
	UpgradePhase        FabricNodeUpgradePhase
	PendingSafetyChecks *innerFabricUpgradeSafetyCheckList
	Reserved            unsafe.Pointer
}

func (obj *innerFabricNodeUpgradeProgress) toGoStruct() (dst *FabricNodeUpgradeProgress) {
	if obj == nil {
		return
	}
	dst = &FabricNodeUpgradeProgress{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.UpgradePhase = obj.UpgradePhase
	{
		var innerlst []innerFabricUpgradeSafetyCheck
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.PendingSafetyChecks.Items), int(obj.PendingSafetyChecks.Count))

		for _, item := range innerlst {
			var tmpitem FabricUpgradeSafetyCheck

			tmpitem = *item.toGoStruct()

			dst.PendingSafetyChecks = append(dst.PendingSafetyChecks, tmpitem)
		}

	}
	return
}

type innerFabricNodeUpgradeProgressList struct {
	Count uint32
	Items *innerFabricNodeUpgradeProgress
}

func (obj *innerFabricNodeUpgradeProgressList) toGoStruct() []FabricNodeUpgradeProgress {
	var dst []FabricNodeUpgradeProgress
	{
		var innerlst []innerFabricNodeUpgradeProgress
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeUpgradeProgress

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricUpgradeDomainProgress struct {
	UpgradeDomainName string
	NodeProgressList  []FabricNodeUpgradeProgress
}

func (obj *FabricUpgradeDomainProgress) toInnerStruct() *innerFabricUpgradeDomainProgress {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeDomainProgress{}
	dst.UpgradeDomainName = utf16PtrFromString(obj.UpgradeDomainName)
	lst_13 := &innerFabricNodeUpgradeProgressList{}
	{

		var tmp []innerFabricNodeUpgradeProgress

		for _, item := range obj.NodeProgressList {
			var tmpitem innerFabricNodeUpgradeProgress

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_13.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_13.Items = &tmp[0]
		}

	}
	dst.NodeProgressList = lst_13
	return dst
}

type innerFabricUpgradeDomainProgress struct {
	UpgradeDomainName *uint16
	NodeProgressList  *innerFabricNodeUpgradeProgressList
	Reserved          unsafe.Pointer
}

func (obj *innerFabricUpgradeDomainProgress) toGoStruct() (dst *FabricUpgradeDomainProgress) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeDomainProgress{}
	dst.UpgradeDomainName = utf16PtrToString(obj.UpgradeDomainName)
	{
		var innerlst []innerFabricNodeUpgradeProgress
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.NodeProgressList.Items), int(obj.NodeProgressList.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeUpgradeProgress

			tmpitem = *item.toGoStruct()

			dst.NodeProgressList = append(dst.NodeProgressList, tmpitem)
		}

	}
	return
}

type FabricStatelessServiceDescription struct {
	ApplicationName              string
	ServiceName                  string
	ServiceTypeName              string
	InitializationData           []byte
	PartitionScheme              FabricPartitionScheme
	PartitionSchemeDescription   interface{}
	InstanceCount                int32
	PlacementConstraints         string
	Correlations                 []FabricServiceCorrelationDescription
	Metrics                      []FabricServiceLoadMetricDescription
	PolicyList                   []FabricServicePlacementPolicyDescription
	IsDefaultMoveCostSpecified   bool
	DefaultMoveCost              FabricMoveCost
	ServicePackageActivationMode FabricServicePackageActivationMode
	ServiceDnsName               string
	ServiceScalingPolicies       []FabricServiceScalingPolicy
}

func (obj *FabricStatelessServiceDescription) toInnerStruct() *innerFabricStatelessServiceDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	{

		var tmp []byte

		for _, item := range obj.InitializationData {
			var tmpitem byte

			tmpitem = item

			tmp = append(tmp, tmpitem)
		}

		dst.InitializationDataSize = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.InitializationData = &tmp[0]
		}

	}
	dst.PartitionScheme = obj.PartitionScheme
	dst.PartitionSchemeDescription = toUnsafePointer(obj.PartitionSchemeDescription)
	dst.InstanceCount = obj.InstanceCount
	dst.PlacementConstraints = utf16PtrFromString(obj.PlacementConstraints)
	{

		var tmp []innerFabricServiceCorrelationDescription

		for _, item := range obj.Correlations {
			var tmpitem innerFabricServiceCorrelationDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.CorrelationCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Correlations = &tmp[0]
		}

	}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.MetricCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Metrics = &tmp[0]
		}

	}
	ex0 := dst
	ex1 := &innerFabricStatelessServiceDescriptionEx1{}
	lst_14 := &innerFabricServicePlacementPolicyList{}
	{

		var tmp []innerFabricServicePlacementPolicyDescription

		for _, item := range obj.PolicyList {
			var tmpitem innerFabricServicePlacementPolicyDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_14.PolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_14.Policies = &tmp[0]
		}

	}
	ex1.PolicyList = lst_14
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricStatelessServiceDescriptionEx2{}
	ex2.IsDefaultMoveCostSpecified = obj.IsDefaultMoveCostSpecified
	ex2.DefaultMoveCost = obj.DefaultMoveCost
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricStatelessServiceDescriptionEx3{}
	ex3.ServicePackageActivationMode = obj.ServicePackageActivationMode
	ex3.ServiceDnsName = utf16PtrFromString(obj.ServiceDnsName)
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricStatelessServiceDescriptionEx4{}
	{

		var tmp []innerFabricServiceScalingPolicy

		for _, item := range obj.ServiceScalingPolicies {
			var tmpitem innerFabricServiceScalingPolicy

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex4.ScalingPolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex4.ServiceScalingPolicies = &tmp[0]
		}

	}
	ex3.Reserved = unsafe.Pointer(ex4)
	return dst
}

type innerFabricStatelessServiceDescription struct {
	ApplicationName            *uint16
	ServiceName                *uint16
	ServiceTypeName            *uint16
	InitializationDataSize     uint32
	InitializationData         *byte
	PartitionScheme            FabricPartitionScheme
	PartitionSchemeDescription unsafe.Pointer
	InstanceCount              int32
	PlacementConstraints       *uint16
	CorrelationCount           uint32
	Correlations               *innerFabricServiceCorrelationDescription
	MetricCount                uint32
	Metrics                    *innerFabricServiceLoadMetricDescription
	Reserved                   unsafe.Pointer
}
type innerFabricStatelessServiceDescriptionEx1 struct {
	PolicyList *innerFabricServicePlacementPolicyList
	Reserved   unsafe.Pointer
}
type innerFabricStatelessServiceDescriptionEx2 struct {
	IsDefaultMoveCostSpecified bool
	DefaultMoveCost            FabricMoveCost
	Reserved                   unsafe.Pointer
}
type innerFabricStatelessServiceDescriptionEx3 struct {
	ServicePackageActivationMode FabricServicePackageActivationMode
	ServiceDnsName               *uint16
	Reserved                     unsafe.Pointer
}
type innerFabricStatelessServiceDescriptionEx4 struct {
	ScalingPolicyCount     uint32
	ServiceScalingPolicies *innerFabricServiceScalingPolicy
	Reserved               unsafe.Pointer
}

func (obj *innerFabricStatelessServiceDescription) toGoStruct() (dst *FabricStatelessServiceDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	{
		var innerlst []byte
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.InitializationData), int(obj.InitializationDataSize))

		for _, item := range innerlst {
			var tmpitem byte

			tmpitem = item

			dst.InitializationData = append(dst.InitializationData, tmpitem)
		}

	}
	dst.PartitionScheme = obj.PartitionScheme
	dst.PartitionSchemeDescription = fromUnsafePointer(obj.PartitionSchemeDescription)
	dst.InstanceCount = obj.InstanceCount
	dst.PlacementConstraints = utf16PtrToString(obj.PlacementConstraints)
	{
		var innerlst []innerFabricServiceCorrelationDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Correlations), int(obj.CorrelationCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceCorrelationDescription

			tmpitem = *item.toGoStruct()

			dst.Correlations = append(dst.Correlations, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Metrics), int(obj.MetricCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricStatelessServiceDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.PolicyList.Policies), int(ex1.PolicyList.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst.PolicyList = append(dst.PolicyList, tmpitem)
		}

	}
	ex2 := (*innerFabricStatelessServiceDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.IsDefaultMoveCostSpecified = ex2.IsDefaultMoveCostSpecified
	dst.DefaultMoveCost = ex2.DefaultMoveCost
	ex3 := (*innerFabricStatelessServiceDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.ServicePackageActivationMode = ex3.ServicePackageActivationMode
	dst.ServiceDnsName = utf16PtrToString(ex3.ServiceDnsName)
	ex4 := (*innerFabricStatelessServiceDescriptionEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	{
		var innerlst []innerFabricServiceScalingPolicy
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex4.ServiceScalingPolicies), int(ex4.ScalingPolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceScalingPolicy

			tmpitem = *item.toGoStruct()

			dst.ServiceScalingPolicies = append(dst.ServiceScalingPolicies, tmpitem)
		}

	}
	return
}

type FabricStatelessServiceUpdateDescription struct {
	Flags                  uint32
	InstanceCount          int32
	PlacementConstraints   string
	PolicyList             []FabricServicePlacementPolicyDescription
	Correlations           []FabricServiceCorrelationDescription
	Metrics                []FabricServiceLoadMetricDescription
	DefaultMoveCost        FabricMoveCost
	RepartitionKind        FabricServicePartitionKind
	RepartitionDescription interface{}
	ServiceScalingPolicies []FabricServiceScalingPolicy
}

func (obj *FabricStatelessServiceUpdateDescription) toInnerStruct() *innerFabricStatelessServiceUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceUpdateDescription{}
	dst.Flags = obj.Flags
	dst.InstanceCount = obj.InstanceCount
	ex0 := dst
	ex1 := &innerFabricStatelessServiceUpdateDescriptionEx1{}
	ex1.PlacementConstraints = utf16PtrFromString(obj.PlacementConstraints)
	lst_15 := &innerFabricServicePlacementPolicyList{}
	{

		var tmp []innerFabricServicePlacementPolicyDescription

		for _, item := range obj.PolicyList {
			var tmpitem innerFabricServicePlacementPolicyDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_15.PolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_15.Policies = &tmp[0]
		}

	}
	ex1.PolicyList = lst_15
	{

		var tmp []innerFabricServiceCorrelationDescription

		for _, item := range obj.Correlations {
			var tmpitem innerFabricServiceCorrelationDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex1.CorrelationCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex1.Correlations = &tmp[0]
		}

	}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex1.MetricCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex1.Metrics = &tmp[0]
		}

	}
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricStatelessServiceUpdateDescriptionEx2{}
	ex2.DefaultMoveCost = obj.DefaultMoveCost
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricStatelessServiceUpdateDescriptionEx3{}
	ex3.RepartitionKind = obj.RepartitionKind
	ex3.RepartitionDescription = toUnsafePointer(obj.RepartitionDescription)
	{

		var tmp []innerFabricServiceScalingPolicy

		for _, item := range obj.ServiceScalingPolicies {
			var tmpitem innerFabricServiceScalingPolicy

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex3.ScalingPolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex3.ServiceScalingPolicies = &tmp[0]
		}

	}
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricStatelessServiceUpdateDescription struct {
	Flags         uint32
	InstanceCount int32
	Reserved      unsafe.Pointer
}
type innerFabricStatelessServiceUpdateDescriptionEx1 struct {
	PlacementConstraints *uint16
	PolicyList           *innerFabricServicePlacementPolicyList
	CorrelationCount     uint32
	Correlations         *innerFabricServiceCorrelationDescription
	MetricCount          uint32
	Metrics              *innerFabricServiceLoadMetricDescription
	Reserved             unsafe.Pointer
}
type innerFabricStatelessServiceUpdateDescriptionEx2 struct {
	DefaultMoveCost FabricMoveCost
	Reserved        unsafe.Pointer
}
type innerFabricStatelessServiceUpdateDescriptionEx3 struct {
	RepartitionKind        FabricServicePartitionKind
	RepartitionDescription unsafe.Pointer
	ScalingPolicyCount     uint32
	ServiceScalingPolicies *innerFabricServiceScalingPolicy
	Reserved               unsafe.Pointer
}

func (obj *innerFabricStatelessServiceUpdateDescription) toGoStruct() (dst *FabricStatelessServiceUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceUpdateDescription{}
	dst.Flags = obj.Flags
	dst.InstanceCount = obj.InstanceCount
	ex0 := obj
	ex1 := (*innerFabricStatelessServiceUpdateDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.PlacementConstraints = utf16PtrToString(ex1.PlacementConstraints)
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.PolicyList.Policies), int(ex1.PolicyList.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst.PolicyList = append(dst.PolicyList, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceCorrelationDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.Correlations), int(ex1.CorrelationCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceCorrelationDescription

			tmpitem = *item.toGoStruct()

			dst.Correlations = append(dst.Correlations, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.Metrics), int(ex1.MetricCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	ex2 := (*innerFabricStatelessServiceUpdateDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.DefaultMoveCost = ex2.DefaultMoveCost
	ex3 := (*innerFabricStatelessServiceUpdateDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.RepartitionKind = ex3.RepartitionKind
	dst.RepartitionDescription = fromUnsafePointer(ex3.RepartitionDescription)
	{
		var innerlst []innerFabricServiceScalingPolicy
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex3.ServiceScalingPolicies), int(ex3.ScalingPolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceScalingPolicy

			tmpitem = *item.toGoStruct()

			dst.ServiceScalingPolicies = append(dst.ServiceScalingPolicies, tmpitem)
		}

	}
	return
}

type FabricStatefulServiceDescription struct {
	ApplicationName              string
	ServiceName                  string
	ServiceTypeName              string
	InitializationData           []byte
	PartitionScheme              FabricPartitionScheme
	PartitionSchemeDescription   interface{}
	TargetReplicaSetSize         int32
	MinReplicaSetSize            int32
	PlacementConstraints         string
	Correlations                 []FabricServiceCorrelationDescription
	Metrics                      []FabricServiceLoadMetricDescription
	HasPersistedState            bool
	PolicyList                   []FabricServicePlacementPolicyDescription
	FailoverSettings             *FabricStatefulServiceFailoverSettings
	IsDefaultMoveCostSpecified   bool
	DefaultMoveCost              FabricMoveCost
	ServicePackageActivationMode FabricServicePackageActivationMode
	ServiceDnsName               string
	ServiceScalingPolicies       []FabricServiceScalingPolicy
}

func (obj *FabricStatefulServiceDescription) toInnerStruct() *innerFabricStatefulServiceDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	{

		var tmp []byte

		for _, item := range obj.InitializationData {
			var tmpitem byte

			tmpitem = item

			tmp = append(tmp, tmpitem)
		}

		dst.InitializationDataSize = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.InitializationData = &tmp[0]
		}

	}
	dst.PartitionScheme = obj.PartitionScheme
	dst.PartitionSchemeDescription = toUnsafePointer(obj.PartitionSchemeDescription)
	dst.TargetReplicaSetSize = obj.TargetReplicaSetSize
	dst.MinReplicaSetSize = obj.MinReplicaSetSize
	dst.PlacementConstraints = utf16PtrFromString(obj.PlacementConstraints)
	{

		var tmp []innerFabricServiceCorrelationDescription

		for _, item := range obj.Correlations {
			var tmpitem innerFabricServiceCorrelationDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.CorrelationCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Correlations = &tmp[0]
		}

	}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.MetricCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Metrics = &tmp[0]
		}

	}
	dst.HasPersistedState = obj.HasPersistedState
	ex0 := dst
	ex1 := &innerFabricStatefulServiceDescriptionEx1{}
	lst_16 := &innerFabricServicePlacementPolicyList{}
	{

		var tmp []innerFabricServicePlacementPolicyDescription

		for _, item := range obj.PolicyList {
			var tmpitem innerFabricServicePlacementPolicyDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_16.PolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_16.Policies = &tmp[0]
		}

	}
	ex1.PolicyList = lst_16
	ex1.FailoverSettings = obj.FailoverSettings.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricStatefulServiceDescriptionEx2{}
	ex2.IsDefaultMoveCostSpecified = obj.IsDefaultMoveCostSpecified
	ex2.DefaultMoveCost = obj.DefaultMoveCost
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricStatefulServiceDescriptionEx3{}
	ex3.ServicePackageActivationMode = obj.ServicePackageActivationMode
	ex3.ServiceDnsName = utf16PtrFromString(obj.ServiceDnsName)
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricStatefulServiceDescriptionEx4{}
	{

		var tmp []innerFabricServiceScalingPolicy

		for _, item := range obj.ServiceScalingPolicies {
			var tmpitem innerFabricServiceScalingPolicy

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex4.ScalingPolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex4.ServiceScalingPolicies = &tmp[0]
		}

	}
	ex3.Reserved = unsafe.Pointer(ex4)
	return dst
}

type innerFabricStatefulServiceDescription struct {
	ApplicationName            *uint16
	ServiceName                *uint16
	ServiceTypeName            *uint16
	InitializationDataSize     uint32
	InitializationData         *byte
	PartitionScheme            FabricPartitionScheme
	PartitionSchemeDescription unsafe.Pointer
	TargetReplicaSetSize       int32
	MinReplicaSetSize          int32
	PlacementConstraints       *uint16
	CorrelationCount           uint32
	Correlations               *innerFabricServiceCorrelationDescription
	MetricCount                uint32
	Metrics                    *innerFabricServiceLoadMetricDescription
	HasPersistedState          bool
	Reserved                   unsafe.Pointer
}
type innerFabricStatefulServiceDescriptionEx1 struct {
	PolicyList       *innerFabricServicePlacementPolicyList
	FailoverSettings *innerFabricStatefulServiceFailoverSettings
	Reserved         unsafe.Pointer
}
type innerFabricStatefulServiceDescriptionEx2 struct {
	IsDefaultMoveCostSpecified bool
	DefaultMoveCost            FabricMoveCost
	Reserved                   unsafe.Pointer
}
type innerFabricStatefulServiceDescriptionEx3 struct {
	ServicePackageActivationMode FabricServicePackageActivationMode
	ServiceDnsName               *uint16
	Reserved                     unsafe.Pointer
}
type innerFabricStatefulServiceDescriptionEx4 struct {
	ScalingPolicyCount     uint32
	ServiceScalingPolicies *innerFabricServiceScalingPolicy
	Reserved               unsafe.Pointer
}

func (obj *innerFabricStatefulServiceDescription) toGoStruct() (dst *FabricStatefulServiceDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	{
		var innerlst []byte
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.InitializationData), int(obj.InitializationDataSize))

		for _, item := range innerlst {
			var tmpitem byte

			tmpitem = item

			dst.InitializationData = append(dst.InitializationData, tmpitem)
		}

	}
	dst.PartitionScheme = obj.PartitionScheme
	dst.PartitionSchemeDescription = fromUnsafePointer(obj.PartitionSchemeDescription)
	dst.TargetReplicaSetSize = obj.TargetReplicaSetSize
	dst.MinReplicaSetSize = obj.MinReplicaSetSize
	dst.PlacementConstraints = utf16PtrToString(obj.PlacementConstraints)
	{
		var innerlst []innerFabricServiceCorrelationDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Correlations), int(obj.CorrelationCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceCorrelationDescription

			tmpitem = *item.toGoStruct()

			dst.Correlations = append(dst.Correlations, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Metrics), int(obj.MetricCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	dst.HasPersistedState = obj.HasPersistedState
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.PolicyList.Policies), int(ex1.PolicyList.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst.PolicyList = append(dst.PolicyList, tmpitem)
		}

	}
	dst.FailoverSettings = ex1.FailoverSettings.toGoStruct()
	ex2 := (*innerFabricStatefulServiceDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.IsDefaultMoveCostSpecified = ex2.IsDefaultMoveCostSpecified
	dst.DefaultMoveCost = ex2.DefaultMoveCost
	ex3 := (*innerFabricStatefulServiceDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.ServicePackageActivationMode = ex3.ServicePackageActivationMode
	dst.ServiceDnsName = utf16PtrToString(ex3.ServiceDnsName)
	ex4 := (*innerFabricStatefulServiceDescriptionEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	{
		var innerlst []innerFabricServiceScalingPolicy
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex4.ServiceScalingPolicies), int(ex4.ScalingPolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceScalingPolicy

			tmpitem = *item.toGoStruct()

			dst.ServiceScalingPolicies = append(dst.ServiceScalingPolicies, tmpitem)
		}

	}
	return
}

type FabricStatefulServiceFailoverSettings struct {
	Flags                             uint32
	ReplicaRestartWaitDurationSeconds uint32
	QuorumLossWaitDurationSeconds     uint32
	StandByReplicaKeepDurationSeconds uint32
}

func (obj *FabricStatefulServiceFailoverSettings) toInnerStruct() *innerFabricStatefulServiceFailoverSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceFailoverSettings{}
	dst.Flags = obj.Flags
	dst.ReplicaRestartWaitDurationSeconds = obj.ReplicaRestartWaitDurationSeconds
	dst.QuorumLossWaitDurationSeconds = obj.QuorumLossWaitDurationSeconds
	ex0 := dst
	ex1 := &innerFabricStatefulServiceFailoverSettingsEx1{}
	ex1.StandByReplicaKeepDurationSeconds = obj.StandByReplicaKeepDurationSeconds
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatefulServiceFailoverSettings struct {
	Flags                             uint32
	ReplicaRestartWaitDurationSeconds uint32
	QuorumLossWaitDurationSeconds     uint32
	Reserved                          unsafe.Pointer
}
type innerFabricStatefulServiceFailoverSettingsEx1 struct {
	StandByReplicaKeepDurationSeconds uint32
	Reserved                          unsafe.Pointer
}

func (obj *innerFabricStatefulServiceFailoverSettings) toGoStruct() (dst *FabricStatefulServiceFailoverSettings) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceFailoverSettings{}
	dst.Flags = obj.Flags
	dst.ReplicaRestartWaitDurationSeconds = obj.ReplicaRestartWaitDurationSeconds
	dst.QuorumLossWaitDurationSeconds = obj.QuorumLossWaitDurationSeconds
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceFailoverSettingsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.StandByReplicaKeepDurationSeconds = ex1.StandByReplicaKeepDurationSeconds
	return
}

type FabricStatefulServiceUpdateDescription struct {
	Flags                             uint32
	TargetReplicaSetSize              int32
	ReplicaRestartWaitDurationSeconds uint32
	QuorumLossWaitDurationSeconds     uint32
	StandByReplicaKeepDurationSeconds uint32
	MinReplicaSetSize                 int32
	PlacementConstraints              string
	PolicyList                        []FabricServicePlacementPolicyDescription
	Correlations                      []FabricServiceCorrelationDescription
	Metrics                           []FabricServiceLoadMetricDescription
	DefaultMoveCost                   FabricMoveCost
	RepartitionKind                   FabricServicePartitionKind
	RepartitionDescription            interface{}
	ServiceScalingPolicies            []FabricServiceScalingPolicy
}

func (obj *FabricStatefulServiceUpdateDescription) toInnerStruct() *innerFabricStatefulServiceUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceUpdateDescription{}
	dst.Flags = obj.Flags
	dst.TargetReplicaSetSize = obj.TargetReplicaSetSize
	dst.ReplicaRestartWaitDurationSeconds = obj.ReplicaRestartWaitDurationSeconds
	dst.QuorumLossWaitDurationSeconds = obj.QuorumLossWaitDurationSeconds
	ex0 := dst
	ex1 := &innerFabricStatefulServiceUpdateDescriptionEx1{}
	ex1.StandByReplicaKeepDurationSeconds = obj.StandByReplicaKeepDurationSeconds
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricStatefulServiceUpdateDescriptionEx2{}
	ex2.MinReplicaSetSize = obj.MinReplicaSetSize
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricStatefulServiceUpdateDescriptionEx3{}
	ex3.PlacementConstraints = utf16PtrFromString(obj.PlacementConstraints)
	lst_17 := &innerFabricServicePlacementPolicyList{}
	{

		var tmp []innerFabricServicePlacementPolicyDescription

		for _, item := range obj.PolicyList {
			var tmpitem innerFabricServicePlacementPolicyDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_17.PolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_17.Policies = &tmp[0]
		}

	}
	ex3.PolicyList = lst_17
	{

		var tmp []innerFabricServiceCorrelationDescription

		for _, item := range obj.Correlations {
			var tmpitem innerFabricServiceCorrelationDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex3.CorrelationCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex3.Correlations = &tmp[0]
		}

	}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex3.MetricCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex3.Metrics = &tmp[0]
		}

	}
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricStatefulServiceUpdateDescriptionEx4{}
	ex4.DefaultMoveCost = obj.DefaultMoveCost
	ex3.Reserved = unsafe.Pointer(ex4)
	ex5 := &innerFabricStatefulServiceUpdateDescriptionEx5{}
	ex5.RepartitionKind = obj.RepartitionKind
	ex5.RepartitionDescription = toUnsafePointer(obj.RepartitionDescription)
	{

		var tmp []innerFabricServiceScalingPolicy

		for _, item := range obj.ServiceScalingPolicies {
			var tmpitem innerFabricServiceScalingPolicy

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex5.ScalingPolicyCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex5.ServiceScalingPolicies = &tmp[0]
		}

	}
	ex4.Reserved = unsafe.Pointer(ex5)
	return dst
}

type innerFabricStatefulServiceUpdateDescription struct {
	Flags                             uint32
	TargetReplicaSetSize              int32
	ReplicaRestartWaitDurationSeconds uint32
	QuorumLossWaitDurationSeconds     uint32
	Reserved                          unsafe.Pointer
}
type innerFabricStatefulServiceUpdateDescriptionEx1 struct {
	StandByReplicaKeepDurationSeconds uint32
	Reserved                          unsafe.Pointer
}
type innerFabricStatefulServiceUpdateDescriptionEx2 struct {
	MinReplicaSetSize int32
	Reserved          unsafe.Pointer
}
type innerFabricStatefulServiceUpdateDescriptionEx3 struct {
	PlacementConstraints *uint16
	PolicyList           *innerFabricServicePlacementPolicyList
	CorrelationCount     uint32
	Correlations         *innerFabricServiceCorrelationDescription
	MetricCount          uint32
	Metrics              *innerFabricServiceLoadMetricDescription
	Reserved             unsafe.Pointer
}
type innerFabricStatefulServiceUpdateDescriptionEx4 struct {
	DefaultMoveCost FabricMoveCost
	Reserved        unsafe.Pointer
}
type innerFabricStatefulServiceUpdateDescriptionEx5 struct {
	RepartitionKind        FabricServicePartitionKind
	RepartitionDescription unsafe.Pointer
	ScalingPolicyCount     uint32
	ServiceScalingPolicies *innerFabricServiceScalingPolicy
	Reserved               unsafe.Pointer
}

func (obj *innerFabricStatefulServiceUpdateDescription) toGoStruct() (dst *FabricStatefulServiceUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceUpdateDescription{}
	dst.Flags = obj.Flags
	dst.TargetReplicaSetSize = obj.TargetReplicaSetSize
	dst.ReplicaRestartWaitDurationSeconds = obj.ReplicaRestartWaitDurationSeconds
	dst.QuorumLossWaitDurationSeconds = obj.QuorumLossWaitDurationSeconds
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceUpdateDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.StandByReplicaKeepDurationSeconds = ex1.StandByReplicaKeepDurationSeconds
	ex2 := (*innerFabricStatefulServiceUpdateDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.MinReplicaSetSize = ex2.MinReplicaSetSize
	ex3 := (*innerFabricStatefulServiceUpdateDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.PlacementConstraints = utf16PtrToString(ex3.PlacementConstraints)
	{
		var innerlst []innerFabricServicePlacementPolicyDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex3.PolicyList.Policies), int(ex3.PolicyList.PolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServicePlacementPolicyDescription

			tmpitem = *item.toGoStruct()

			dst.PolicyList = append(dst.PolicyList, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceCorrelationDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex3.Correlations), int(ex3.CorrelationCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceCorrelationDescription

			tmpitem = *item.toGoStruct()

			dst.Correlations = append(dst.Correlations, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex3.Metrics), int(ex3.MetricCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	ex4 := (*innerFabricStatefulServiceUpdateDescriptionEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	dst.DefaultMoveCost = ex4.DefaultMoveCost
	ex5 := (*innerFabricStatefulServiceUpdateDescriptionEx5)(ex4.Reserved)
	if ex5 == nil {
		return
	}
	dst.RepartitionKind = ex5.RepartitionKind
	dst.RepartitionDescription = fromUnsafePointer(ex5.RepartitionDescription)
	{
		var innerlst []innerFabricServiceScalingPolicy
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex5.ServiceScalingPolicies), int(ex5.ScalingPolicyCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceScalingPolicy

			tmpitem = *item.toGoStruct()

			dst.ServiceScalingPolicies = append(dst.ServiceScalingPolicies, tmpitem)
		}

	}
	return
}

type innerFabricNamedRepartitionDescription struct {
	NamesToAddCount    uint32
	NamesToAdd         **uint16
	NamesToRemoveCount uint32
	NamesToRemove      **uint16
	Reserved           unsafe.Pointer
}
type FabricUniformInt64RangePartitionSchemeDescription struct {
	PartitionCount int32
	LowKey         int64
	HighKey        int64
}
type innerFabricUniformInt64RangePartitionSchemeDescription struct {
	FabricUniformInt64RangePartitionSchemeDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricUniformInt64RangePartitionSchemeDescription) toGoStruct() *FabricUniformInt64RangePartitionSchemeDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricUniformInt64RangePartitionSchemeDescription
}
func (obj *FabricUniformInt64RangePartitionSchemeDescription) toInnerStruct() *innerFabricUniformInt64RangePartitionSchemeDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricUniformInt64RangePartitionSchemeDescription{*obj, nil}
}

type innerFabricNamedPartitionSchemeDescription struct {
	PartitionCount int32
	Names          **uint16
	Reserved       unsafe.Pointer
}
type FabricResolvedServiceEndpoint struct {
	Address string
	Role    FabricServiceEndpointRole
}

func (obj *FabricResolvedServiceEndpoint) toInnerStruct() *innerFabricResolvedServiceEndpoint {
	if obj == nil {
		return nil
	}
	dst := &innerFabricResolvedServiceEndpoint{}
	dst.Address = utf16PtrFromString(obj.Address)
	dst.Role = obj.Role
	return dst
}

type innerFabricResolvedServiceEndpoint struct {
	Address  *uint16
	Role     FabricServiceEndpointRole
	Reserved unsafe.Pointer
}

func (obj *innerFabricResolvedServiceEndpoint) toGoStruct() (dst *FabricResolvedServiceEndpoint) {
	if obj == nil {
		return
	}
	dst = &FabricResolvedServiceEndpoint{}
	dst.Address = utf16PtrToString(obj.Address)
	dst.Role = obj.Role
	return
}

type FabricResolvedServicePartition struct {
	Info        FabricServicePartitionInformation
	Endpoints   []FabricResolvedServiceEndpoint
	ServiceName string
}

func (obj *FabricResolvedServicePartition) toInnerStruct() *innerFabricResolvedServicePartition {
	if obj == nil {
		return nil
	}
	dst := &innerFabricResolvedServicePartition{}
	dst.Info = *obj.Info.toInnerStruct()
	{

		var tmp []innerFabricResolvedServiceEndpoint

		for _, item := range obj.Endpoints {
			var tmpitem innerFabricResolvedServiceEndpoint

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.EndpointCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Endpoints = &tmp[0]
		}

	}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	return dst
}

type innerFabricResolvedServicePartition struct {
	Info          innerFabricServicePartitionInformation
	EndpointCount uint32
	Endpoints     *innerFabricResolvedServiceEndpoint
	ServiceName   *uint16
	Reserved      unsafe.Pointer
}

func (obj *innerFabricResolvedServicePartition) toGoStruct() (dst *FabricResolvedServicePartition) {
	if obj == nil {
		return
	}
	dst = &FabricResolvedServicePartition{}
	dst.Info = *obj.Info.toGoStruct()
	{
		var innerlst []innerFabricResolvedServiceEndpoint
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Endpoints), int(obj.EndpointCount))

		for _, item := range innerlst {
			var tmpitem FabricResolvedServiceEndpoint

			tmpitem = *item.toGoStruct()

			dst.Endpoints = append(dst.Endpoints, tmpitem)
		}

	}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	return
}

type FabricServiceNotification struct {
	ServiceName   string
	PartitionId   uuid.UUID
	Endpoints     []FabricResolvedServiceEndpoint
	PartitionInfo *FabricServicePartitionInformation
}

func (obj *FabricServiceNotification) toInnerStruct() *innerFabricServiceNotification {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceNotification{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	{

		var tmp []innerFabricResolvedServiceEndpoint

		for _, item := range obj.Endpoints {
			var tmpitem innerFabricResolvedServiceEndpoint

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.EndpointCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Endpoints = &tmp[0]
		}

	}
	dst.PartitionInfo = obj.PartitionInfo.toInnerStruct()
	return dst
}

type innerFabricServiceNotification struct {
	ServiceName   *uint16
	PartitionId   uuid.UUID
	EndpointCount uint32
	Endpoints     *innerFabricResolvedServiceEndpoint
	PartitionInfo *innerFabricServicePartitionInformation
	Reserved      unsafe.Pointer
}

func (obj *innerFabricServiceNotification) toGoStruct() (dst *FabricServiceNotification) {
	if obj == nil {
		return
	}
	dst = &FabricServiceNotification{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	{
		var innerlst []innerFabricResolvedServiceEndpoint
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Endpoints), int(obj.EndpointCount))

		for _, item := range innerlst {
			var tmpitem FabricResolvedServiceEndpoint

			tmpitem = *item.toGoStruct()

			dst.Endpoints = append(dst.Endpoints, tmpitem)
		}

	}
	dst.PartitionInfo = obj.PartitionInfo.toGoStruct()
	return
}

type FabricServiceNotificationFilterDescription struct {
	Name  string
	Flags FabricServiceNotificationFilterFlags
}

func (obj *FabricServiceNotificationFilterDescription) toInnerStruct() *innerFabricServiceNotificationFilterDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceNotificationFilterDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Flags = obj.Flags
	return dst
}

type innerFabricServiceNotificationFilterDescription struct {
	Name     *uint16
	Flags    FabricServiceNotificationFilterFlags
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceNotificationFilterDescription) toGoStruct() (dst *FabricServiceNotificationFilterDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceNotificationFilterDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Flags = obj.Flags
	return
}

type FabricApplicationParameter struct {
	Name  string
	Value string
}

func (obj *FabricApplicationParameter) toInnerStruct() *innerFabricApplicationParameter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationParameter{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Value = utf16PtrFromString(obj.Value)
	return dst
}

type innerFabricApplicationParameter struct {
	Name     *uint16
	Value    *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricApplicationParameter) toGoStruct() (dst *FabricApplicationParameter) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationParameter{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Value = utf16PtrToString(obj.Value)
	return
}

type innerFabricApplicationParameterList struct {
	Count uint32
	Items *innerFabricApplicationParameter
}

func (obj *innerFabricApplicationParameterList) toGoStruct() []FabricApplicationParameter {
	var dst []FabricApplicationParameter
	{
		var innerlst []innerFabricApplicationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationParameter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type innerFabricStringMap struct {
	Count uint32
	Items *innerFabricApplicationParameter
}

func (obj *innerFabricStringMap) toGoStruct() map[string]string {
	var dst = make(map[string]string)
	{
		var mapvar = make(map[string]string)

		var innerlst []innerFabricApplicationParameter

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, kv := range innerlst {
			var k string
			var v string

			k = utf16PtrToString(kv.Name)
			v = utf16PtrToString(kv.Value)
			mapvar[k] = v

		}

		dst = mapvar
	}
	return dst
}

type FabricApplicationDescription struct {
	ApplicationName        string
	ApplicationTypeName    string
	ApplicationTypeVersion string
	ApplicationParameters  []FabricApplicationParameter
	ApplicationCapacity    *FabricApplicationCapacityDescription
}

func (obj *FabricApplicationDescription) toInnerStruct() *innerFabricApplicationDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	lst_19 := &innerFabricApplicationParameterList{}
	{

		var tmp []innerFabricApplicationParameter

		for _, item := range obj.ApplicationParameters {
			var tmpitem innerFabricApplicationParameter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_19.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_19.Items = &tmp[0]
		}

	}
	dst.ApplicationParameters = lst_19
	ex0 := dst
	ex1 := &innerFabricApplicationDescriptionEx1{}
	ex1.ApplicationCapacity = obj.ApplicationCapacity.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricApplicationDescription struct {
	ApplicationName        *uint16
	ApplicationTypeName    *uint16
	ApplicationTypeVersion *uint16
	ApplicationParameters  *innerFabricApplicationParameterList
	Reserved               unsafe.Pointer
}
type innerFabricApplicationDescriptionEx1 struct {
	ApplicationCapacity *innerFabricApplicationCapacityDescription
	Reserved            unsafe.Pointer
}

func (obj *innerFabricApplicationDescription) toGoStruct() (dst *FabricApplicationDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	{
		var innerlst []innerFabricApplicationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationParameters.Items), int(obj.ApplicationParameters.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationParameter

			tmpitem = *item.toGoStruct()

			dst.ApplicationParameters = append(dst.ApplicationParameters, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricApplicationDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ApplicationCapacity = ex1.ApplicationCapacity.toGoStruct()
	return
}

type FabricApplicationMetricDescription struct {
	Name                     string
	NodeReservationCapacity  uint32
	MaximumNodeCapacity      uint32
	TotalApplicationCapacity uint32
}

func (obj *FabricApplicationMetricDescription) toInnerStruct() *innerFabricApplicationMetricDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationMetricDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.NodeReservationCapacity = obj.NodeReservationCapacity
	dst.MaximumNodeCapacity = obj.MaximumNodeCapacity
	dst.TotalApplicationCapacity = obj.TotalApplicationCapacity
	return dst
}

type innerFabricApplicationMetricDescription struct {
	Name                     *uint16
	NodeReservationCapacity  uint32
	MaximumNodeCapacity      uint32
	TotalApplicationCapacity uint32
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricApplicationMetricDescription) toGoStruct() (dst *FabricApplicationMetricDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationMetricDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.NodeReservationCapacity = obj.NodeReservationCapacity
	dst.MaximumNodeCapacity = obj.MaximumNodeCapacity
	dst.TotalApplicationCapacity = obj.TotalApplicationCapacity
	return
}

type innerFabricApplicationMetricList struct {
	Count      uint32
	Capacities *innerFabricApplicationMetricDescription
}

func (obj *innerFabricApplicationMetricList) toGoStruct() []FabricApplicationMetricDescription {
	var dst []FabricApplicationMetricDescription
	{
		var innerlst []innerFabricApplicationMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Capacities), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationMetricDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationCapacityDescription struct {
	MaximumNodes uint32
	MinimumNodes uint32
	Metrics      []FabricApplicationMetricDescription
}

func (obj *FabricApplicationCapacityDescription) toInnerStruct() *innerFabricApplicationCapacityDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationCapacityDescription{}
	dst.MaximumNodes = obj.MaximumNodes
	dst.MinimumNodes = obj.MinimumNodes
	lst_20 := &innerFabricApplicationMetricList{}
	{

		var tmp []innerFabricApplicationMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricApplicationMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_20.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_20.Capacities = &tmp[0]
		}

	}
	dst.Metrics = lst_20
	return dst
}

type innerFabricApplicationCapacityDescription struct {
	MaximumNodes uint32
	MinimumNodes uint32
	Metrics      *innerFabricApplicationMetricList
	Reserved     unsafe.Pointer
}

func (obj *innerFabricApplicationCapacityDescription) toGoStruct() (dst *FabricApplicationCapacityDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationCapacityDescription{}
	dst.MaximumNodes = obj.MaximumNodes
	dst.MinimumNodes = obj.MinimumNodes
	{
		var innerlst []innerFabricApplicationMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Metrics.Capacities), int(obj.Metrics.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	return
}

type FabricApplicationUpdateDescription struct {
	Flags                     uint32
	ApplicationName           string
	RemoveApplicationCapacity bool
	MaximumNodes              uint32
	MinimumNodes              uint32
	Metrics                   []FabricApplicationMetricDescription
}

func (obj *FabricApplicationUpdateDescription) toInnerStruct() *innerFabricApplicationUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationUpdateDescription{}
	dst.Flags = obj.Flags
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.RemoveApplicationCapacity = obj.RemoveApplicationCapacity
	dst.MaximumNodes = obj.MaximumNodes
	dst.MinimumNodes = obj.MinimumNodes
	lst_21 := &innerFabricApplicationMetricList{}
	{

		var tmp []innerFabricApplicationMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricApplicationMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_21.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_21.Capacities = &tmp[0]
		}

	}
	dst.Metrics = lst_21
	return dst
}

type innerFabricApplicationUpdateDescription struct {
	Flags                     uint32
	ApplicationName           *uint16
	RemoveApplicationCapacity bool
	MaximumNodes              uint32
	MinimumNodes              uint32
	Metrics                   *innerFabricApplicationMetricList
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricApplicationUpdateDescription) toGoStruct() (dst *FabricApplicationUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationUpdateDescription{}
	dst.Flags = obj.Flags
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.RemoveApplicationCapacity = obj.RemoveApplicationCapacity
	dst.MaximumNodes = obj.MaximumNodes
	dst.MinimumNodes = obj.MinimumNodes
	{
		var innerlst []innerFabricApplicationMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Metrics.Capacities), int(obj.Metrics.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	return
}

type FabricRollingUpgradePolicyDescription struct {
	RollingUpgradeMode                     FabricRollingUpgradeMode
	ForceRestart                           bool
	UpgradeReplicaSetCheckTimeoutInSeconds uint32
	MonitoringPolicy                       *FabricRollingUpgradeMonitoringPolicy
	HealthPolicy                           interface{}
	EnableDeltaHealthEvaluation            bool
	UpgradeHealthPolicy                    interface{}
	ApplicationHealthPolicyMap             map[string]FabricApplicationHealthPolicy
}

func (obj *FabricRollingUpgradePolicyDescription) toInnerStruct() *innerFabricRollingUpgradePolicyDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRollingUpgradePolicyDescription{}
	dst.RollingUpgradeMode = obj.RollingUpgradeMode
	dst.ForceRestart = obj.ForceRestart
	dst.UpgradeReplicaSetCheckTimeoutInSeconds = obj.UpgradeReplicaSetCheckTimeoutInSeconds
	ex0 := dst
	ex1 := &innerFabricRollingUpgradePolicyDescriptionEx1{}
	ex1.MonitoringPolicy = obj.MonitoringPolicy.toInnerStruct()
	ex1.HealthPolicy = toUnsafePointer(obj.HealthPolicy)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricRollingUpgradePolicyDescriptionEx2{}
	ex2.EnableDeltaHealthEvaluation = obj.EnableDeltaHealthEvaluation
	ex2.UpgradeHealthPolicy = toUnsafePointer(obj.UpgradeHealthPolicy)
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricRollingUpgradePolicyDescriptionEx3{}
	{
		mapobj := &innerFabricApplicationHealthPolicyMap{}

		var tmp []innerFabricApplicationHealthPolicyMapItem

		for k, v := range obj.ApplicationHealthPolicyMap {
			kv := innerFabricApplicationHealthPolicyMapItem{}

			kv.ApplicationName = utf16PtrFromString(k)
			kv.HealthPolicy = v.toInnerStruct()

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		ex3.ApplicationHealthPolicyMap = mapobj
	}
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricRollingUpgradePolicyDescription struct {
	RollingUpgradeMode                     FabricRollingUpgradeMode
	ForceRestart                           bool
	UpgradeReplicaSetCheckTimeoutInSeconds uint32
	Reserved                               unsafe.Pointer
}
type innerFabricRollingUpgradePolicyDescriptionEx1 struct {
	MonitoringPolicy *innerFabricRollingUpgradeMonitoringPolicy
	HealthPolicy     unsafe.Pointer
	Reserved         unsafe.Pointer
}
type innerFabricRollingUpgradePolicyDescriptionEx2 struct {
	EnableDeltaHealthEvaluation bool
	UpgradeHealthPolicy         unsafe.Pointer
	Reserved                    unsafe.Pointer
}
type innerFabricRollingUpgradePolicyDescriptionEx3 struct {
	ApplicationHealthPolicyMap *innerFabricApplicationHealthPolicyMap
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricRollingUpgradePolicyDescription) toGoStruct() (dst *FabricRollingUpgradePolicyDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRollingUpgradePolicyDescription{}
	dst.RollingUpgradeMode = obj.RollingUpgradeMode
	dst.ForceRestart = obj.ForceRestart
	dst.UpgradeReplicaSetCheckTimeoutInSeconds = obj.UpgradeReplicaSetCheckTimeoutInSeconds
	ex0 := obj
	ex1 := (*innerFabricRollingUpgradePolicyDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.MonitoringPolicy = ex1.MonitoringPolicy.toGoStruct()
	dst.HealthPolicy = fromUnsafePointer(ex1.HealthPolicy)
	ex2 := (*innerFabricRollingUpgradePolicyDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.EnableDeltaHealthEvaluation = ex2.EnableDeltaHealthEvaluation
	dst.UpgradeHealthPolicy = fromUnsafePointer(ex2.UpgradeHealthPolicy)
	ex3 := (*innerFabricRollingUpgradePolicyDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	{
		var mapvar = make(map[string]FabricApplicationHealthPolicy)

		var innerlst []innerFabricApplicationHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex3.ApplicationHealthPolicyMap.Items), int(ex3.ApplicationHealthPolicyMap.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricApplicationHealthPolicy

			k = utf16PtrToString(kv.ApplicationName)
			v = kv.HealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst.ApplicationHealthPolicyMap = mapvar
	}
	return
}

type FabricRollingUpgradeMonitoringPolicy struct {
	FailureAction                      FabricMonitoredUpgradeFailureAction
	HealthCheckWaitDurationInSeconds   uint32
	HealthCheckRetryTimeoutInSeconds   uint32
	UpgradeTimeoutInSeconds            uint32
	UpgradeDomainTimeoutInSeconds      uint32
	HealthCheckStableDurationInSeconds uint32
}

func (obj *FabricRollingUpgradeMonitoringPolicy) toInnerStruct() *innerFabricRollingUpgradeMonitoringPolicy {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRollingUpgradeMonitoringPolicy{}
	dst.FailureAction = obj.FailureAction
	dst.HealthCheckWaitDurationInSeconds = obj.HealthCheckWaitDurationInSeconds
	dst.HealthCheckRetryTimeoutInSeconds = obj.HealthCheckRetryTimeoutInSeconds
	dst.UpgradeTimeoutInSeconds = obj.UpgradeTimeoutInSeconds
	dst.UpgradeDomainTimeoutInSeconds = obj.UpgradeDomainTimeoutInSeconds
	ex0 := dst
	ex1 := &innerFabricRollingUpgradeMonitoringPolicyEx1{}
	ex1.HealthCheckStableDurationInSeconds = obj.HealthCheckStableDurationInSeconds
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricRollingUpgradeMonitoringPolicy struct {
	FailureAction                    FabricMonitoredUpgradeFailureAction
	HealthCheckWaitDurationInSeconds uint32
	HealthCheckRetryTimeoutInSeconds uint32
	UpgradeTimeoutInSeconds          uint32
	UpgradeDomainTimeoutInSeconds    uint32
	Reserved                         unsafe.Pointer
}
type innerFabricRollingUpgradeMonitoringPolicyEx1 struct {
	HealthCheckStableDurationInSeconds uint32
	Reserved                           unsafe.Pointer
}

func (obj *innerFabricRollingUpgradeMonitoringPolicy) toGoStruct() (dst *FabricRollingUpgradeMonitoringPolicy) {
	if obj == nil {
		return
	}
	dst = &FabricRollingUpgradeMonitoringPolicy{}
	dst.FailureAction = obj.FailureAction
	dst.HealthCheckWaitDurationInSeconds = obj.HealthCheckWaitDurationInSeconds
	dst.HealthCheckRetryTimeoutInSeconds = obj.HealthCheckRetryTimeoutInSeconds
	dst.UpgradeTimeoutInSeconds = obj.UpgradeTimeoutInSeconds
	dst.UpgradeDomainTimeoutInSeconds = obj.UpgradeDomainTimeoutInSeconds
	ex0 := obj
	ex1 := (*innerFabricRollingUpgradeMonitoringPolicyEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthCheckStableDurationInSeconds = ex1.HealthCheckStableDurationInSeconds
	return
}

type FabricApplicationUpgradeDescription struct {
	ApplicationName              string
	TargetApplicationTypeVersion string
	ApplicationParameters        []FabricApplicationParameter
	UpgradeKind                  FabricApplicationUpgradeKind
	UpgradePolicyDescription     interface{}
}

func (obj *FabricApplicationUpgradeDescription) toInnerStruct() *innerFabricApplicationUpgradeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationUpgradeDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.TargetApplicationTypeVersion = utf16PtrFromString(obj.TargetApplicationTypeVersion)
	lst_24 := &innerFabricApplicationParameterList{}
	{

		var tmp []innerFabricApplicationParameter

		for _, item := range obj.ApplicationParameters {
			var tmpitem innerFabricApplicationParameter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_24.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_24.Items = &tmp[0]
		}

	}
	dst.ApplicationParameters = lst_24
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpgradePolicyDescription = toUnsafePointer(obj.UpgradePolicyDescription)
	return dst
}

type innerFabricApplicationUpgradeDescription struct {
	ApplicationName              *uint16
	TargetApplicationTypeVersion *uint16
	ApplicationParameters        *innerFabricApplicationParameterList
	UpgradeKind                  FabricApplicationUpgradeKind
	UpgradePolicyDescription     unsafe.Pointer
	Reserved                     unsafe.Pointer
}

func (obj *innerFabricApplicationUpgradeDescription) toGoStruct() (dst *FabricApplicationUpgradeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationUpgradeDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.TargetApplicationTypeVersion = utf16PtrToString(obj.TargetApplicationTypeVersion)
	{
		var innerlst []innerFabricApplicationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationParameters.Items), int(obj.ApplicationParameters.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationParameter

			tmpitem = *item.toGoStruct()

			dst.ApplicationParameters = append(dst.ApplicationParameters, tmpitem)
		}

	}
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpgradePolicyDescription = fromUnsafePointer(obj.UpgradePolicyDescription)
	return
}

type FabricApplicationUpgradeUpdateDescription struct {
	ApplicationName          string
	UpgradeKind              FabricApplicationUpgradeKind
	UpdateFlags              uint32
	UpgradePolicyDescription interface{}
}

func (obj *FabricApplicationUpgradeUpdateDescription) toInnerStruct() *innerFabricApplicationUpgradeUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationUpgradeUpdateDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpdateFlags = obj.UpdateFlags
	dst.UpgradePolicyDescription = toUnsafePointer(obj.UpgradePolicyDescription)
	return dst
}

type innerFabricApplicationUpgradeUpdateDescription struct {
	ApplicationName          *uint16
	UpgradeKind              FabricApplicationUpgradeKind
	UpdateFlags              uint32
	UpgradePolicyDescription unsafe.Pointer
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricApplicationUpgradeUpdateDescription) toGoStruct() (dst *FabricApplicationUpgradeUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationUpgradeUpdateDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpdateFlags = obj.UpdateFlags
	dst.UpgradePolicyDescription = fromUnsafePointer(obj.UpgradePolicyDescription)
	return
}

type FabricUpgradeDescription struct {
	CodeVersion              string
	ConfigVersion            string
	UpgradeKind              FabricUpgradeKind
	UpgradePolicyDescription interface{}
}

func (obj *FabricUpgradeDescription) toInnerStruct() *innerFabricUpgradeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeDescription{}
	dst.CodeVersion = utf16PtrFromString(obj.CodeVersion)
	dst.ConfigVersion = utf16PtrFromString(obj.ConfigVersion)
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpgradePolicyDescription = toUnsafePointer(obj.UpgradePolicyDescription)
	return dst
}

type innerFabricUpgradeDescription struct {
	CodeVersion              *uint16
	ConfigVersion            *uint16
	UpgradeKind              FabricUpgradeKind
	UpgradePolicyDescription unsafe.Pointer
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricUpgradeDescription) toGoStruct() (dst *FabricUpgradeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeDescription{}
	dst.CodeVersion = utf16PtrToString(obj.CodeVersion)
	dst.ConfigVersion = utf16PtrToString(obj.ConfigVersion)
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpgradePolicyDescription = fromUnsafePointer(obj.UpgradePolicyDescription)
	return
}

type FabricUpgradeUpdateDescription struct {
	UpgradeKind              FabricUpgradeKind
	UpdateFlags              uint32
	UpgradePolicyDescription interface{}
}

func (obj *FabricUpgradeUpdateDescription) toInnerStruct() *innerFabricUpgradeUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeUpdateDescription{}
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpdateFlags = obj.UpdateFlags
	dst.UpgradePolicyDescription = toUnsafePointer(obj.UpgradePolicyDescription)
	return dst
}

type innerFabricUpgradeUpdateDescription struct {
	UpgradeKind              FabricUpgradeKind
	UpdateFlags              uint32
	UpgradePolicyDescription unsafe.Pointer
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricUpgradeUpdateDescription) toGoStruct() (dst *FabricUpgradeUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeUpdateDescription{}
	dst.UpgradeKind = obj.UpgradeKind
	dst.UpdateFlags = obj.UpdateFlags
	dst.UpgradePolicyDescription = fromUnsafePointer(obj.UpgradePolicyDescription)
	return
}

type FabricServiceGroupMemberDescription struct {
	ServiceType        string
	ServiceName        string
	InitializationData []byte
	Metrics            []FabricServiceLoadMetricDescription
}

func (obj *FabricServiceGroupMemberDescription) toInnerStruct() *innerFabricServiceGroupMemberDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupMemberDescription{}
	dst.ServiceType = utf16PtrFromString(obj.ServiceType)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	{

		var tmp []byte

		for _, item := range obj.InitializationData {
			var tmpitem byte

			tmpitem = item

			tmp = append(tmp, tmpitem)
		}

		dst.InitializationDataSize = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.InitializationData = &tmp[0]
		}

	}
	{

		var tmp []innerFabricServiceLoadMetricDescription

		for _, item := range obj.Metrics {
			var tmpitem innerFabricServiceLoadMetricDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.MetricCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.Metrics = &tmp[0]
		}

	}
	return dst
}

type innerFabricServiceGroupMemberDescription struct {
	ServiceType            *uint16
	ServiceName            *uint16
	InitializationDataSize uint32
	InitializationData     *byte
	MetricCount            uint32
	Metrics                *innerFabricServiceLoadMetricDescription
	Reserved               unsafe.Pointer
}

func (obj *innerFabricServiceGroupMemberDescription) toGoStruct() (dst *FabricServiceGroupMemberDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupMemberDescription{}
	dst.ServiceType = utf16PtrToString(obj.ServiceType)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	{
		var innerlst []byte
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.InitializationData), int(obj.InitializationDataSize))

		for _, item := range innerlst {
			var tmpitem byte

			tmpitem = item

			dst.InitializationData = append(dst.InitializationData, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceLoadMetricDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Metrics), int(obj.MetricCount))

		for _, item := range innerlst {
			var tmpitem FabricServiceLoadMetricDescription

			tmpitem = *item.toGoStruct()

			dst.Metrics = append(dst.Metrics, tmpitem)
		}

	}
	return
}

type FabricServiceGroupDescription struct {
	Description        *FabricServiceDescription
	MemberDescriptions []FabricServiceGroupMemberDescription
}
type innerFabricServiceGroupDescription struct {
	FabricServiceGroupDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceGroupDescription) toGoStruct() *FabricServiceGroupDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceGroupDescription
}
func (obj *FabricServiceGroupDescription) toInnerStruct() *innerFabricServiceGroupDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceGroupDescription{*obj, nil}
}

type FabricServiceGroupUpdateDescription struct {
	Description *FabricServiceUpdateDescription
}
type innerFabricServiceGroupUpdateDescription struct {
	FabricServiceGroupUpdateDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceGroupUpdateDescription) toGoStruct() *FabricServiceGroupUpdateDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceGroupUpdateDescription
}
func (obj *FabricServiceGroupUpdateDescription) toInnerStruct() *innerFabricServiceGroupUpdateDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceGroupUpdateDescription{*obj, nil}
}

type FabricKeyValueStoreItemMetadata struct {
	Key                      string
	ValueSizeInBytes         int32
	SequenceNumber           int64
	LastModifiedUtc          time.Time
	LastModifiedOnPrimaryUtc time.Time
}

func (obj *FabricKeyValueStoreItemMetadata) toInnerStruct() *innerFabricKeyValueStoreItemMetadata {
	if obj == nil {
		return nil
	}
	dst := &innerFabricKeyValueStoreItemMetadata{}
	dst.Key = utf16PtrFromString(obj.Key)
	dst.ValueSizeInBytes = obj.ValueSizeInBytes
	dst.SequenceNumber = obj.SequenceNumber
	dst.LastModifiedUtc = timeToFiletime(obj.LastModifiedUtc)
	ex0 := dst
	ex1 := &innerFabricKeyValueStoreItemMetadataEx1{}
	ex1.LastModifiedOnPrimaryUtc = timeToFiletime(obj.LastModifiedOnPrimaryUtc)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricKeyValueStoreItemMetadata struct {
	Key              *uint16
	ValueSizeInBytes int32
	SequenceNumber   int64
	LastModifiedUtc  filetime
	Reserved         unsafe.Pointer
}
type innerFabricKeyValueStoreItemMetadataEx1 struct {
	LastModifiedOnPrimaryUtc filetime
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreItemMetadata) toGoStruct() (dst *FabricKeyValueStoreItemMetadata) {
	if obj == nil {
		return
	}
	dst = &FabricKeyValueStoreItemMetadata{}
	dst.Key = utf16PtrToString(obj.Key)
	dst.ValueSizeInBytes = obj.ValueSizeInBytes
	dst.SequenceNumber = obj.SequenceNumber
	dst.LastModifiedUtc = obj.LastModifiedUtc.ToTime()
	ex0 := obj
	ex1 := (*innerFabricKeyValueStoreItemMetadataEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.LastModifiedOnPrimaryUtc = ex1.LastModifiedOnPrimaryUtc.ToTime()
	return
}

type FabricKeyValueStoreItem struct {
	Metadata *FabricKeyValueStoreItemMetadata
	Value    *byte
}
type innerFabricKeyValueStoreItem struct {
	FabricKeyValueStoreItem
	Reserved unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreItem) toGoStruct() *FabricKeyValueStoreItem {
	if obj == nil {
		return nil
	}
	return &obj.FabricKeyValueStoreItem
}
func (obj *FabricKeyValueStoreItem) toInnerStruct() *innerFabricKeyValueStoreItem {
	if obj == nil {
		return nil
	}
	return &innerFabricKeyValueStoreItem{*obj, nil}
}

type FabricKeyValueStoreTransactionSettings struct {
	SerializationBlockSize uint32
}
type innerFabricKeyValueStoreTransactionSettings struct {
	FabricKeyValueStoreTransactionSettings
	Reserved unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreTransactionSettings) toGoStruct() *FabricKeyValueStoreTransactionSettings {
	if obj == nil {
		return nil
	}
	return &obj.FabricKeyValueStoreTransactionSettings
}
func (obj *FabricKeyValueStoreTransactionSettings) toInnerStruct() *innerFabricKeyValueStoreTransactionSettings {
	if obj == nil {
		return nil
	}
	return &innerFabricKeyValueStoreTransactionSettings{*obj, nil}
}

type FabricKeyValueStoreRestoreSettings struct {
	InlineReopen   bool
	EnableLsnCheck bool
}

func (obj *FabricKeyValueStoreRestoreSettings) toInnerStruct() *innerFabricKeyValueStoreRestoreSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricKeyValueStoreRestoreSettings{}
	dst.InlineReopen = obj.InlineReopen
	ex0 := dst
	ex1 := &innerFabricKeyValueStoreRestoreSettingsEx1{}
	ex1.EnableLsnCheck = obj.EnableLsnCheck
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricKeyValueStoreRestoreSettings struct {
	InlineReopen bool
	Reserved     unsafe.Pointer
}
type innerFabricKeyValueStoreRestoreSettingsEx1 struct {
	EnableLsnCheck bool
	Reserved       unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreRestoreSettings) toGoStruct() (dst *FabricKeyValueStoreRestoreSettings) {
	if obj == nil {
		return
	}
	dst = &FabricKeyValueStoreRestoreSettings{}
	dst.InlineReopen = obj.InlineReopen
	ex0 := obj
	ex1 := (*innerFabricKeyValueStoreRestoreSettingsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.EnableLsnCheck = ex1.EnableLsnCheck
	return
}

type FabricKeyValueStoreReplicaSettings struct {
	TransactionDrainTimeoutInSeconds uint32
	SecondaryNotificationMode        FabricKeyValueStoreNotificationMode
	EnableCopyNotificationPrefetch   bool
	FullCopyMode                     FabricKeyValueStoreFullCopyMode
	LogTruncationIntervalInMinutes   int32
}

func (obj *FabricKeyValueStoreReplicaSettings) toInnerStruct() *innerFabricKeyValueStoreReplicaSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricKeyValueStoreReplicaSettings{}
	dst.TransactionDrainTimeoutInSeconds = obj.TransactionDrainTimeoutInSeconds
	dst.SecondaryNotificationMode = obj.SecondaryNotificationMode
	ex0 := dst
	ex1 := &innerFabricKeyValueStoreReplicaSettingsEx1{}
	ex1.EnableCopyNotificationPrefetch = obj.EnableCopyNotificationPrefetch
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricKeyValueStoreReplicaSettingsEx2{}
	ex2.FullCopyMode = obj.FullCopyMode
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricKeyValueStoreReplicaSettingsEx3{}
	ex3.LogTruncationIntervalInMinutes = obj.LogTruncationIntervalInMinutes
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricKeyValueStoreReplicaSettings struct {
	TransactionDrainTimeoutInSeconds uint32
	SecondaryNotificationMode        FabricKeyValueStoreNotificationMode
	Reserved                         unsafe.Pointer
}
type innerFabricKeyValueStoreReplicaSettingsEx1 struct {
	EnableCopyNotificationPrefetch bool
	Reserved                       unsafe.Pointer
}
type innerFabricKeyValueStoreReplicaSettingsEx2 struct {
	FullCopyMode FabricKeyValueStoreFullCopyMode
	Reserved     unsafe.Pointer
}
type innerFabricKeyValueStoreReplicaSettingsEx3 struct {
	LogTruncationIntervalInMinutes int32
	Reserved                       unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreReplicaSettings) toGoStruct() (dst *FabricKeyValueStoreReplicaSettings) {
	if obj == nil {
		return
	}
	dst = &FabricKeyValueStoreReplicaSettings{}
	dst.TransactionDrainTimeoutInSeconds = obj.TransactionDrainTimeoutInSeconds
	dst.SecondaryNotificationMode = obj.SecondaryNotificationMode
	ex0 := obj
	ex1 := (*innerFabricKeyValueStoreReplicaSettingsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.EnableCopyNotificationPrefetch = ex1.EnableCopyNotificationPrefetch
	ex2 := (*innerFabricKeyValueStoreReplicaSettingsEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.FullCopyMode = ex2.FullCopyMode
	ex3 := (*innerFabricKeyValueStoreReplicaSettingsEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.LogTruncationIntervalInMinutes = ex3.LogTruncationIntervalInMinutes
	return
}

type FabricEseLocalStoreSettings struct {
	DbFolderPath                      string
	LogFileSizeInKB                   int32
	LogBufferSizeInKB                 int32
	MaxCursors                        int32
	MaxVerPages                       int32
	MaxAsyncCommitDelayInMilliseconds int32
	EnableIncrementalBackup           bool
	MaxCacheSizeInMB                  int32
	MaxDefragFrequencyInMinutes       int32
	DefragThresholdInMB               int32
	DatabasePageSizeInKB              int32
	CompactionThresholdInMB           int32
	IntrinsicValueThresholdInBytes    int32
	EnableOverwriteOnUpdate           bool
}

func (obj *FabricEseLocalStoreSettings) toInnerStruct() *innerFabricEseLocalStoreSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricEseLocalStoreSettings{}
	dst.DbFolderPath = utf16PtrFromString(obj.DbFolderPath)
	dst.LogFileSizeInKB = obj.LogFileSizeInKB
	dst.LogBufferSizeInKB = obj.LogBufferSizeInKB
	dst.MaxCursors = obj.MaxCursors
	dst.MaxVerPages = obj.MaxVerPages
	dst.MaxAsyncCommitDelayInMilliseconds = obj.MaxAsyncCommitDelayInMilliseconds
	ex0 := dst
	ex1 := &innerFabricEseLocalStoreSettingsEx1{}
	ex1.EnableIncrementalBackup = obj.EnableIncrementalBackup
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricEseLocalStoreSettingsEx2{}
	ex2.MaxCacheSizeInMB = obj.MaxCacheSizeInMB
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricEseLocalStoreSettingsEx3{}
	ex3.MaxDefragFrequencyInMinutes = obj.MaxDefragFrequencyInMinutes
	ex3.DefragThresholdInMB = obj.DefragThresholdInMB
	ex3.DatabasePageSizeInKB = obj.DatabasePageSizeInKB
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricEseLocalStoreSettingsEx4{}
	ex4.CompactionThresholdInMB = obj.CompactionThresholdInMB
	ex3.Reserved = unsafe.Pointer(ex4)
	ex5 := &innerFabricEseLocalStoreSettingsEx5{}
	ex5.IntrinsicValueThresholdInBytes = obj.IntrinsicValueThresholdInBytes
	ex4.Reserved = unsafe.Pointer(ex5)
	ex6 := &innerFabricEseLocalStoreSettingsEx6{}
	ex6.EnableOverwriteOnUpdate = obj.EnableOverwriteOnUpdate
	ex5.Reserved = unsafe.Pointer(ex6)
	return dst
}

type innerFabricEseLocalStoreSettings struct {
	DbFolderPath                      *uint16
	LogFileSizeInKB                   int32
	LogBufferSizeInKB                 int32
	MaxCursors                        int32
	MaxVerPages                       int32
	MaxAsyncCommitDelayInMilliseconds int32
	Reserved                          unsafe.Pointer
}
type innerFabricEseLocalStoreSettingsEx1 struct {
	EnableIncrementalBackup bool
	Reserved                unsafe.Pointer
}
type innerFabricEseLocalStoreSettingsEx2 struct {
	MaxCacheSizeInMB int32
	Reserved         unsafe.Pointer
}
type innerFabricEseLocalStoreSettingsEx3 struct {
	MaxDefragFrequencyInMinutes int32
	DefragThresholdInMB         int32
	DatabasePageSizeInKB        int32
	Reserved                    unsafe.Pointer
}
type innerFabricEseLocalStoreSettingsEx4 struct {
	CompactionThresholdInMB int32
	Reserved                unsafe.Pointer
}
type innerFabricEseLocalStoreSettingsEx5 struct {
	IntrinsicValueThresholdInBytes int32
	Reserved                       unsafe.Pointer
}
type innerFabricEseLocalStoreSettingsEx6 struct {
	EnableOverwriteOnUpdate bool
	Reserved                unsafe.Pointer
}

func (obj *innerFabricEseLocalStoreSettings) toGoStruct() (dst *FabricEseLocalStoreSettings) {
	if obj == nil {
		return
	}
	dst = &FabricEseLocalStoreSettings{}
	dst.DbFolderPath = utf16PtrToString(obj.DbFolderPath)
	dst.LogFileSizeInKB = obj.LogFileSizeInKB
	dst.LogBufferSizeInKB = obj.LogBufferSizeInKB
	dst.MaxCursors = obj.MaxCursors
	dst.MaxVerPages = obj.MaxVerPages
	dst.MaxAsyncCommitDelayInMilliseconds = obj.MaxAsyncCommitDelayInMilliseconds
	ex0 := obj
	ex1 := (*innerFabricEseLocalStoreSettingsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.EnableIncrementalBackup = ex1.EnableIncrementalBackup
	ex2 := (*innerFabricEseLocalStoreSettingsEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.MaxCacheSizeInMB = ex2.MaxCacheSizeInMB
	ex3 := (*innerFabricEseLocalStoreSettingsEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.MaxDefragFrequencyInMinutes = ex3.MaxDefragFrequencyInMinutes
	dst.DefragThresholdInMB = ex3.DefragThresholdInMB
	dst.DatabasePageSizeInKB = ex3.DatabasePageSizeInKB
	ex4 := (*innerFabricEseLocalStoreSettingsEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	dst.CompactionThresholdInMB = ex4.CompactionThresholdInMB
	ex5 := (*innerFabricEseLocalStoreSettingsEx5)(ex4.Reserved)
	if ex5 == nil {
		return
	}
	dst.IntrinsicValueThresholdInBytes = ex5.IntrinsicValueThresholdInBytes
	ex6 := (*innerFabricEseLocalStoreSettingsEx6)(ex5.Reserved)
	if ex6 == nil {
		return
	}
	dst.EnableOverwriteOnUpdate = ex6.EnableOverwriteOnUpdate
	return
}

type FabricNodeContext struct {
	NodeName        string
	NodeType        string
	IPAddressOrFQDN string
	NodeInstanceId  uint64
	NodeId          FabricNodeId
}

func (obj *FabricNodeContext) toInnerStruct() *innerFabricNodeContext {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeContext{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeType = utf16PtrFromString(obj.NodeType)
	dst.IPAddressOrFQDN = utf16PtrFromString(obj.IPAddressOrFQDN)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.NodeId = *obj.NodeId.toInnerStruct()
	return dst
}

type innerFabricNodeContext struct {
	NodeName        *uint16
	NodeType        *uint16
	IPAddressOrFQDN *uint16
	NodeInstanceId  uint64
	NodeId          innerFabricNodeId
	Reserved        unsafe.Pointer
}

func (obj *innerFabricNodeContext) toGoStruct() (dst *FabricNodeContext) {
	if obj == nil {
		return
	}
	dst = &FabricNodeContext{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeType = utf16PtrToString(obj.NodeType)
	dst.IPAddressOrFQDN = utf16PtrToString(obj.IPAddressOrFQDN)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.NodeId = *obj.NodeId.toGoStruct()
	return
}

type FabricClientSettings struct {
	PartitionLocationCacheLimit                   uint32
	ServiceChangePollIntervalInSeconds            uint32
	ConnectionInitializationTimeoutInSeconds      uint32
	KeepAliveIntervalInSeconds                    uint32
	HealthOperationTimeoutInSeconds               uint32
	HealthReportSendIntervalInSeconds             uint32
	ClientFriendlyName                            string
	PartitionLocationCacheBucketCount             uint32
	HealthReportRetrySendIntervalInSeconds        uint32
	NotificationGatewayConnectionTimeoutInSeconds uint32
	NotificationCacheUpdateTimeoutInSeconds       uint32
	AuthTokenBufferSize                           uint32
	ConnectionIdleTimeoutInSeconds                uint32
}

func (obj *FabricClientSettings) toInnerStruct() *innerFabricClientSettings {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClientSettings{}
	dst.PartitionLocationCacheLimit = obj.PartitionLocationCacheLimit
	dst.ServiceChangePollIntervalInSeconds = obj.ServiceChangePollIntervalInSeconds
	dst.ConnectionInitializationTimeoutInSeconds = obj.ConnectionInitializationTimeoutInSeconds
	dst.KeepAliveIntervalInSeconds = obj.KeepAliveIntervalInSeconds
	dst.HealthOperationTimeoutInSeconds = obj.HealthOperationTimeoutInSeconds
	dst.HealthReportSendIntervalInSeconds = obj.HealthReportSendIntervalInSeconds
	ex0 := dst
	ex1 := &innerFabricClientSettingsEx1{}
	ex1.ClientFriendlyName = utf16PtrFromString(obj.ClientFriendlyName)
	ex1.PartitionLocationCacheBucketCount = obj.PartitionLocationCacheBucketCount
	ex1.HealthReportRetrySendIntervalInSeconds = obj.HealthReportRetrySendIntervalInSeconds
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricClientSettingsEx2{}
	ex2.NotificationGatewayConnectionTimeoutInSeconds = obj.NotificationGatewayConnectionTimeoutInSeconds
	ex2.NotificationCacheUpdateTimeoutInSeconds = obj.NotificationCacheUpdateTimeoutInSeconds
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricClientSettingsEx3{}
	ex3.AuthTokenBufferSize = obj.AuthTokenBufferSize
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricClientSettingsEx4{}
	ex4.ConnectionIdleTimeoutInSeconds = obj.ConnectionIdleTimeoutInSeconds
	ex3.Reserved = unsafe.Pointer(ex4)
	return dst
}

type innerFabricClientSettings struct {
	PartitionLocationCacheLimit              uint32
	ServiceChangePollIntervalInSeconds       uint32
	ConnectionInitializationTimeoutInSeconds uint32
	KeepAliveIntervalInSeconds               uint32
	HealthOperationTimeoutInSeconds          uint32
	HealthReportSendIntervalInSeconds        uint32
	Reserved                                 unsafe.Pointer
}
type innerFabricClientSettingsEx1 struct {
	ClientFriendlyName                     *uint16
	PartitionLocationCacheBucketCount      uint32
	HealthReportRetrySendIntervalInSeconds uint32
	Reserved                               unsafe.Pointer
}
type innerFabricClientSettingsEx2 struct {
	NotificationGatewayConnectionTimeoutInSeconds uint32
	NotificationCacheUpdateTimeoutInSeconds       uint32
	Reserved                                      unsafe.Pointer
}
type innerFabricClientSettingsEx3 struct {
	AuthTokenBufferSize uint32
	Reserved            unsafe.Pointer
}
type innerFabricClientSettingsEx4 struct {
	ConnectionIdleTimeoutInSeconds uint32
	Reserved                       unsafe.Pointer
}

func (obj *innerFabricClientSettings) toGoStruct() (dst *FabricClientSettings) {
	if obj == nil {
		return
	}
	dst = &FabricClientSettings{}
	dst.PartitionLocationCacheLimit = obj.PartitionLocationCacheLimit
	dst.ServiceChangePollIntervalInSeconds = obj.ServiceChangePollIntervalInSeconds
	dst.ConnectionInitializationTimeoutInSeconds = obj.ConnectionInitializationTimeoutInSeconds
	dst.KeepAliveIntervalInSeconds = obj.KeepAliveIntervalInSeconds
	dst.HealthOperationTimeoutInSeconds = obj.HealthOperationTimeoutInSeconds
	dst.HealthReportSendIntervalInSeconds = obj.HealthReportSendIntervalInSeconds
	ex0 := obj
	ex1 := (*innerFabricClientSettingsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ClientFriendlyName = utf16PtrToString(ex1.ClientFriendlyName)
	dst.PartitionLocationCacheBucketCount = ex1.PartitionLocationCacheBucketCount
	dst.HealthReportRetrySendIntervalInSeconds = ex1.HealthReportRetrySendIntervalInSeconds
	ex2 := (*innerFabricClientSettingsEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.NotificationGatewayConnectionTimeoutInSeconds = ex2.NotificationGatewayConnectionTimeoutInSeconds
	dst.NotificationCacheUpdateTimeoutInSeconds = ex2.NotificationCacheUpdateTimeoutInSeconds
	ex3 := (*innerFabricClientSettingsEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.AuthTokenBufferSize = ex3.AuthTokenBufferSize
	ex4 := (*innerFabricClientSettingsEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	dst.ConnectionIdleTimeoutInSeconds = ex4.ConnectionIdleTimeoutInSeconds
	return
}

type FabricQueryPagingDescription struct {
	ContinuationToken string
	MaxResults        int32
}

func (obj *FabricQueryPagingDescription) toInnerStruct() *innerFabricQueryPagingDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricQueryPagingDescription{}
	dst.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	dst.MaxResults = obj.MaxResults
	return dst
}

type innerFabricQueryPagingDescription struct {
	ContinuationToken *uint16
	MaxResults        int32
	Reserved          unsafe.Pointer
}

func (obj *innerFabricQueryPagingDescription) toGoStruct() (dst *FabricQueryPagingDescription) {
	if obj == nil {
		return
	}
	dst = &FabricQueryPagingDescription{}
	dst.ContinuationToken = utf16PtrToString(obj.ContinuationToken)
	dst.MaxResults = obj.MaxResults
	return
}

type FabricClusterManifestQueryDescription struct {
	ClusterManifestVersion string
}

func (obj *FabricClusterManifestQueryDescription) toInnerStruct() *innerFabricClusterManifestQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterManifestQueryDescription{}
	dst.ClusterManifestVersion = utf16PtrFromString(obj.ClusterManifestVersion)
	return dst
}

type innerFabricClusterManifestQueryDescription struct {
	ClusterManifestVersion *uint16
	Reserved               unsafe.Pointer
}

func (obj *innerFabricClusterManifestQueryDescription) toGoStruct() (dst *FabricClusterManifestQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricClusterManifestQueryDescription{}
	dst.ClusterManifestVersion = utf16PtrToString(obj.ClusterManifestVersion)
	return
}

type FabricNodeQueryDescription struct {
	NodeNameFilter    string
	ContinuationToken string
	NodeStatusFilter  uint32
	MaxResults        int32
}

func (obj *FabricNodeQueryDescription) toInnerStruct() *innerFabricNodeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeQueryDescription{}
	dst.NodeNameFilter = utf16PtrFromString(obj.NodeNameFilter)
	ex0 := dst
	ex1 := &innerFabricNodeQueryDescriptionEx1{}
	ex1.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricNodeQueryDescriptionEx2{}
	ex2.NodeStatusFilter = obj.NodeStatusFilter
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricNodeQueryDescriptionEx3{}
	ex3.MaxResults = obj.MaxResults
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricNodeQueryDescription struct {
	NodeNameFilter *uint16
	Reserved       unsafe.Pointer
}
type innerFabricNodeQueryDescriptionEx1 struct {
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}
type innerFabricNodeQueryDescriptionEx2 struct {
	NodeStatusFilter uint32
	Reserved         unsafe.Pointer
}
type innerFabricNodeQueryDescriptionEx3 struct {
	MaxResults int32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricNodeQueryDescription) toGoStruct() (dst *FabricNodeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNodeQueryDescription{}
	dst.NodeNameFilter = utf16PtrToString(obj.NodeNameFilter)
	ex0 := obj
	ex1 := (*innerFabricNodeQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ContinuationToken = utf16PtrToString(ex1.ContinuationToken)
	ex2 := (*innerFabricNodeQueryDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.NodeStatusFilter = ex2.NodeStatusFilter
	ex3 := (*innerFabricNodeQueryDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.MaxResults = ex3.MaxResults
	return
}

type FabricNodeQueryResultItem struct {
	NodeName              string
	IpAddressOrFQDN       string
	NodeType              string
	CodeVersion           string
	ConfigVersion         string
	NodeStatus            FabricQueryNodeStatus
	NodeUpTimeInSeconds   int64
	AggregatedHealthState FabricHealthState
	IsSeedNode            bool
	UpgradeDomain         string
	FaultDomain           string
	NodeId                FabricNodeId
	NodeInstanceId        uint64
	NodeDeactivationInfo  *FabricNodeDeactivationQueryResultItem
	IsStopped             bool
	NodeDownTimeInSeconds int64
	NodeUpAt              time.Time
	NodeDownAt            time.Time
}

func (obj *FabricNodeQueryResultItem) toInnerStruct() *innerFabricNodeQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeQueryResultItem{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.IpAddressOrFQDN = utf16PtrFromString(obj.IpAddressOrFQDN)
	dst.NodeType = utf16PtrFromString(obj.NodeType)
	dst.CodeVersion = utf16PtrFromString(obj.CodeVersion)
	dst.ConfigVersion = utf16PtrFromString(obj.ConfigVersion)
	dst.NodeStatus = obj.NodeStatus
	dst.NodeUpTimeInSeconds = obj.NodeUpTimeInSeconds
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.IsSeedNode = obj.IsSeedNode
	dst.UpgradeDomain = utf16PtrFromString(obj.UpgradeDomain)
	dst.FaultDomain = utf16PtrFromString(obj.FaultDomain)
	ex0 := dst
	ex1 := &innerFabricNodeQueryResultItemEx1{}
	ex1.NodeId = *obj.NodeId.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricNodeQueryResultItemEx2{}
	ex2.NodeInstanceId = obj.NodeInstanceId
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricNodeQueryResultItemEx3{}
	ex3.NodeDeactivationInfo = obj.NodeDeactivationInfo.toInnerStruct()
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricNodeQueryResultItemEx4{}
	ex4.IsStopped = obj.IsStopped
	ex3.Reserved = unsafe.Pointer(ex4)
	ex5 := &innerFabricNodeQueryResultItemEx5{}
	ex5.NodeDownTimeInSeconds = obj.NodeDownTimeInSeconds
	ex4.Reserved = unsafe.Pointer(ex5)
	ex6 := &innerFabricNodeQueryResultItemEx6{}
	ex6.NodeUpAt = timeToFiletime(obj.NodeUpAt)
	ex6.NodeDownAt = timeToFiletime(obj.NodeDownAt)
	ex5.Reserved = unsafe.Pointer(ex6)
	return dst
}

type innerFabricNodeQueryResultItem struct {
	NodeName              *uint16
	IpAddressOrFQDN       *uint16
	NodeType              *uint16
	CodeVersion           *uint16
	ConfigVersion         *uint16
	NodeStatus            FabricQueryNodeStatus
	NodeUpTimeInSeconds   int64
	AggregatedHealthState FabricHealthState
	IsSeedNode            bool
	UpgradeDomain         *uint16
	FaultDomain           *uint16
	Reserved              unsafe.Pointer
}
type innerFabricNodeQueryResultItemEx1 struct {
	NodeId   innerFabricNodeId
	Reserved unsafe.Pointer
}
type innerFabricNodeQueryResultItemEx2 struct {
	NodeInstanceId uint64
	Reserved       unsafe.Pointer
}
type innerFabricNodeQueryResultItemEx3 struct {
	NodeDeactivationInfo *innerFabricNodeDeactivationQueryResultItem
	Reserved             unsafe.Pointer
}
type innerFabricNodeQueryResultItemEx4 struct {
	IsStopped bool
	Reserved  unsafe.Pointer
}
type innerFabricNodeQueryResultItemEx5 struct {
	NodeDownTimeInSeconds int64
	Reserved              unsafe.Pointer
}
type innerFabricNodeQueryResultItemEx6 struct {
	NodeUpAt   filetime
	NodeDownAt filetime
	Reserved   unsafe.Pointer
}

func (obj *innerFabricNodeQueryResultItem) toGoStruct() (dst *FabricNodeQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricNodeQueryResultItem{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.IpAddressOrFQDN = utf16PtrToString(obj.IpAddressOrFQDN)
	dst.NodeType = utf16PtrToString(obj.NodeType)
	dst.CodeVersion = utf16PtrToString(obj.CodeVersion)
	dst.ConfigVersion = utf16PtrToString(obj.ConfigVersion)
	dst.NodeStatus = obj.NodeStatus
	dst.NodeUpTimeInSeconds = obj.NodeUpTimeInSeconds
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.IsSeedNode = obj.IsSeedNode
	dst.UpgradeDomain = utf16PtrToString(obj.UpgradeDomain)
	dst.FaultDomain = utf16PtrToString(obj.FaultDomain)
	ex0 := obj
	ex1 := (*innerFabricNodeQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.NodeId = *ex1.NodeId.toGoStruct()
	ex2 := (*innerFabricNodeQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.NodeInstanceId = ex2.NodeInstanceId
	ex3 := (*innerFabricNodeQueryResultItemEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.NodeDeactivationInfo = ex3.NodeDeactivationInfo.toGoStruct()
	ex4 := (*innerFabricNodeQueryResultItemEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	dst.IsStopped = ex4.IsStopped
	ex5 := (*innerFabricNodeQueryResultItemEx5)(ex4.Reserved)
	if ex5 == nil {
		return
	}
	dst.NodeDownTimeInSeconds = ex5.NodeDownTimeInSeconds
	ex6 := (*innerFabricNodeQueryResultItemEx6)(ex5.Reserved)
	if ex6 == nil {
		return
	}
	dst.NodeUpAt = ex6.NodeUpAt.ToTime()
	dst.NodeDownAt = ex6.NodeDownAt.ToTime()
	return
}

type FabricNodeDeactivationTaskId struct {
	Id   string
	Type FabricNodeDeactivationTaskType
}

func (obj *FabricNodeDeactivationTaskId) toInnerStruct() *innerFabricNodeDeactivationTaskId {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeDeactivationTaskId{}
	dst.Id = utf16PtrFromString(obj.Id)
	dst.Type = obj.Type
	return dst
}

type innerFabricNodeDeactivationTaskId struct {
	Id       *uint16
	Type     FabricNodeDeactivationTaskType
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeDeactivationTaskId) toGoStruct() (dst *FabricNodeDeactivationTaskId) {
	if obj == nil {
		return
	}
	dst = &FabricNodeDeactivationTaskId{}
	dst.Id = utf16PtrToString(obj.Id)
	dst.Type = obj.Type
	return
}

type FabricNodeDeactivationTask struct {
	TaskId *FabricNodeDeactivationTaskId
	Intent FabricNodeDeactivationIntent
}
type innerFabricNodeDeactivationTask struct {
	FabricNodeDeactivationTask
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeDeactivationTask) toGoStruct() *FabricNodeDeactivationTask {
	if obj == nil {
		return nil
	}
	return &obj.FabricNodeDeactivationTask
}
func (obj *FabricNodeDeactivationTask) toInnerStruct() *innerFabricNodeDeactivationTask {
	if obj == nil {
		return nil
	}
	return &innerFabricNodeDeactivationTask{*obj, nil}
}

type innerFabricNodeDeactivationTaskList struct {
	Count uint32
	Items *innerFabricNodeDeactivationTask
}

func (obj *innerFabricNodeDeactivationTaskList) toGoStruct() []FabricNodeDeactivationTask {
	var dst []FabricNodeDeactivationTask
	{
		var innerlst []innerFabricNodeDeactivationTask
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeDeactivationTask

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricNodeDeactivationQueryResultItem struct {
	EffectiveIntent     FabricNodeDeactivationIntent
	Status              FabricNodeDeactivationStatus
	Tasks               []FabricNodeDeactivationTask
	PendingSafetyChecks []FabricSafetyCheck
}

func (obj *FabricNodeDeactivationQueryResultItem) toInnerStruct() *innerFabricNodeDeactivationQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeDeactivationQueryResultItem{}
	dst.EffectiveIntent = obj.EffectiveIntent
	dst.Status = obj.Status
	lst_25 := &innerFabricNodeDeactivationTaskList{}
	{

		var tmp []innerFabricNodeDeactivationTask

		for _, item := range obj.Tasks {
			var tmpitem innerFabricNodeDeactivationTask

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_25.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_25.Items = &tmp[0]
		}

	}
	dst.Tasks = lst_25
	ex0 := dst
	ex1 := &innerFabricNodeDeactivationQueryResultItemEx1{}
	lst_26 := &innerFabricSafetyCheckList{}
	{

		var tmp []innerFabricSafetyCheck

		for _, item := range obj.PendingSafetyChecks {
			var tmpitem innerFabricSafetyCheck

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_26.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_26.Items = &tmp[0]
		}

	}
	ex1.PendingSafetyChecks = lst_26
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricNodeDeactivationQueryResultItem struct {
	EffectiveIntent FabricNodeDeactivationIntent
	Status          FabricNodeDeactivationStatus
	Tasks           *innerFabricNodeDeactivationTaskList
	Reserved        unsafe.Pointer
}
type innerFabricNodeDeactivationQueryResultItemEx1 struct {
	PendingSafetyChecks *innerFabricSafetyCheckList
	Reserved            unsafe.Pointer
}

func (obj *innerFabricNodeDeactivationQueryResultItem) toGoStruct() (dst *FabricNodeDeactivationQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricNodeDeactivationQueryResultItem{}
	dst.EffectiveIntent = obj.EffectiveIntent
	dst.Status = obj.Status
	{
		var innerlst []innerFabricNodeDeactivationTask
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Tasks.Items), int(obj.Tasks.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeDeactivationTask

			tmpitem = *item.toGoStruct()

			dst.Tasks = append(dst.Tasks, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricNodeDeactivationQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricSafetyCheck
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.PendingSafetyChecks.Items), int(ex1.PendingSafetyChecks.Count))

		for _, item := range innerlst {
			var tmpitem FabricSafetyCheck

			tmpitem = *item.toGoStruct()

			dst.PendingSafetyChecks = append(dst.PendingSafetyChecks, tmpitem)
		}

	}
	return
}

type FabricSafetyCheck struct {
	Kind  FabricSafetyCheckKind
	Value interface{}
}

func (obj *FabricSafetyCheck) toInnerStruct() *innerFabricSafetyCheck {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSafetyCheck{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricSafetyCheck struct {
	Kind  FabricSafetyCheckKind
	Value unsafe.Pointer
}

func (obj *innerFabricSafetyCheck) toGoStruct() (dst *FabricSafetyCheck) {
	if obj == nil {
		return
	}
	dst = &FabricSafetyCheck{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricPartitionSafetyCheck struct {
	PartitionId uuid.UUID
}
type innerFabricPartitionSafetyCheck struct {
	FabricPartitionSafetyCheck
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionSafetyCheck) toGoStruct() *FabricPartitionSafetyCheck {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionSafetyCheck
}
func (obj *FabricPartitionSafetyCheck) toInnerStruct() *innerFabricPartitionSafetyCheck {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionSafetyCheck{*obj, nil}
}

type FabricSeedNodeSafetyCheck struct {
}
type innerFabricSeedNodeSafetyCheck struct {
	FabricSeedNodeSafetyCheck
	Reserved unsafe.Pointer
}

func (obj *innerFabricSeedNodeSafetyCheck) toGoStruct() *FabricSeedNodeSafetyCheck {
	if obj == nil {
		return nil
	}
	return &obj.FabricSeedNodeSafetyCheck
}
func (obj *FabricSeedNodeSafetyCheck) toInnerStruct() *innerFabricSeedNodeSafetyCheck {
	if obj == nil {
		return nil
	}
	return &innerFabricSeedNodeSafetyCheck{*obj, nil}
}

type innerFabricSafetyCheckList struct {
	Count uint32
	Items *innerFabricSafetyCheck
}

func (obj *innerFabricSafetyCheckList) toGoStruct() []FabricSafetyCheck {
	var dst []FabricSafetyCheck
	{
		var innerlst []innerFabricSafetyCheck
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricSafetyCheck

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type innerFabricNodeQueryResultList struct {
	Count uint32
	Items *innerFabricNodeQueryResultItem
}

func (obj *innerFabricNodeQueryResultList) toGoStruct() []FabricNodeQueryResultItem {
	var dst []FabricNodeQueryResultItem
	{
		var innerlst []innerFabricNodeQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationTypeQueryDescription struct {
	ApplicationTypeNameFilter string
}

func (obj *FabricApplicationTypeQueryDescription) toInnerStruct() *innerFabricApplicationTypeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationTypeQueryDescription{}
	dst.ApplicationTypeNameFilter = utf16PtrFromString(obj.ApplicationTypeNameFilter)
	return dst
}

type innerFabricApplicationTypeQueryDescription struct {
	ApplicationTypeNameFilter *uint16
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricApplicationTypeQueryDescription) toGoStruct() (dst *FabricApplicationTypeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationTypeQueryDescription{}
	dst.ApplicationTypeNameFilter = utf16PtrToString(obj.ApplicationTypeNameFilter)
	return
}

type PagedFabricApplicationTypeQueryDescription struct {
	ApplicationTypeNameFilter           string
	MaxResults                          int32
	ContinuationToken                   string
	ExcludeApplicationParameters        bool
	ApplicationTypeVersionFilter        string
	ApplicationTypeDefinitionKindFilter uint32
}

func (obj *PagedFabricApplicationTypeQueryDescription) toInnerStruct() *innerPagedFabricApplicationTypeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerPagedFabricApplicationTypeQueryDescription{}
	dst.ApplicationTypeNameFilter = utf16PtrFromString(obj.ApplicationTypeNameFilter)
	dst.MaxResults = obj.MaxResults
	dst.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	dst.ExcludeApplicationParameters = obj.ExcludeApplicationParameters
	ex0 := dst
	ex1 := &innerPagedFabricApplicationTypeQueryDescriptionEx1{}
	ex1.ApplicationTypeVersionFilter = utf16PtrFromString(obj.ApplicationTypeVersionFilter)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerPagedFabricApplicationTypeQueryDescriptionEx2{}
	ex2.ApplicationTypeDefinitionKindFilter = obj.ApplicationTypeDefinitionKindFilter
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerPagedFabricApplicationTypeQueryDescription struct {
	ApplicationTypeNameFilter    *uint16
	MaxResults                   int32
	ContinuationToken            *uint16
	ExcludeApplicationParameters bool
	Reserved                     unsafe.Pointer
}
type innerPagedFabricApplicationTypeQueryDescriptionEx1 struct {
	ApplicationTypeVersionFilter *uint16
	Reserved                     unsafe.Pointer
}
type innerPagedFabricApplicationTypeQueryDescriptionEx2 struct {
	ApplicationTypeDefinitionKindFilter uint32
	Reserved                            unsafe.Pointer
}

func (obj *innerPagedFabricApplicationTypeQueryDescription) toGoStruct() (dst *PagedFabricApplicationTypeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &PagedFabricApplicationTypeQueryDescription{}
	dst.ApplicationTypeNameFilter = utf16PtrToString(obj.ApplicationTypeNameFilter)
	dst.MaxResults = obj.MaxResults
	dst.ContinuationToken = utf16PtrToString(obj.ContinuationToken)
	dst.ExcludeApplicationParameters = obj.ExcludeApplicationParameters
	ex0 := obj
	ex1 := (*innerPagedFabricApplicationTypeQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ApplicationTypeVersionFilter = utf16PtrToString(ex1.ApplicationTypeVersionFilter)
	ex2 := (*innerPagedFabricApplicationTypeQueryDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ApplicationTypeDefinitionKindFilter = ex2.ApplicationTypeDefinitionKindFilter
	return
}

type FabricApplicationTypeQueryResultItem struct {
	ApplicationTypeName           string
	ApplicationTypeVersion        string
	DefaultParameters             []FabricApplicationParameter
	Status                        FabricApplicationTypeStatus
	StatusDetails                 string
	ApplicationTypeDefinitionKind FabricApplicationTypeDefinitionKind
}

func (obj *FabricApplicationTypeQueryResultItem) toInnerStruct() *innerFabricApplicationTypeQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationTypeQueryResultItem{}
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	lst_27 := &innerFabricApplicationParameterList{}
	{

		var tmp []innerFabricApplicationParameter

		for _, item := range obj.DefaultParameters {
			var tmpitem innerFabricApplicationParameter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_27.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_27.Items = &tmp[0]
		}

	}
	dst.DefaultParameters = lst_27
	ex0 := dst
	ex1 := &innerFabricApplicationTypeQueryResultItemEx1{}
	ex1.Status = obj.Status
	ex1.StatusDetails = utf16PtrFromString(obj.StatusDetails)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricApplicationTypeQueryResultItemEx2{}
	ex2.ApplicationTypeDefinitionKind = obj.ApplicationTypeDefinitionKind
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricApplicationTypeQueryResultItem struct {
	ApplicationTypeName    *uint16
	ApplicationTypeVersion *uint16
	DefaultParameters      *innerFabricApplicationParameterList
	Reserved               unsafe.Pointer
}
type innerFabricApplicationTypeQueryResultItemEx1 struct {
	Status        FabricApplicationTypeStatus
	StatusDetails *uint16
	Reserved      unsafe.Pointer
}
type innerFabricApplicationTypeQueryResultItemEx2 struct {
	ApplicationTypeDefinitionKind FabricApplicationTypeDefinitionKind
	Reserved                      unsafe.Pointer
}

func (obj *innerFabricApplicationTypeQueryResultItem) toGoStruct() (dst *FabricApplicationTypeQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationTypeQueryResultItem{}
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	{
		var innerlst []innerFabricApplicationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DefaultParameters.Items), int(obj.DefaultParameters.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationParameter

			tmpitem = *item.toGoStruct()

			dst.DefaultParameters = append(dst.DefaultParameters, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricApplicationTypeQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.Status = ex1.Status
	dst.StatusDetails = utf16PtrToString(ex1.StatusDetails)
	ex2 := (*innerFabricApplicationTypeQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ApplicationTypeDefinitionKind = ex2.ApplicationTypeDefinitionKind
	return
}

type innerFabricApplicationTypeQueryResultList struct {
	Count uint32
	Items *innerFabricApplicationTypeQueryResultItem
}

func (obj *innerFabricApplicationTypeQueryResultList) toGoStruct() []FabricApplicationTypeQueryResultItem {
	var dst []FabricApplicationTypeQueryResultItem
	{
		var innerlst []innerFabricApplicationTypeQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceTypeQueryDescription struct {
	ApplicationTypeName    string
	ApplicationTypeVersion string
	ServiceTypeNameFilter  string
}

func (obj *FabricServiceTypeQueryDescription) toInnerStruct() *innerFabricServiceTypeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceTypeQueryDescription{}
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	dst.ServiceTypeNameFilter = utf16PtrFromString(obj.ServiceTypeNameFilter)
	return dst
}

type innerFabricServiceTypeQueryDescription struct {
	ApplicationTypeName    *uint16
	ApplicationTypeVersion *uint16
	ServiceTypeNameFilter  *uint16
	Reserved               unsafe.Pointer
}

func (obj *innerFabricServiceTypeQueryDescription) toGoStruct() (dst *FabricServiceTypeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceTypeQueryDescription{}
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	dst.ServiceTypeNameFilter = utf16PtrToString(obj.ServiceTypeNameFilter)
	return
}

type FabricServiceGroupMemberTypeQueryDescription struct {
	ApplicationTypeName        string
	ApplicationTypeVersion     string
	ServiceGroupTypeNameFilter string
}

func (obj *FabricServiceGroupMemberTypeQueryDescription) toInnerStruct() *innerFabricServiceGroupMemberTypeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupMemberTypeQueryDescription{}
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	dst.ServiceGroupTypeNameFilter = utf16PtrFromString(obj.ServiceGroupTypeNameFilter)
	return dst
}

type innerFabricServiceGroupMemberTypeQueryDescription struct {
	ApplicationTypeName        *uint16
	ApplicationTypeVersion     *uint16
	ServiceGroupTypeNameFilter *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricServiceGroupMemberTypeQueryDescription) toGoStruct() (dst *FabricServiceGroupMemberTypeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupMemberTypeQueryDescription{}
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	dst.ServiceGroupTypeNameFilter = utf16PtrToString(obj.ServiceGroupTypeNameFilter)
	return
}

type FabricServiceTypeQueryResultItem struct {
	ServiceTypeDescription *FabricServiceTypeDescription
	ServiceManifestVersion string
	ServiceManifestName    string
	IsServiceGroup         bool
}

func (obj *FabricServiceTypeQueryResultItem) toInnerStruct() *innerFabricServiceTypeQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceTypeQueryResultItem{}
	dst.ServiceTypeDescription = obj.ServiceTypeDescription.toInnerStruct()
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	ex0 := dst
	ex1 := &innerFabricServiceTypeQueryResultItemEx1{}
	ex1.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricServiceTypeQueryResultItemEx2{}
	ex2.IsServiceGroup = obj.IsServiceGroup
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricServiceTypeQueryResultItem struct {
	ServiceTypeDescription *innerFabricServiceTypeDescription
	ServiceManifestVersion *uint16
	Reserved               unsafe.Pointer
}
type innerFabricServiceTypeQueryResultItemEx1 struct {
	ServiceManifestName *uint16
	Reserved            unsafe.Pointer
}
type innerFabricServiceTypeQueryResultItemEx2 struct {
	IsServiceGroup bool
	Reserved       unsafe.Pointer
}

func (obj *innerFabricServiceTypeQueryResultItem) toGoStruct() (dst *FabricServiceTypeQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceTypeQueryResultItem{}
	dst.ServiceTypeDescription = obj.ServiceTypeDescription.toGoStruct()
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	ex0 := obj
	ex1 := (*innerFabricServiceTypeQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServiceManifestName = utf16PtrToString(ex1.ServiceManifestName)
	ex2 := (*innerFabricServiceTypeQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.IsServiceGroup = ex2.IsServiceGroup
	return
}

type innerFabricServiceTypeQueryResultList struct {
	Count uint32
	Items *innerFabricServiceTypeQueryResultItem
}

func (obj *innerFabricServiceTypeQueryResultList) toGoStruct() []FabricServiceTypeQueryResultItem {
	var dst []FabricServiceTypeQueryResultItem
	{
		var innerlst []innerFabricServiceTypeQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceGroupMemberTypeQueryResultItem struct {
	ServiceGroupMemberTypeDescription []FabricServiceGroupTypeMemberDescription
	ServiceManifestVersion            string
	ServiceManifestName               string
}

func (obj *FabricServiceGroupMemberTypeQueryResultItem) toInnerStruct() *innerFabricServiceGroupMemberTypeQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupMemberTypeQueryResultItem{}
	lst_28 := &innerFabricServiceGroupTypeMemberDescriptionList{}
	{

		var tmp []innerFabricServiceGroupTypeMemberDescription

		for _, item := range obj.ServiceGroupMemberTypeDescription {
			var tmpitem innerFabricServiceGroupTypeMemberDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_28.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_28.Items = &tmp[0]
		}

	}
	dst.ServiceGroupMemberTypeDescription = lst_28
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	return dst
}

type innerFabricServiceGroupMemberTypeQueryResultItem struct {
	ServiceGroupMemberTypeDescription *innerFabricServiceGroupTypeMemberDescriptionList
	ServiceManifestVersion            *uint16
	ServiceManifestName               *uint16
	Reserved                          unsafe.Pointer
}

func (obj *innerFabricServiceGroupMemberTypeQueryResultItem) toGoStruct() (dst *FabricServiceGroupMemberTypeQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupMemberTypeQueryResultItem{}
	{
		var innerlst []innerFabricServiceGroupTypeMemberDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ServiceGroupMemberTypeDescription.Items), int(obj.ServiceGroupMemberTypeDescription.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupTypeMemberDescription

			tmpitem = *item.toGoStruct()

			dst.ServiceGroupMemberTypeDescription = append(dst.ServiceGroupMemberTypeDescription, tmpitem)
		}

	}
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	return
}

type innerFabricServiceGroupMemberTypeQueryResultList struct {
	Count uint32
	Items *innerFabricServiceGroupMemberTypeQueryResultItem
}

func (obj *innerFabricServiceGroupMemberTypeQueryResultList) toGoStruct() []FabricServiceGroupMemberTypeQueryResultItem {
	var dst []FabricServiceGroupMemberTypeQueryResultItem
	{
		var innerlst []innerFabricServiceGroupMemberTypeQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupMemberTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationQueryDescription struct {
	ApplicationNameFilter           string
	ContinuationToken               string
	ApplicationTypeNameFilter       string
	ExcludeApplicationParameters    bool
	ApplicationDefinitionKindFilter uint32
	MaxResults                      int32
}

func (obj *FabricApplicationQueryDescription) toInnerStruct() *innerFabricApplicationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationQueryDescription{}
	dst.ApplicationNameFilter = utf16PtrFromString(obj.ApplicationNameFilter)
	ex0 := dst
	ex1 := &innerFabricApplicationQueryDescriptionEx1{}
	ex1.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricApplicationQueryDescriptionEx2{}
	ex2.ApplicationTypeNameFilter = utf16PtrFromString(obj.ApplicationTypeNameFilter)
	ex2.ExcludeApplicationParameters = obj.ExcludeApplicationParameters
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricApplicationQueryDescriptionEx3{}
	ex3.ApplicationDefinitionKindFilter = obj.ApplicationDefinitionKindFilter
	ex2.Reserved = unsafe.Pointer(ex3)
	ex4 := &innerFabricApplicationQueryDescriptionEx4{}
	ex4.MaxResults = obj.MaxResults
	ex3.Reserved = unsafe.Pointer(ex4)
	return dst
}

type innerFabricApplicationQueryDescription struct {
	ApplicationNameFilter *uint16
	Reserved              unsafe.Pointer
}
type innerFabricApplicationQueryDescriptionEx1 struct {
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}
type innerFabricApplicationQueryDescriptionEx2 struct {
	ApplicationTypeNameFilter    *uint16
	ExcludeApplicationParameters bool
	Reserved                     unsafe.Pointer
}
type innerFabricApplicationQueryDescriptionEx3 struct {
	ApplicationDefinitionKindFilter uint32
	Reserved                        unsafe.Pointer
}
type innerFabricApplicationQueryDescriptionEx4 struct {
	MaxResults int32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricApplicationQueryDescription) toGoStruct() (dst *FabricApplicationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationQueryDescription{}
	dst.ApplicationNameFilter = utf16PtrToString(obj.ApplicationNameFilter)
	ex0 := obj
	ex1 := (*innerFabricApplicationQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ContinuationToken = utf16PtrToString(ex1.ContinuationToken)
	ex2 := (*innerFabricApplicationQueryDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ApplicationTypeNameFilter = utf16PtrToString(ex2.ApplicationTypeNameFilter)
	dst.ExcludeApplicationParameters = ex2.ExcludeApplicationParameters
	ex3 := (*innerFabricApplicationQueryDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.ApplicationDefinitionKindFilter = ex3.ApplicationDefinitionKindFilter
	ex4 := (*innerFabricApplicationQueryDescriptionEx4)(ex3.Reserved)
	if ex4 == nil {
		return
	}
	dst.MaxResults = ex4.MaxResults
	return
}

type FabricApplicationQueryResultItem struct {
	ApplicationName           string
	ApplicationTypeName       string
	ApplicationTypeVersion    string
	Status                    FabricApplicationStatus
	HealthState               FabricHealthState
	ApplicationParameters     []FabricApplicationParameter
	UpgradeTypeVersion        string
	UpgradeParameters         []FabricApplicationParameter
	ApplicationDefinitionKind FabricApplicationDefinitionKind
}

func (obj *FabricApplicationQueryResultItem) toInnerStruct() *innerFabricApplicationQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationQueryResultItem{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	dst.Status = obj.Status
	dst.HealthState = obj.HealthState
	lst_29 := &innerFabricApplicationParameterList{}
	{

		var tmp []innerFabricApplicationParameter

		for _, item := range obj.ApplicationParameters {
			var tmpitem innerFabricApplicationParameter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_29.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_29.Items = &tmp[0]
		}

	}
	dst.ApplicationParameters = lst_29
	ex0 := dst
	ex1 := &innerFabricApplicationQueryResultItemEx1{}
	ex1.UpgradeTypeVersion = utf16PtrFromString(obj.UpgradeTypeVersion)
	lst_30 := &innerFabricApplicationParameterList{}
	{

		var tmp []innerFabricApplicationParameter

		for _, item := range obj.UpgradeParameters {
			var tmpitem innerFabricApplicationParameter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_30.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_30.Items = &tmp[0]
		}

	}
	ex1.UpgradeParameters = lst_30
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricApplicationQueryResultItemEx2{}
	ex2.ApplicationDefinitionKind = obj.ApplicationDefinitionKind
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricApplicationQueryResultItem struct {
	ApplicationName        *uint16
	ApplicationTypeName    *uint16
	ApplicationTypeVersion *uint16
	Status                 FabricApplicationStatus
	HealthState            FabricHealthState
	ApplicationParameters  *innerFabricApplicationParameterList
	Reserved               unsafe.Pointer
}
type innerFabricApplicationQueryResultItemEx1 struct {
	UpgradeTypeVersion *uint16
	UpgradeParameters  *innerFabricApplicationParameterList
	Reserved           unsafe.Pointer
}
type innerFabricApplicationQueryResultItemEx2 struct {
	ApplicationDefinitionKind FabricApplicationDefinitionKind
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricApplicationQueryResultItem) toGoStruct() (dst *FabricApplicationQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationQueryResultItem{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	dst.Status = obj.Status
	dst.HealthState = obj.HealthState
	{
		var innerlst []innerFabricApplicationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationParameters.Items), int(obj.ApplicationParameters.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationParameter

			tmpitem = *item.toGoStruct()

			dst.ApplicationParameters = append(dst.ApplicationParameters, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricApplicationQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.UpgradeTypeVersion = utf16PtrToString(ex1.UpgradeTypeVersion)
	{
		var innerlst []innerFabricApplicationParameter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UpgradeParameters.Items), int(ex1.UpgradeParameters.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationParameter

			tmpitem = *item.toGoStruct()

			dst.UpgradeParameters = append(dst.UpgradeParameters, tmpitem)
		}

	}
	ex2 := (*innerFabricApplicationQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ApplicationDefinitionKind = ex2.ApplicationDefinitionKind
	return
}

type innerFabricApplicationQueryResultList struct {
	Count uint32
	Items *innerFabricApplicationQueryResultItem
}

func (obj *innerFabricApplicationQueryResultList) toGoStruct() []FabricApplicationQueryResultItem {
	var dst []FabricApplicationQueryResultItem
	{
		var innerlst []innerFabricApplicationQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceQueryDescription struct {
	ApplicationName       string
	ServiceNameFilter     string
	ContinuationToken     string
	ServiceTypeNameFilter string
	MaxResults            int32
}

func (obj *FabricServiceQueryDescription) toInnerStruct() *innerFabricServiceQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceNameFilter = utf16PtrFromString(obj.ServiceNameFilter)
	ex0 := dst
	ex1 := &innerFabricServiceQueryDescriptionEx1{}
	ex1.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricServiceQueryDescriptionEx2{}
	ex2.ServiceTypeNameFilter = utf16PtrFromString(obj.ServiceTypeNameFilter)
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricServiceQueryDescriptionEx3{}
	ex3.MaxResults = obj.MaxResults
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricServiceQueryDescription struct {
	ApplicationName   *uint16
	ServiceNameFilter *uint16
	Reserved          unsafe.Pointer
}
type innerFabricServiceQueryDescriptionEx1 struct {
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}
type innerFabricServiceQueryDescriptionEx2 struct {
	ServiceTypeNameFilter *uint16
	Reserved              unsafe.Pointer
}
type innerFabricServiceQueryDescriptionEx3 struct {
	MaxResults int32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricServiceQueryDescription) toGoStruct() (dst *FabricServiceQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceNameFilter = utf16PtrToString(obj.ServiceNameFilter)
	ex0 := obj
	ex1 := (*innerFabricServiceQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ContinuationToken = utf16PtrToString(ex1.ContinuationToken)
	ex2 := (*innerFabricServiceQueryDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ServiceTypeNameFilter = utf16PtrToString(ex2.ServiceTypeNameFilter)
	ex3 := (*innerFabricServiceQueryDescriptionEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.MaxResults = ex3.MaxResults
	return
}

type FabricSystemServiceQueryDescription struct {
	SystemServiceNameFilter string
}

func (obj *FabricSystemServiceQueryDescription) toInnerStruct() *innerFabricSystemServiceQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSystemServiceQueryDescription{}
	dst.SystemServiceNameFilter = utf16PtrFromString(obj.SystemServiceNameFilter)
	return dst
}

type innerFabricSystemServiceQueryDescription struct {
	SystemServiceNameFilter *uint16
	Reserved                unsafe.Pointer
}

func (obj *innerFabricSystemServiceQueryDescription) toGoStruct() (dst *FabricSystemServiceQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricSystemServiceQueryDescription{}
	dst.SystemServiceNameFilter = utf16PtrToString(obj.SystemServiceNameFilter)
	return
}

type FabricServiceQueryResultItem struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricServiceQueryResultItem) toInnerStruct() *innerFabricServiceQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServiceQueryResultItem struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricServiceQueryResultItem) toGoStruct() (dst *FabricServiceQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricServiceQueryResultList struct {
	Count uint32
	Items *innerFabricServiceQueryResultItem
}

func (obj *innerFabricServiceQueryResultList) toGoStruct() []FabricServiceQueryResultItem {
	var dst []FabricServiceQueryResultItem
	{
		var innerlst []innerFabricServiceQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricStatelessServiceQueryResultItem struct {
	ServiceName            string
	ServiceTypeName        string
	ServiceManifestVersion string
	HealthState            FabricHealthState
	ServiceStatus          FabricQueryServiceStatus
	IsServiceGroup         bool
}

func (obj *FabricStatelessServiceQueryResultItem) toInnerStruct() *innerFabricStatelessServiceQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.HealthState = obj.HealthState
	ex0 := dst
	ex1 := &innerFabricStatelessServiceQueryResultItemEx1{}
	ex1.ServiceStatus = obj.ServiceStatus
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricStatelessServiceQueryResultItemEx2{}
	ex2.IsServiceGroup = obj.IsServiceGroup
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricStatelessServiceQueryResultItem struct {
	ServiceName            *uint16
	ServiceTypeName        *uint16
	ServiceManifestVersion *uint16
	HealthState            FabricHealthState
	Reserved               unsafe.Pointer
}
type innerFabricStatelessServiceQueryResultItemEx1 struct {
	ServiceStatus FabricQueryServiceStatus
	Reserved      unsafe.Pointer
}
type innerFabricStatelessServiceQueryResultItemEx2 struct {
	IsServiceGroup bool
	Reserved       unsafe.Pointer
}

func (obj *innerFabricStatelessServiceQueryResultItem) toGoStruct() (dst *FabricStatelessServiceQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.HealthState = obj.HealthState
	ex0 := obj
	ex1 := (*innerFabricStatelessServiceQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServiceStatus = ex1.ServiceStatus
	ex2 := (*innerFabricStatelessServiceQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.IsServiceGroup = ex2.IsServiceGroup
	return
}

type FabricStatefulServiceQueryResultItem struct {
	ServiceName            string
	ServiceTypeName        string
	ServiceManifestVersion string
	HasPersistedState      bool
	HealthState            FabricHealthState
	ServiceStatus          FabricQueryServiceStatus
	IsServiceGroup         bool
}

func (obj *FabricStatefulServiceQueryResultItem) toInnerStruct() *innerFabricStatefulServiceQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.HasPersistedState = obj.HasPersistedState
	dst.HealthState = obj.HealthState
	ex0 := dst
	ex1 := &innerFabricStatefulServiceQueryResultItemEx1{}
	ex1.ServiceStatus = obj.ServiceStatus
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricStatefulServiceQueryResultItemEx2{}
	ex2.IsServiceGroup = obj.IsServiceGroup
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricStatefulServiceQueryResultItem struct {
	ServiceName            *uint16
	ServiceTypeName        *uint16
	ServiceManifestVersion *uint16
	HasPersistedState      bool
	HealthState            FabricHealthState
	Reserved               unsafe.Pointer
}
type innerFabricStatefulServiceQueryResultItemEx1 struct {
	ServiceStatus FabricQueryServiceStatus
	Reserved      unsafe.Pointer
}
type innerFabricStatefulServiceQueryResultItemEx2 struct {
	IsServiceGroup bool
	Reserved       unsafe.Pointer
}

func (obj *innerFabricStatefulServiceQueryResultItem) toGoStruct() (dst *FabricStatefulServiceQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.HasPersistedState = obj.HasPersistedState
	dst.HealthState = obj.HealthState
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServiceStatus = ex1.ServiceStatus
	ex2 := (*innerFabricStatefulServiceQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.IsServiceGroup = ex2.IsServiceGroup
	return
}

type FabricServiceGroupMemberQueryDescription struct {
	ApplicationName   string
	ServiceNameFilter string
}

func (obj *FabricServiceGroupMemberQueryDescription) toInnerStruct() *innerFabricServiceGroupMemberQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupMemberQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceNameFilter = utf16PtrFromString(obj.ServiceNameFilter)
	return dst
}

type innerFabricServiceGroupMemberQueryDescription struct {
	ApplicationName   *uint16
	ServiceNameFilter *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricServiceGroupMemberQueryDescription) toGoStruct() (dst *FabricServiceGroupMemberQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupMemberQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceNameFilter = utf16PtrToString(obj.ServiceNameFilter)
	return
}

type FabricServiceGroupMemberMemberQueryResultItem struct {
	ServiceType string
	ServiceName string
}

func (obj *FabricServiceGroupMemberMemberQueryResultItem) toInnerStruct() *innerFabricServiceGroupMemberMemberQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupMemberMemberQueryResultItem{}
	dst.ServiceType = utf16PtrFromString(obj.ServiceType)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	return dst
}

type innerFabricServiceGroupMemberMemberQueryResultItem struct {
	ServiceType *uint16
	ServiceName *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricServiceGroupMemberMemberQueryResultItem) toGoStruct() (dst *FabricServiceGroupMemberMemberQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupMemberMemberQueryResultItem{}
	dst.ServiceType = utf16PtrToString(obj.ServiceType)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	return
}

type innerFabricServiceGroupMemberMemberQueryResultList struct {
	Count uint32
	Items *innerFabricServiceGroupMemberMemberQueryResultItem
}

func (obj *innerFabricServiceGroupMemberMemberQueryResultList) toGoStruct() []FabricServiceGroupMemberMemberQueryResultItem {
	var dst []FabricServiceGroupMemberMemberQueryResultItem
	{
		var innerlst []innerFabricServiceGroupMemberMemberQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupMemberMemberQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceGroupMemberQueryResultItem struct {
	ServiceName string
	Members     []FabricServiceGroupMemberMemberQueryResultItem
}

func (obj *FabricServiceGroupMemberQueryResultItem) toInnerStruct() *innerFabricServiceGroupMemberQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceGroupMemberQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	lst_31 := &innerFabricServiceGroupMemberMemberQueryResultList{}
	{

		var tmp []innerFabricServiceGroupMemberMemberQueryResultItem

		for _, item := range obj.Members {
			var tmpitem innerFabricServiceGroupMemberMemberQueryResultItem

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_31.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_31.Items = &tmp[0]
		}

	}
	dst.Members = lst_31
	return dst
}

type innerFabricServiceGroupMemberQueryResultItem struct {
	ServiceName *uint16
	Members     *innerFabricServiceGroupMemberMemberQueryResultList
	Reserved    unsafe.Pointer
}

func (obj *innerFabricServiceGroupMemberQueryResultItem) toGoStruct() (dst *FabricServiceGroupMemberQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceGroupMemberQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	{
		var innerlst []innerFabricServiceGroupMemberMemberQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Members.Items), int(obj.Members.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupMemberMemberQueryResultItem

			tmpitem = *item.toGoStruct()

			dst.Members = append(dst.Members, tmpitem)
		}

	}
	return
}

type innerFabricServiceGroupMemberQueryResultList struct {
	Count uint32
	Items *innerFabricServiceGroupMemberQueryResultItem
}

func (obj *innerFabricServiceGroupMemberQueryResultList) toGoStruct() []FabricServiceGroupMemberQueryResultItem {
	var dst []FabricServiceGroupMemberQueryResultItem
	{
		var innerlst []innerFabricServiceGroupMemberQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupMemberQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricPartitionLoadInformationQueryDescription struct {
	PartitionId uuid.UUID
}
type innerFabricPartitionLoadInformationQueryDescription struct {
	FabricPartitionLoadInformationQueryDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionLoadInformationQueryDescription) toGoStruct() *FabricPartitionLoadInformationQueryDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionLoadInformationQueryDescription
}
func (obj *FabricPartitionLoadInformationQueryDescription) toInnerStruct() *innerFabricPartitionLoadInformationQueryDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionLoadInformationQueryDescription{*obj, nil}
}

type FabricReplicaLoadInformationQueryDescription struct {
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
}
type innerFabricReplicaLoadInformationQueryDescription struct {
	FabricReplicaLoadInformationQueryDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaLoadInformationQueryDescription) toGoStruct() *FabricReplicaLoadInformationQueryDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicaLoadInformationQueryDescription
}
func (obj *FabricReplicaLoadInformationQueryDescription) toInnerStruct() *innerFabricReplicaLoadInformationQueryDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicaLoadInformationQueryDescription{*obj, nil}
}

type FabricUnplacedReplicaInformationQueryDescription struct {
	ServiceName        string
	PartitionId        uuid.UUID
	OnlyQueryPrimaries bool
}

func (obj *FabricUnplacedReplicaInformationQueryDescription) toInnerStruct() *innerFabricUnplacedReplicaInformationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUnplacedReplicaInformationQueryDescription{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.OnlyQueryPrimaries = obj.OnlyQueryPrimaries
	return dst
}

type innerFabricUnplacedReplicaInformationQueryDescription struct {
	ServiceName        *uint16
	PartitionId        uuid.UUID
	OnlyQueryPrimaries bool
	Reserved           unsafe.Pointer
}

func (obj *innerFabricUnplacedReplicaInformationQueryDescription) toGoStruct() (dst *FabricUnplacedReplicaInformationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricUnplacedReplicaInformationQueryDescription{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.OnlyQueryPrimaries = obj.OnlyQueryPrimaries
	return
}

type FabricServicePartitionQueryDescription struct {
	ServiceName       string
	PartitionIdFilter uuid.UUID
	ContinuationToken string
}

func (obj *FabricServicePartitionQueryDescription) toInnerStruct() *innerFabricServicePartitionQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServicePartitionQueryDescription{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionIdFilter = obj.PartitionIdFilter
	ex0 := dst
	ex1 := &innerFabricServicePartitionQueryDescriptionEx1{}
	ex1.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricServicePartitionQueryDescription struct {
	ServiceName       *uint16
	PartitionIdFilter uuid.UUID
	Reserved          unsafe.Pointer
}
type innerFabricServicePartitionQueryDescriptionEx1 struct {
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricServicePartitionQueryDescription) toGoStruct() (dst *FabricServicePartitionQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServicePartitionQueryDescription{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionIdFilter = obj.PartitionIdFilter
	ex0 := obj
	ex1 := (*innerFabricServicePartitionQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ContinuationToken = utf16PtrToString(ex1.ContinuationToken)
	return
}

type FabricNodeLoadInformationQueryDescription struct {
	NodeName string
}

func (obj *FabricNodeLoadInformationQueryDescription) toInnerStruct() *innerFabricNodeLoadInformationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeLoadInformationQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	return dst
}

type innerFabricNodeLoadInformationQueryDescription struct {
	NodeName *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeLoadInformationQueryDescription) toGoStruct() (dst *FabricNodeLoadInformationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNodeLoadInformationQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	return
}

type FabricApplicationLoadInformationQueryDescription struct {
	ApplicationName string
}

func (obj *FabricApplicationLoadInformationQueryDescription) toInnerStruct() *innerFabricApplicationLoadInformationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationLoadInformationQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	return dst
}

type innerFabricApplicationLoadInformationQueryDescription struct {
	ApplicationName *uint16
	Reserved        unsafe.Pointer
}

func (obj *innerFabricApplicationLoadInformationQueryDescription) toGoStruct() (dst *FabricApplicationLoadInformationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationLoadInformationQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	return
}

type FabricServicePartitionQueryResultItem struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricServicePartitionQueryResultItem) toInnerStruct() *innerFabricServicePartitionQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServicePartitionQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServicePartitionQueryResultItem struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricServicePartitionQueryResultItem) toGoStruct() (dst *FabricServicePartitionQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServicePartitionQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricServicePartitionQueryResultList struct {
	Count uint32
	Items *innerFabricServicePartitionQueryResultItem
}

func (obj *innerFabricServicePartitionQueryResultList) toGoStruct() []FabricServicePartitionQueryResultItem {
	var dst []FabricServicePartitionQueryResultItem
	{
		var innerlst []innerFabricServicePartitionQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServicePartitionQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricStatelessServicePartitionQueryResultItem struct {
	PartitionInformation *FabricServicePartitionInformation
	InstanceCount        uint32
	HealthState          FabricHealthState
	PartitionStatus      FabricQueryServicePartitionStatus
}
type innerFabricStatelessServicePartitionQueryResultItem struct {
	FabricStatelessServicePartitionQueryResultItem
	Reserved unsafe.Pointer
}

func (obj *innerFabricStatelessServicePartitionQueryResultItem) toGoStruct() *FabricStatelessServicePartitionQueryResultItem {
	if obj == nil {
		return nil
	}
	return &obj.FabricStatelessServicePartitionQueryResultItem
}
func (obj *FabricStatelessServicePartitionQueryResultItem) toInnerStruct() *innerFabricStatelessServicePartitionQueryResultItem {
	if obj == nil {
		return nil
	}
	return &innerFabricStatelessServicePartitionQueryResultItem{*obj, nil}
}

type FabricStatefulServicePartitionQueryResultItem struct {
	PartitionInformation            *FabricServicePartitionInformation
	TargetReplicaSetSize            uint32
	MinReplicaSetSize               uint32
	HealthState                     FabricHealthState
	PartitionStatus                 FabricQueryServicePartitionStatus
	LastQuorumLossDurationInSeconds int64
	PrimaryEpoch                    FabricEpoch
}

func (obj *FabricStatefulServicePartitionQueryResultItem) toInnerStruct() *innerFabricStatefulServicePartitionQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServicePartitionQueryResultItem{}
	dst.PartitionInformation = obj.PartitionInformation.toInnerStruct()
	dst.TargetReplicaSetSize = obj.TargetReplicaSetSize
	dst.MinReplicaSetSize = obj.MinReplicaSetSize
	dst.HealthState = obj.HealthState
	dst.PartitionStatus = obj.PartitionStatus
	dst.LastQuorumLossDurationInSeconds = obj.LastQuorumLossDurationInSeconds
	ex0 := dst
	ex1 := &innerFabricStatefulServicePartitionQueryResultItemEx1{}
	ex1.PrimaryEpoch = *obj.PrimaryEpoch.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatefulServicePartitionQueryResultItem struct {
	PartitionInformation            *innerFabricServicePartitionInformation
	TargetReplicaSetSize            uint32
	MinReplicaSetSize               uint32
	HealthState                     FabricHealthState
	PartitionStatus                 FabricQueryServicePartitionStatus
	LastQuorumLossDurationInSeconds int64
	Reserved                        unsafe.Pointer
}
type innerFabricStatefulServicePartitionQueryResultItemEx1 struct {
	PrimaryEpoch innerFabricEpoch
	Reserved     unsafe.Pointer
}

func (obj *innerFabricStatefulServicePartitionQueryResultItem) toGoStruct() (dst *FabricStatefulServicePartitionQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServicePartitionQueryResultItem{}
	dst.PartitionInformation = obj.PartitionInformation.toGoStruct()
	dst.TargetReplicaSetSize = obj.TargetReplicaSetSize
	dst.MinReplicaSetSize = obj.MinReplicaSetSize
	dst.HealthState = obj.HealthState
	dst.PartitionStatus = obj.PartitionStatus
	dst.LastQuorumLossDurationInSeconds = obj.LastQuorumLossDurationInSeconds
	ex0 := obj
	ex1 := (*innerFabricStatefulServicePartitionQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.PrimaryEpoch = *ex1.PrimaryEpoch.toGoStruct()
	return
}

type FabricServiceReplicaQueryDescription struct {
	PartitionId                 uuid.UUID
	ReplicaIdOrInstanceIdFilter int64
	ReplicaStatusFilter         uint32
	ContinuationToken           string
}

func (obj *FabricServiceReplicaQueryDescription) toInnerStruct() *innerFabricServiceReplicaQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceReplicaQueryDescription{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaIdOrInstanceIdFilter = obj.ReplicaIdOrInstanceIdFilter
	ex0 := dst
	ex1 := &innerFabricServiceReplicaQueryDescriptionEx1{}
	ex1.ReplicaStatusFilter = obj.ReplicaStatusFilter
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricServiceReplicaQueryDescriptionEx2{}
	ex2.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricServiceReplicaQueryDescription struct {
	PartitionId                 uuid.UUID
	ReplicaIdOrInstanceIdFilter int64
	Reserved                    unsafe.Pointer
}
type innerFabricServiceReplicaQueryDescriptionEx1 struct {
	ReplicaStatusFilter uint32
	Reserved            unsafe.Pointer
}
type innerFabricServiceReplicaQueryDescriptionEx2 struct {
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricServiceReplicaQueryDescription) toGoStruct() (dst *FabricServiceReplicaQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceReplicaQueryDescription{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaIdOrInstanceIdFilter = obj.ReplicaIdOrInstanceIdFilter
	ex0 := obj
	ex1 := (*innerFabricServiceReplicaQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ReplicaStatusFilter = ex1.ReplicaStatusFilter
	ex2 := (*innerFabricServiceReplicaQueryDescriptionEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ContinuationToken = utf16PtrToString(ex2.ContinuationToken)
	return
}

type FabricServiceReplicaQueryResultItem struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricServiceReplicaQueryResultItem) toInnerStruct() *innerFabricServiceReplicaQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceReplicaQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricServiceReplicaQueryResultItem struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricServiceReplicaQueryResultItem) toGoStruct() (dst *FabricServiceReplicaQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceReplicaQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricServiceReplicaQueryResultList struct {
	Count uint32
	Items *innerFabricServiceReplicaQueryResultItem
}

func (obj *innerFabricServiceReplicaQueryResultList) toGoStruct() []FabricServiceReplicaQueryResultItem {
	var dst []FabricServiceReplicaQueryResultItem
	{
		var innerlst []innerFabricServiceReplicaQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceReplicaQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricStatefulServiceReplicaQueryResultItem struct {
	ReplicaId                    int64
	ReplicaRole                  FabricReplicaRole
	ReplicaStatus                FabricQueryServiceReplicaStatus
	AggregatedHealthState        FabricHealthState
	ReplicaAddress               string
	NodeName                     string
	LastInBuildDurationInSeconds int64
}

func (obj *FabricStatefulServiceReplicaQueryResultItem) toInnerStruct() *innerFabricStatefulServiceReplicaQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceReplicaQueryResultItem{}
	dst.ReplicaId = obj.ReplicaId
	dst.ReplicaRole = obj.ReplicaRole
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ReplicaAddress = utf16PtrFromString(obj.ReplicaAddress)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.LastInBuildDurationInSeconds = obj.LastInBuildDurationInSeconds
	return dst
}

type innerFabricStatefulServiceReplicaQueryResultItem struct {
	ReplicaId                    int64
	ReplicaRole                  FabricReplicaRole
	ReplicaStatus                FabricQueryServiceReplicaStatus
	AggregatedHealthState        FabricHealthState
	ReplicaAddress               *uint16
	NodeName                     *uint16
	LastInBuildDurationInSeconds int64
	Reserved                     unsafe.Pointer
}

func (obj *innerFabricStatefulServiceReplicaQueryResultItem) toGoStruct() (dst *FabricStatefulServiceReplicaQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceReplicaQueryResultItem{}
	dst.ReplicaId = obj.ReplicaId
	dst.ReplicaRole = obj.ReplicaRole
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ReplicaAddress = utf16PtrToString(obj.ReplicaAddress)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.LastInBuildDurationInSeconds = obj.LastInBuildDurationInSeconds
	return
}

type FabricStatelessServiceInstanceQueryResultItem struct {
	InstanceId                   int64
	ReplicaStatus                FabricQueryServiceReplicaStatus
	AggregatedHealthState        FabricHealthState
	ReplicaAddress               string
	NodeName                     string
	LastInBuildDurationInSeconds int64
}

func (obj *FabricStatelessServiceInstanceQueryResultItem) toInnerStruct() *innerFabricStatelessServiceInstanceQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceInstanceQueryResultItem{}
	dst.InstanceId = obj.InstanceId
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ReplicaAddress = utf16PtrFromString(obj.ReplicaAddress)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.LastInBuildDurationInSeconds = obj.LastInBuildDurationInSeconds
	return dst
}

type innerFabricStatelessServiceInstanceQueryResultItem struct {
	InstanceId                   int64
	ReplicaStatus                FabricQueryServiceReplicaStatus
	AggregatedHealthState        FabricHealthState
	ReplicaAddress               *uint16
	NodeName                     *uint16
	LastInBuildDurationInSeconds int64
	Reserved                     unsafe.Pointer
}

func (obj *innerFabricStatelessServiceInstanceQueryResultItem) toGoStruct() (dst *FabricStatelessServiceInstanceQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceInstanceQueryResultItem{}
	dst.InstanceId = obj.InstanceId
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ReplicaAddress = utf16PtrToString(obj.ReplicaAddress)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.LastInBuildDurationInSeconds = obj.LastInBuildDurationInSeconds
	return
}

type FabricDeployedApplicationQueryDescription struct {
	NodeName              string
	ApplicationNameFilter string
}

func (obj *FabricDeployedApplicationQueryDescription) toInnerStruct() *innerFabricDeployedApplicationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationNameFilter = utf16PtrFromString(obj.ApplicationNameFilter)
	return dst
}

type innerFabricDeployedApplicationQueryDescription struct {
	NodeName              *uint16
	ApplicationNameFilter *uint16
	Reserved              unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationQueryDescription) toGoStruct() (dst *FabricDeployedApplicationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationNameFilter = utf16PtrToString(obj.ApplicationNameFilter)
	return
}

type FabricPagedDeployedApplicationQueryDescription struct {
	NodeName              string
	ApplicationNameFilter string
	IncludeHealthState    bool
	PagingDescription     *FabricQueryPagingDescription
}

func (obj *FabricPagedDeployedApplicationQueryDescription) toInnerStruct() *innerFabricPagedDeployedApplicationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPagedDeployedApplicationQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationNameFilter = utf16PtrFromString(obj.ApplicationNameFilter)
	dst.IncludeHealthState = obj.IncludeHealthState
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricPagedDeployedApplicationQueryDescription struct {
	NodeName              *uint16
	ApplicationNameFilter *uint16
	IncludeHealthState    bool
	PagingDescription     *innerFabricQueryPagingDescription
	Reserved              unsafe.Pointer
}

func (obj *innerFabricPagedDeployedApplicationQueryDescription) toGoStruct() (dst *FabricPagedDeployedApplicationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricPagedDeployedApplicationQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationNameFilter = utf16PtrToString(obj.ApplicationNameFilter)
	dst.IncludeHealthState = obj.IncludeHealthState
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricDeployedApplicationQueryResultItem struct {
	ApplicationName           string
	ApplicationTypeName       string
	DeployedApplicationStatus FabricDeploymentStatus
	HealthState               FabricHealthState
}

func (obj *FabricDeployedApplicationQueryResultItem) toInnerStruct() *innerFabricDeployedApplicationQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationQueryResultItem{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.DeployedApplicationStatus = obj.DeployedApplicationStatus
	ex0 := dst
	ex1 := &innerFabricDeployedApplicationQueryResultItemEx2{}
	ex1.HealthState = obj.HealthState
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedApplicationQueryResultItem struct {
	ApplicationName           *uint16
	ApplicationTypeName       *uint16
	DeployedApplicationStatus FabricDeploymentStatus
	Reserved                  unsafe.Pointer
}
type innerFabricDeployedApplicationQueryResultItemEx2 struct {
	HealthState FabricHealthState
	Reserved    unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationQueryResultItem) toGoStruct() (dst *FabricDeployedApplicationQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationQueryResultItem{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.DeployedApplicationStatus = obj.DeployedApplicationStatus
	ex0 := obj
	ex1 := (*innerFabricDeployedApplicationQueryResultItemEx2)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthState = ex1.HealthState
	return
}

type FabricDeployedApplicationQueryResultItemEx struct {
	WorkDirectory string
	LogDirectory  string
	TempDirectory string
}

func (obj *FabricDeployedApplicationQueryResultItemEx) toInnerStruct() *innerFabricDeployedApplicationQueryResultItemEx {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationQueryResultItemEx{}
	dst.WorkDirectory = utf16PtrFromString(obj.WorkDirectory)
	dst.LogDirectory = utf16PtrFromString(obj.LogDirectory)
	dst.TempDirectory = utf16PtrFromString(obj.TempDirectory)
	return dst
}

type innerFabricDeployedApplicationQueryResultItemEx struct {
	WorkDirectory *uint16
	LogDirectory  *uint16
	TempDirectory *uint16
	Reserved      unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationQueryResultItemEx) toGoStruct() (dst *FabricDeployedApplicationQueryResultItemEx) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationQueryResultItemEx{}
	dst.WorkDirectory = utf16PtrToString(obj.WorkDirectory)
	dst.LogDirectory = utf16PtrToString(obj.LogDirectory)
	dst.TempDirectory = utf16PtrToString(obj.TempDirectory)
	return
}

type innerFabricDeployedApplicationQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedApplicationQueryResultItem
}

func (obj *innerFabricDeployedApplicationQueryResultList) toGoStruct() []FabricDeployedApplicationQueryResultItem {
	var dst []FabricDeployedApplicationQueryResultItem
	{
		var innerlst []innerFabricDeployedApplicationQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServicePackageQueryDescription struct {
	NodeName                  string
	ApplicationName           string
	ServiceManifestNameFilter string
}

func (obj *FabricDeployedServicePackageQueryDescription) toInnerStruct() *innerFabricDeployedServicePackageQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrFromString(obj.ServiceManifestNameFilter)
	return dst
}

type innerFabricDeployedServicePackageQueryDescription struct {
	NodeName                  *uint16
	ApplicationName           *uint16
	ServiceManifestNameFilter *uint16
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageQueryDescription) toGoStruct() (dst *FabricDeployedServicePackageQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrToString(obj.ServiceManifestNameFilter)
	return
}

type FabricDeployedServicePackageQueryResultItem struct {
	ServiceManifestName          string
	ServiceManifestVersion       string
	DeployedServicePackageStatus FabricDeploymentStatus
	ServicePackageActivationId   string
}

func (obj *FabricDeployedServicePackageQueryResultItem) toInnerStruct() *innerFabricDeployedServicePackageQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageQueryResultItem{}
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.DeployedServicePackageStatus = obj.DeployedServicePackageStatus
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageQueryResultItemEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageQueryResultItem struct {
	ServiceManifestName          *uint16
	ServiceManifestVersion       *uint16
	DeployedServicePackageStatus FabricDeploymentStatus
	Reserved                     unsafe.Pointer
}
type innerFabricDeployedServicePackageQueryResultItemEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageQueryResultItem) toGoStruct() (dst *FabricDeployedServicePackageQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageQueryResultItem{}
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.DeployedServicePackageStatus = obj.DeployedServicePackageStatus
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type innerFabricDeployedServicePackageQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedServicePackageQueryResultItem
}

func (obj *innerFabricDeployedServicePackageQueryResultList) toGoStruct() []FabricDeployedServicePackageQueryResultItem {
	var dst []FabricDeployedServicePackageQueryResultItem
	{
		var innerlst []innerFabricDeployedServicePackageQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServiceTypeQueryDescription struct {
	NodeName                  string
	ApplicationName           string
	ServiceManifestNameFilter string
	ServiceTypeNameFilter     string
}

func (obj *FabricDeployedServiceTypeQueryDescription) toInnerStruct() *innerFabricDeployedServiceTypeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServiceTypeQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrFromString(obj.ServiceManifestNameFilter)
	dst.ServiceTypeNameFilter = utf16PtrFromString(obj.ServiceTypeNameFilter)
	return dst
}

type innerFabricDeployedServiceTypeQueryDescription struct {
	NodeName                  *uint16
	ApplicationName           *uint16
	ServiceManifestNameFilter *uint16
	ServiceTypeNameFilter     *uint16
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricDeployedServiceTypeQueryDescription) toGoStruct() (dst *FabricDeployedServiceTypeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServiceTypeQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrToString(obj.ServiceManifestNameFilter)
	dst.ServiceTypeNameFilter = utf16PtrToString(obj.ServiceTypeNameFilter)
	return
}

type FabricDeployedServiceTypeQueryResultItem struct {
	ServiceTypeName            string
	CodePackageName            string
	ServiceManifestName        string
	Status                     FabricServiceTypeRegistrationStatus
	ServicePackageActivationId string
}

func (obj *FabricDeployedServiceTypeQueryResultItem) toInnerStruct() *innerFabricDeployedServiceTypeQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServiceTypeQueryResultItem{}
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.Status = obj.Status
	ex0 := dst
	ex1 := &innerFabricDeployedServiceTypeQueryResultItemEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServiceTypeQueryResultItem struct {
	ServiceTypeName     *uint16
	CodePackageName     *uint16
	ServiceManifestName *uint16
	Status              FabricServiceTypeRegistrationStatus
	Reserved            unsafe.Pointer
}
type innerFabricDeployedServiceTypeQueryResultItemEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServiceTypeQueryResultItem) toGoStruct() (dst *FabricDeployedServiceTypeQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServiceTypeQueryResultItem{}
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.Status = obj.Status
	ex0 := obj
	ex1 := (*innerFabricDeployedServiceTypeQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type innerFabricDeployedServiceTypeQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedServiceTypeQueryResultItem
}

func (obj *innerFabricDeployedServiceTypeQueryResultList) toGoStruct() []FabricDeployedServiceTypeQueryResultItem {
	var dst []FabricDeployedServiceTypeQueryResultItem
	{
		var innerlst []innerFabricDeployedServiceTypeQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServiceTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricCodePackageEntryPointStatistics struct {
	LastExitCode                     uint32
	LastActivationUtc                time.Time
	LastExitUtc                      time.Time
	LastSuccessfulActivationUtc      time.Time
	LastSuccessfulExitUtc            time.Time
	ActivationCount                  uint32
	ActivationFailureCount           uint32
	ContinuousActivationFailureCount uint32
	ExitCount                        uint32
	ExitFailureCount                 uint32
	ContinuousExitFailureCount       uint32
}

func (obj *FabricCodePackageEntryPointStatistics) toInnerStruct() *innerFabricCodePackageEntryPointStatistics {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCodePackageEntryPointStatistics{}
	dst.LastExitCode = obj.LastExitCode
	dst.LastActivationUtc = timeToFiletime(obj.LastActivationUtc)
	dst.LastExitUtc = timeToFiletime(obj.LastExitUtc)
	dst.LastSuccessfulActivationUtc = timeToFiletime(obj.LastSuccessfulActivationUtc)
	dst.LastSuccessfulExitUtc = timeToFiletime(obj.LastSuccessfulExitUtc)
	dst.ActivationCount = obj.ActivationCount
	dst.ActivationFailureCount = obj.ActivationFailureCount
	dst.ContinuousActivationFailureCount = obj.ContinuousActivationFailureCount
	dst.ExitCount = obj.ExitCount
	dst.ExitFailureCount = obj.ExitFailureCount
	dst.ContinuousExitFailureCount = obj.ContinuousExitFailureCount
	return dst
}

type innerFabricCodePackageEntryPointStatistics struct {
	LastExitCode                     uint32
	LastActivationUtc                filetime
	LastExitUtc                      filetime
	LastSuccessfulActivationUtc      filetime
	LastSuccessfulExitUtc            filetime
	ActivationCount                  uint32
	ActivationFailureCount           uint32
	ContinuousActivationFailureCount uint32
	ExitCount                        uint32
	ExitFailureCount                 uint32
	ContinuousExitFailureCount       uint32
	Reserved                         unsafe.Pointer
}

func (obj *innerFabricCodePackageEntryPointStatistics) toGoStruct() (dst *FabricCodePackageEntryPointStatistics) {
	if obj == nil {
		return
	}
	dst = &FabricCodePackageEntryPointStatistics{}
	dst.LastExitCode = obj.LastExitCode
	dst.LastActivationUtc = obj.LastActivationUtc.ToTime()
	dst.LastExitUtc = obj.LastExitUtc.ToTime()
	dst.LastSuccessfulActivationUtc = obj.LastSuccessfulActivationUtc.ToTime()
	dst.LastSuccessfulExitUtc = obj.LastSuccessfulExitUtc.ToTime()
	dst.ActivationCount = obj.ActivationCount
	dst.ActivationFailureCount = obj.ActivationFailureCount
	dst.ContinuousActivationFailureCount = obj.ContinuousActivationFailureCount
	dst.ExitCount = obj.ExitCount
	dst.ExitFailureCount = obj.ExitFailureCount
	dst.ContinuousExitFailureCount = obj.ContinuousExitFailureCount
	return
}

type FabricCodePackageEntryPoint struct {
	EntryPointLocation    string
	ProcessId             int64
	RunAsUserName         string
	EntryPointStatus      FabricErrorntryPointStatus
	NextActivationUtc     time.Time
	Statistics            *FabricCodePackageEntryPointStatistics
	CodePackageInstanceId int64
}

func (obj *FabricCodePackageEntryPoint) toInnerStruct() *innerFabricCodePackageEntryPoint {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCodePackageEntryPoint{}
	dst.EntryPointLocation = utf16PtrFromString(obj.EntryPointLocation)
	dst.ProcessId = obj.ProcessId
	dst.RunAsUserName = utf16PtrFromString(obj.RunAsUserName)
	dst.EntryPointStatus = obj.EntryPointStatus
	dst.NextActivationUtc = timeToFiletime(obj.NextActivationUtc)
	dst.Statistics = obj.Statistics.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricCodePackageEntryPointEx1{}
	ex1.CodePackageInstanceId = obj.CodePackageInstanceId
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricCodePackageEntryPoint struct {
	EntryPointLocation *uint16
	ProcessId          int64
	RunAsUserName      *uint16
	EntryPointStatus   FabricErrorntryPointStatus
	NextActivationUtc  filetime
	Statistics         *innerFabricCodePackageEntryPointStatistics
	Reserved           unsafe.Pointer
}
type innerFabricCodePackageEntryPointEx1 struct {
	CodePackageInstanceId int64
	Reserved              unsafe.Pointer
}

func (obj *innerFabricCodePackageEntryPoint) toGoStruct() (dst *FabricCodePackageEntryPoint) {
	if obj == nil {
		return
	}
	dst = &FabricCodePackageEntryPoint{}
	dst.EntryPointLocation = utf16PtrToString(obj.EntryPointLocation)
	dst.ProcessId = obj.ProcessId
	dst.RunAsUserName = utf16PtrToString(obj.RunAsUserName)
	dst.EntryPointStatus = obj.EntryPointStatus
	dst.NextActivationUtc = obj.NextActivationUtc.ToTime()
	dst.Statistics = obj.Statistics.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricCodePackageEntryPointEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.CodePackageInstanceId = ex1.CodePackageInstanceId
	return
}

type FabricDeployedCodePackageQueryDescription struct {
	NodeName                  string
	ApplicationName           string
	ServiceManifestNameFilter string
	CodePackageNameFilter     string
}

func (obj *FabricDeployedCodePackageQueryDescription) toInnerStruct() *innerFabricDeployedCodePackageQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedCodePackageQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrFromString(obj.ServiceManifestNameFilter)
	dst.CodePackageNameFilter = utf16PtrFromString(obj.CodePackageNameFilter)
	return dst
}

type innerFabricDeployedCodePackageQueryDescription struct {
	NodeName                  *uint16
	ApplicationName           *uint16
	ServiceManifestNameFilter *uint16
	CodePackageNameFilter     *uint16
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricDeployedCodePackageQueryDescription) toGoStruct() (dst *FabricDeployedCodePackageQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedCodePackageQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrToString(obj.ServiceManifestNameFilter)
	dst.CodePackageNameFilter = utf16PtrToString(obj.CodePackageNameFilter)
	return
}

type FabricDeployedCodePackageQueryResultItem struct {
	CodePackageName            string
	CodePackageVersion         string
	ServiceManifestName        string
	RunFrequencyInterval       uint32
	DeployedCodePackageStatus  FabricDeploymentStatus
	SetupEntryPoint            *FabricCodePackageEntryPoint
	EntryPoint                 *FabricCodePackageEntryPoint
	ServicePackageActivationId string
	HostType                   FabricHostType
	HostIsolationMode          FabricHostIsolationMode
}

func (obj *FabricDeployedCodePackageQueryResultItem) toInnerStruct() *innerFabricDeployedCodePackageQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedCodePackageQueryResultItem{}
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.CodePackageVersion = utf16PtrFromString(obj.CodePackageVersion)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.RunFrequencyInterval = obj.RunFrequencyInterval
	dst.DeployedCodePackageStatus = obj.DeployedCodePackageStatus
	dst.SetupEntryPoint = obj.SetupEntryPoint.toInnerStruct()
	dst.EntryPoint = obj.EntryPoint.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricDeployedCodePackageQueryResultItemEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex1.HostType = obj.HostType
	ex1.HostIsolationMode = obj.HostIsolationMode
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedCodePackageQueryResultItem struct {
	CodePackageName           *uint16
	CodePackageVersion        *uint16
	ServiceManifestName       *uint16
	RunFrequencyInterval      uint32
	DeployedCodePackageStatus FabricDeploymentStatus
	SetupEntryPoint           *innerFabricCodePackageEntryPoint
	EntryPoint                *innerFabricCodePackageEntryPoint
	Reserved                  unsafe.Pointer
}
type innerFabricDeployedCodePackageQueryResultItemEx1 struct {
	ServicePackageActivationId *uint16
	HostType                   FabricHostType
	HostIsolationMode          FabricHostIsolationMode
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedCodePackageQueryResultItem) toGoStruct() (dst *FabricDeployedCodePackageQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedCodePackageQueryResultItem{}
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.CodePackageVersion = utf16PtrToString(obj.CodePackageVersion)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.RunFrequencyInterval = obj.RunFrequencyInterval
	dst.DeployedCodePackageStatus = obj.DeployedCodePackageStatus
	dst.SetupEntryPoint = obj.SetupEntryPoint.toGoStruct()
	dst.EntryPoint = obj.EntryPoint.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricDeployedCodePackageQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	dst.HostType = ex1.HostType
	dst.HostIsolationMode = ex1.HostIsolationMode
	return
}

type innerFabricDeployedCodePackageQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedCodePackageQueryResultItem
}

func (obj *innerFabricDeployedCodePackageQueryResultList) toGoStruct() []FabricDeployedCodePackageQueryResultItem {
	var dst []FabricDeployedCodePackageQueryResultItem
	{
		var innerlst []innerFabricDeployedCodePackageQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedCodePackageQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServiceReplicaQueryDescription struct {
	NodeName                  string
	ApplicationName           string
	ServiceManifestNameFilter string
	PartitionIdFilter         uuid.UUID
}

func (obj *FabricDeployedServiceReplicaQueryDescription) toInnerStruct() *innerFabricDeployedServiceReplicaQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServiceReplicaQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrFromString(obj.ServiceManifestNameFilter)
	dst.PartitionIdFilter = obj.PartitionIdFilter
	return dst
}

type innerFabricDeployedServiceReplicaQueryDescription struct {
	NodeName                  *uint16
	ApplicationName           *uint16
	ServiceManifestNameFilter *uint16
	PartitionIdFilter         uuid.UUID
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricDeployedServiceReplicaQueryDescription) toGoStruct() (dst *FabricDeployedServiceReplicaQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServiceReplicaQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestNameFilter = utf16PtrToString(obj.ServiceManifestNameFilter)
	dst.PartitionIdFilter = obj.PartitionIdFilter
	return
}

type FabricReconfigurationInformationQueryResult struct {
	PreviousConfigurationRole   FabricReplicaRole
	ReconfigurationPhase        FabricReconfigurationPhase
	ReconfigurationType         FabricReconfigurationType
	ReconfigurationStartTimeUtc time.Time
}

func (obj *FabricReconfigurationInformationQueryResult) toInnerStruct() *innerFabricReconfigurationInformationQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReconfigurationInformationQueryResult{}
	dst.PreviousConfigurationRole = obj.PreviousConfigurationRole
	dst.ReconfigurationPhase = obj.ReconfigurationPhase
	dst.ReconfigurationType = obj.ReconfigurationType
	dst.ReconfigurationStartTimeUtc = timeToFiletime(obj.ReconfigurationStartTimeUtc)
	return dst
}

type innerFabricReconfigurationInformationQueryResult struct {
	PreviousConfigurationRole   FabricReplicaRole
	ReconfigurationPhase        FabricReconfigurationPhase
	ReconfigurationType         FabricReconfigurationType
	ReconfigurationStartTimeUtc filetime
	Reserved                    unsafe.Pointer
}

func (obj *innerFabricReconfigurationInformationQueryResult) toGoStruct() (dst *FabricReconfigurationInformationQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricReconfigurationInformationQueryResult{}
	dst.PreviousConfigurationRole = obj.PreviousConfigurationRole
	dst.ReconfigurationPhase = obj.ReconfigurationPhase
	dst.ReconfigurationType = obj.ReconfigurationType
	dst.ReconfigurationStartTimeUtc = obj.ReconfigurationStartTimeUtc.ToTime()
	return
}

type FabricDeployedServiceReplicaQueryResultItem struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricDeployedServiceReplicaQueryResultItem) toInnerStruct() *innerFabricDeployedServiceReplicaQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServiceReplicaQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricDeployedServiceReplicaQueryResultItem struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricDeployedServiceReplicaQueryResultItem) toGoStruct() (dst *FabricDeployedServiceReplicaQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServiceReplicaQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricDeployedServiceReplicaQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedServiceReplicaQueryResultItem
}

func (obj *innerFabricDeployedServiceReplicaQueryResultList) toGoStruct() []FabricDeployedServiceReplicaQueryResultItem {
	var dst []FabricDeployedServiceReplicaQueryResultItem
	{
		var innerlst []innerFabricDeployedServiceReplicaQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServiceReplicaQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedStatefulServiceReplicaQueryResultItem struct {
	ServiceName                string
	ServiceTypeName            string
	ServiceManifestVersion     string
	CodePackageName            string
	PartitionId                uuid.UUID
	ReplicaId                  int64
	ReplicaRole                FabricReplicaRole
	ReplicaStatus              FabricQueryServiceReplicaStatus
	Address                    string
	ServiceManifestName        string
	ServicePackageActivationId string
	HostProcessId              int64
	ReconfigurationInformation *FabricReconfigurationInformationQueryResult
}

func (obj *FabricDeployedStatefulServiceReplicaQueryResultItem) toInnerStruct() *innerFabricDeployedStatefulServiceReplicaQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedStatefulServiceReplicaQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.ReplicaRole = obj.ReplicaRole
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.Address = utf16PtrFromString(obj.Address)
	ex0 := dst
	ex1 := &innerFabricDeployedStatefulServiceReplicaQueryResultItemEx1{}
	ex1.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricDeployedStatefulServiceReplicaQueryResultItemEx2{}
	ex2.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricDeployedStatefulServiceReplicaQueryResultItemEx3{}
	ex3.HostProcessId = obj.HostProcessId
	ex3.ReconfigurationInformation = obj.ReconfigurationInformation.toInnerStruct()
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricDeployedStatefulServiceReplicaQueryResultItem struct {
	ServiceName            *uint16
	ServiceTypeName        *uint16
	ServiceManifestVersion *uint16
	CodePackageName        *uint16
	PartitionId            uuid.UUID
	ReplicaId              int64
	ReplicaRole            FabricReplicaRole
	ReplicaStatus          FabricQueryServiceReplicaStatus
	Address                *uint16
	Reserved               unsafe.Pointer
}
type innerFabricDeployedStatefulServiceReplicaQueryResultItemEx1 struct {
	ServiceManifestName *uint16
	Reserved            unsafe.Pointer
}
type innerFabricDeployedStatefulServiceReplicaQueryResultItemEx2 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}
type innerFabricDeployedStatefulServiceReplicaQueryResultItemEx3 struct {
	HostProcessId              int64
	ReconfigurationInformation *innerFabricReconfigurationInformationQueryResult
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedStatefulServiceReplicaQueryResultItem) toGoStruct() (dst *FabricDeployedStatefulServiceReplicaQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedStatefulServiceReplicaQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.ReplicaRole = obj.ReplicaRole
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.Address = utf16PtrToString(obj.Address)
	ex0 := obj
	ex1 := (*innerFabricDeployedStatefulServiceReplicaQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServiceManifestName = utf16PtrToString(ex1.ServiceManifestName)
	ex2 := (*innerFabricDeployedStatefulServiceReplicaQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex2.ServicePackageActivationId)
	ex3 := (*innerFabricDeployedStatefulServiceReplicaQueryResultItemEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.HostProcessId = ex3.HostProcessId
	dst.ReconfigurationInformation = ex3.ReconfigurationInformation.toGoStruct()
	return
}

type FabricDeployedStatelessServiceInstanceQueryResultItem struct {
	ServiceName                string
	ServiceTypeName            string
	ServiceManifestVersion     string
	CodePackageName            string
	PartitionId                uuid.UUID
	InstanceId                 int64
	ReplicaStatus              FabricQueryServiceReplicaStatus
	Address                    string
	ServiceManifestName        string
	ServicePackageActivationId string
	HostProcessId              int64
}

func (obj *FabricDeployedStatelessServiceInstanceQueryResultItem) toInnerStruct() *innerFabricDeployedStatelessServiceInstanceQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedStatelessServiceInstanceQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrFromString(obj.ServiceManifestVersion)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.Address = utf16PtrFromString(obj.Address)
	ex0 := dst
	ex1 := &innerFabricDeployedStatelessServiceInstanceQueryResultItemEx1{}
	ex1.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricDeployedStatelessServiceInstanceQueryResultItemEx2{}
	ex2.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricDeployedStatelessServiceInstanceQueryResultItemEx3{}
	ex3.HostProcessId = obj.HostProcessId
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricDeployedStatelessServiceInstanceQueryResultItem struct {
	ServiceName            *uint16
	ServiceTypeName        *uint16
	ServiceManifestVersion *uint16
	CodePackageName        *uint16
	PartitionId            uuid.UUID
	InstanceId             int64
	ReplicaStatus          FabricQueryServiceReplicaStatus
	Address                *uint16
	Reserved               unsafe.Pointer
}
type innerFabricDeployedStatelessServiceInstanceQueryResultItemEx1 struct {
	ServiceManifestName *uint16
	Reserved            unsafe.Pointer
}
type innerFabricDeployedStatelessServiceInstanceQueryResultItemEx2 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}
type innerFabricDeployedStatelessServiceInstanceQueryResultItemEx3 struct {
	HostProcessId int64
	Reserved      unsafe.Pointer
}

func (obj *innerFabricDeployedStatelessServiceInstanceQueryResultItem) toGoStruct() (dst *FabricDeployedStatelessServiceInstanceQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedStatelessServiceInstanceQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServiceManifestVersion = utf16PtrToString(obj.ServiceManifestVersion)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.ReplicaStatus = obj.ReplicaStatus
	dst.Address = utf16PtrToString(obj.Address)
	ex0 := obj
	ex1 := (*innerFabricDeployedStatelessServiceInstanceQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServiceManifestName = utf16PtrToString(ex1.ServiceManifestName)
	ex2 := (*innerFabricDeployedStatelessServiceInstanceQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex2.ServicePackageActivationId)
	ex3 := (*innerFabricDeployedStatelessServiceInstanceQueryResultItemEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.HostProcessId = ex3.HostProcessId
	return
}

type FabricLoadMetricReport struct {
	Name            string
	Value           uint32
	LastReportedUtc time.Time
	CurrentValue    float64
}

func (obj *FabricLoadMetricReport) toInnerStruct() *innerFabricLoadMetricReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricLoadMetricReport{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Value = obj.Value
	dst.LastReportedUtc = timeToFiletime(obj.LastReportedUtc)
	ex0 := dst
	ex1 := &innerFabricLoadMetricReportEx1{}
	ex1.CurrentValue = obj.CurrentValue
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricLoadMetricReport struct {
	Name            *uint16
	Value           uint32
	LastReportedUtc filetime
	Reserved        unsafe.Pointer
}
type innerFabricLoadMetricReportEx1 struct {
	CurrentValue float64
	Reserved     unsafe.Pointer
}

func (obj *innerFabricLoadMetricReport) toGoStruct() (dst *FabricLoadMetricReport) {
	if obj == nil {
		return
	}
	dst = &FabricLoadMetricReport{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Value = obj.Value
	dst.LastReportedUtc = obj.LastReportedUtc.ToTime()
	ex0 := obj
	ex1 := (*innerFabricLoadMetricReportEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.CurrentValue = ex1.CurrentValue
	return
}

type innerFabricLoadMetricReportList struct {
	Count uint32
	Items *innerFabricLoadMetricReport
}

func (obj *innerFabricLoadMetricReportList) toGoStruct() []FabricLoadMetricReport {
	var dst []FabricLoadMetricReport
	{
		var innerlst []innerFabricLoadMetricReport
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricReport

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type innerFabricUnplacedReplicaInformationList struct {
	Count uint32
	Items **uint16
}

func (obj *innerFabricUnplacedReplicaInformationList) toGoStruct() []string {
	var dst []string
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServiceReplicaDetailQueryDescription struct {
	NodeName    string
	PartitionId uuid.UUID
	ReplicaId   int64
}

func (obj *FabricDeployedServiceReplicaDetailQueryDescription) toInnerStruct() *innerFabricDeployedServiceReplicaDetailQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServiceReplicaDetailQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	return dst
}

type innerFabricDeployedServiceReplicaDetailQueryDescription struct {
	NodeName    *uint16
	PartitionId uuid.UUID
	ReplicaId   int64
	Reserved    unsafe.Pointer
}

func (obj *innerFabricDeployedServiceReplicaDetailQueryDescription) toGoStruct() (dst *FabricDeployedServiceReplicaDetailQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServiceReplicaDetailQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	return
}

type FabricDeployedServiceReplicaDetailQueryResultItem struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricDeployedServiceReplicaDetailQueryResultItem) toInnerStruct() *innerFabricDeployedServiceReplicaDetailQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServiceReplicaDetailQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricDeployedServiceReplicaDetailQueryResultItem struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricDeployedServiceReplicaDetailQueryResultItem) toGoStruct() (dst *FabricDeployedServiceReplicaDetailQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServiceReplicaDetailQueryResultItem{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricDeployedStatelessServiceInstanceDetailQueryResultItem struct {
	ServiceName                         string
	PartitionId                         uuid.UUID
	InstanceId                          int64
	CurrentServiceOperation             FabricQueryServiceOperationName
	CurrentServiceOperationStartTimeUtc time.Time
	ReportedLoad                        []FabricLoadMetricReport
	DeployedServiceReplica              *FabricDeployedStatelessServiceInstanceQueryResultItem
}

func (obj *FabricDeployedStatelessServiceInstanceDetailQueryResultItem) toInnerStruct() *innerFabricDeployedStatelessServiceInstanceDetailQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedStatelessServiceInstanceDetailQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.CurrentServiceOperation = obj.CurrentServiceOperation
	dst.CurrentServiceOperationStartTimeUtc = timeToFiletime(obj.CurrentServiceOperationStartTimeUtc)
	lst_32 := &innerFabricLoadMetricReportList{}
	{

		var tmp []innerFabricLoadMetricReport

		for _, item := range obj.ReportedLoad {
			var tmpitem innerFabricLoadMetricReport

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_32.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_32.Items = &tmp[0]
		}

	}
	dst.ReportedLoad = lst_32
	ex0 := dst
	ex1 := &innerFabricDeployedStatelessServiceInstanceDetailQueryResultItemEx1{}
	ex1.DeployedServiceReplica = obj.DeployedServiceReplica.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedStatelessServiceInstanceDetailQueryResultItem struct {
	ServiceName                         *uint16
	PartitionId                         uuid.UUID
	InstanceId                          int64
	CurrentServiceOperation             FabricQueryServiceOperationName
	CurrentServiceOperationStartTimeUtc filetime
	ReportedLoad                        *innerFabricLoadMetricReportList
	Reserved                            unsafe.Pointer
}
type innerFabricDeployedStatelessServiceInstanceDetailQueryResultItemEx1 struct {
	DeployedServiceReplica *innerFabricDeployedStatelessServiceInstanceQueryResultItem
	Reserved               unsafe.Pointer
}

func (obj *innerFabricDeployedStatelessServiceInstanceDetailQueryResultItem) toGoStruct() (dst *FabricDeployedStatelessServiceInstanceDetailQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedStatelessServiceInstanceDetailQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.CurrentServiceOperation = obj.CurrentServiceOperation
	dst.CurrentServiceOperationStartTimeUtc = obj.CurrentServiceOperationStartTimeUtc.ToTime()
	{
		var innerlst []innerFabricLoadMetricReport
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ReportedLoad.Items), int(obj.ReportedLoad.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricReport

			tmpitem = *item.toGoStruct()

			dst.ReportedLoad = append(dst.ReportedLoad, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricDeployedStatelessServiceInstanceDetailQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.DeployedServiceReplica = ex1.DeployedServiceReplica.toGoStruct()
	return
}

type FabricRemoteReplicatorStatus struct {
	ReplicaId                             int64
	LastAcknowledgementProcessedTimeUtc   time.Time
	LastReceivedReplicationSequenceNumber int64
	LastAppliedReplicationSequenceNumber  int64
	IsInBuild                             bool
	LastReceivedCopySequenceNumber        int64
	LastAppliedCopySequenceNumber         int64
}

func (obj *FabricRemoteReplicatorStatus) toInnerStruct() *innerFabricRemoteReplicatorStatus {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRemoteReplicatorStatus{}
	dst.ReplicaId = obj.ReplicaId
	dst.LastAcknowledgementProcessedTimeUtc = timeToFiletime(obj.LastAcknowledgementProcessedTimeUtc)
	dst.LastReceivedReplicationSequenceNumber = obj.LastReceivedReplicationSequenceNumber
	dst.LastAppliedReplicationSequenceNumber = obj.LastAppliedReplicationSequenceNumber
	dst.IsInBuild = obj.IsInBuild
	dst.LastReceivedCopySequenceNumber = obj.LastReceivedCopySequenceNumber
	dst.LastAppliedCopySequenceNumber = obj.LastAppliedCopySequenceNumber
	return dst
}

type innerFabricRemoteReplicatorStatus struct {
	ReplicaId                             int64
	LastAcknowledgementProcessedTimeUtc   filetime
	LastReceivedReplicationSequenceNumber int64
	LastAppliedReplicationSequenceNumber  int64
	IsInBuild                             bool
	LastReceivedCopySequenceNumber        int64
	LastAppliedCopySequenceNumber         int64
	Reserved                              unsafe.Pointer
}

func (obj *innerFabricRemoteReplicatorStatus) toGoStruct() (dst *FabricRemoteReplicatorStatus) {
	if obj == nil {
		return
	}
	dst = &FabricRemoteReplicatorStatus{}
	dst.ReplicaId = obj.ReplicaId
	dst.LastAcknowledgementProcessedTimeUtc = obj.LastAcknowledgementProcessedTimeUtc.ToTime()
	dst.LastReceivedReplicationSequenceNumber = obj.LastReceivedReplicationSequenceNumber
	dst.LastAppliedReplicationSequenceNumber = obj.LastAppliedReplicationSequenceNumber
	dst.IsInBuild = obj.IsInBuild
	dst.LastReceivedCopySequenceNumber = obj.LastReceivedCopySequenceNumber
	dst.LastAppliedCopySequenceNumber = obj.LastAppliedCopySequenceNumber
	return
}

type FabricRemoteReplicatorAcknowledgementDetail struct {
	AverageReceiveDurationMilliseconds int64
	AverageApplyDurationMilliseconds   int64
	NotReceivedCount                   int64
	ReceivedAndNotAppliedCount         int64
}
type innerFabricRemoteReplicatorAcknowledgementDetail struct {
	FabricRemoteReplicatorAcknowledgementDetail
	Reserved unsafe.Pointer
}

func (obj *innerFabricRemoteReplicatorAcknowledgementDetail) toGoStruct() *FabricRemoteReplicatorAcknowledgementDetail {
	if obj == nil {
		return nil
	}
	return &obj.FabricRemoteReplicatorAcknowledgementDetail
}
func (obj *FabricRemoteReplicatorAcknowledgementDetail) toInnerStruct() *innerFabricRemoteReplicatorAcknowledgementDetail {
	if obj == nil {
		return nil
	}
	return &innerFabricRemoteReplicatorAcknowledgementDetail{*obj, nil}
}

type FabricRemoteReplicatorAcknowledgementStatus struct {
	CopyStreamAcknowledgementDetails        *FabricRemoteReplicatorAcknowledgementDetail
	ReplicationStreamAcknowledgementDetails *FabricRemoteReplicatorAcknowledgementDetail
}
type innerFabricRemoteReplicatorAcknowledgementStatus struct {
	FabricRemoteReplicatorAcknowledgementStatus
	Reserved unsafe.Pointer
}

func (obj *innerFabricRemoteReplicatorAcknowledgementStatus) toGoStruct() *FabricRemoteReplicatorAcknowledgementStatus {
	if obj == nil {
		return nil
	}
	return &obj.FabricRemoteReplicatorAcknowledgementStatus
}
func (obj *FabricRemoteReplicatorAcknowledgementStatus) toInnerStruct() *innerFabricRemoteReplicatorAcknowledgementStatus {
	if obj == nil {
		return nil
	}
	return &innerFabricRemoteReplicatorAcknowledgementStatus{*obj, nil}
}

type innerFabricRemoteReplicatorStatusList struct {
	Count uint32
	Items *innerFabricRemoteReplicatorStatus
}

func (obj *innerFabricRemoteReplicatorStatusList) toGoStruct() []FabricRemoteReplicatorStatus {
	var dst []FabricRemoteReplicatorStatus
	{
		var innerlst []innerFabricRemoteReplicatorStatus
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricRemoteReplicatorStatus

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricReplicatorQueueStatus struct {
	QueueUtilizationPercentage uint32
	QueueMemorySize            int64
	FirstSequenceNumber        int64
	CompletedSequenceNumber    int64
	CommittedSequenceNumber    int64
	LastSequenceNumber         int64
}
type innerFabricReplicatorQueueStatus struct {
	FabricReplicatorQueueStatus
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicatorQueueStatus) toGoStruct() *FabricReplicatorQueueStatus {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicatorQueueStatus
}
func (obj *FabricReplicatorQueueStatus) toInnerStruct() *innerFabricReplicatorQueueStatus {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicatorQueueStatus{*obj, nil}
}

type FabricPrimaryReplicatorStatusQueryResult struct {
	ReplicationQueueStatus *FabricReplicatorQueueStatus
	RemoteReplicators      []FabricRemoteReplicatorStatus
}

func (obj *FabricPrimaryReplicatorStatusQueryResult) toInnerStruct() *innerFabricPrimaryReplicatorStatusQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPrimaryReplicatorStatusQueryResult{}
	dst.ReplicationQueueStatus = obj.ReplicationQueueStatus.toInnerStruct()
	lst_33 := &innerFabricRemoteReplicatorStatusList{}
	{

		var tmp []innerFabricRemoteReplicatorStatus

		for _, item := range obj.RemoteReplicators {
			var tmpitem innerFabricRemoteReplicatorStatus

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_33.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_33.Items = &tmp[0]
		}

	}
	dst.RemoteReplicators = lst_33
	return dst
}

type innerFabricPrimaryReplicatorStatusQueryResult struct {
	ReplicationQueueStatus *innerFabricReplicatorQueueStatus
	RemoteReplicators      *innerFabricRemoteReplicatorStatusList
	Reserved               unsafe.Pointer
}

func (obj *innerFabricPrimaryReplicatorStatusQueryResult) toGoStruct() (dst *FabricPrimaryReplicatorStatusQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricPrimaryReplicatorStatusQueryResult{}
	dst.ReplicationQueueStatus = obj.ReplicationQueueStatus.toGoStruct()
	{
		var innerlst []innerFabricRemoteReplicatorStatus
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.RemoteReplicators.Items), int(obj.RemoteReplicators.Count))

		for _, item := range innerlst {
			var tmpitem FabricRemoteReplicatorStatus

			tmpitem = *item.toGoStruct()

			dst.RemoteReplicators = append(dst.RemoteReplicators, tmpitem)
		}

	}
	return
}

type FabricSecondaryReplicatorStatusQueryResult struct {
	ReplicationQueueStatus                  *FabricReplicatorQueueStatus
	LastReplicationOperationReceivedTimeUtc time.Time
	IsInBuild                               bool
	CopyQueueStatus                         *FabricReplicatorQueueStatus
	LastCopyOperationReceivedTimeUtc        time.Time
	LastAcknowledgementSentTimeUtc          time.Time
}

func (obj *FabricSecondaryReplicatorStatusQueryResult) toInnerStruct() *innerFabricSecondaryReplicatorStatusQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSecondaryReplicatorStatusQueryResult{}
	dst.ReplicationQueueStatus = obj.ReplicationQueueStatus.toInnerStruct()
	dst.LastReplicationOperationReceivedTimeUtc = timeToFiletime(obj.LastReplicationOperationReceivedTimeUtc)
	dst.IsInBuild = obj.IsInBuild
	dst.CopyQueueStatus = obj.CopyQueueStatus.toInnerStruct()
	dst.LastCopyOperationReceivedTimeUtc = timeToFiletime(obj.LastCopyOperationReceivedTimeUtc)
	dst.LastAcknowledgementSentTimeUtc = timeToFiletime(obj.LastAcknowledgementSentTimeUtc)
	return dst
}

type innerFabricSecondaryReplicatorStatusQueryResult struct {
	ReplicationQueueStatus                  *innerFabricReplicatorQueueStatus
	LastReplicationOperationReceivedTimeUtc filetime
	IsInBuild                               bool
	CopyQueueStatus                         *innerFabricReplicatorQueueStatus
	LastCopyOperationReceivedTimeUtc        filetime
	LastAcknowledgementSentTimeUtc          filetime
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricSecondaryReplicatorStatusQueryResult) toGoStruct() (dst *FabricSecondaryReplicatorStatusQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricSecondaryReplicatorStatusQueryResult{}
	dst.ReplicationQueueStatus = obj.ReplicationQueueStatus.toGoStruct()
	dst.LastReplicationOperationReceivedTimeUtc = obj.LastReplicationOperationReceivedTimeUtc.ToTime()
	dst.IsInBuild = obj.IsInBuild
	dst.CopyQueueStatus = obj.CopyQueueStatus.toGoStruct()
	dst.LastCopyOperationReceivedTimeUtc = obj.LastCopyOperationReceivedTimeUtc.ToTime()
	dst.LastAcknowledgementSentTimeUtc = obj.LastAcknowledgementSentTimeUtc.ToTime()
	return
}

type FabricReplicatorStatusQueryResult struct {
	Role  FabricReplicaRole
	Value interface{}
}

func (obj *FabricReplicatorStatusQueryResult) toInnerStruct() *innerFabricReplicatorStatusQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicatorStatusQueryResult{}
	dst.Role = obj.Role
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricReplicatorStatusQueryResult struct {
	Role  FabricReplicaRole
	Value unsafe.Pointer
}

func (obj *innerFabricReplicatorStatusQueryResult) toGoStruct() (dst *FabricReplicatorStatusQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricReplicatorStatusQueryResult{}
	dst.Role = obj.Role
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricReplicaStatusQueryResult struct {
	Kind  FabricServiceReplicaKind
	Value interface{}
}

func (obj *FabricReplicaStatusQueryResult) toInnerStruct() *innerFabricReplicaStatusQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicaStatusQueryResult{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricReplicaStatusQueryResult struct {
	Kind     FabricServiceReplicaKind
	Value    unsafe.Pointer
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaStatusQueryResult) toGoStruct() (dst *FabricReplicaStatusQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricReplicaStatusQueryResult{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricDeployedStatefulServiceReplicaDetailQueryResultItem struct {
	ServiceName                         string
	PartitionId                         uuid.UUID
	ReplicaId                           int64
	CurrentServiceOperation             FabricQueryServiceOperationName
	CurrentServiceOperationStartTimeUtc time.Time
	CurrentReplicatorOperation          FabricQueryReplicatorOperationName
	ReadStatus                          FabricServicePartitionAccessStatus
	WriteStatus                         FabricServicePartitionAccessStatus
	ReportedLoad                        []FabricLoadMetricReport
	ReplicatorStatus                    *FabricReplicatorStatusQueryResult
	ReplicaStatus                       *FabricReplicaStatusQueryResult
	DeployedServiceReplica              *FabricDeployedStatefulServiceReplicaQueryResultItem
}

func (obj *FabricDeployedStatefulServiceReplicaDetailQueryResultItem) toInnerStruct() *innerFabricDeployedStatefulServiceReplicaDetailQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedStatefulServiceReplicaDetailQueryResultItem{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.CurrentServiceOperation = obj.CurrentServiceOperation
	dst.CurrentServiceOperationStartTimeUtc = timeToFiletime(obj.CurrentServiceOperationStartTimeUtc)
	dst.CurrentReplicatorOperation = obj.CurrentReplicatorOperation
	dst.ReadStatus = obj.ReadStatus
	dst.WriteStatus = obj.WriteStatus
	lst_34 := &innerFabricLoadMetricReportList{}
	{

		var tmp []innerFabricLoadMetricReport

		for _, item := range obj.ReportedLoad {
			var tmpitem innerFabricLoadMetricReport

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_34.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_34.Items = &tmp[0]
		}

	}
	dst.ReportedLoad = lst_34
	dst.ReplicatorStatus = obj.ReplicatorStatus.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricDeployedStatefulServiceReplicaDetailQueryResultItemEx1{}
	ex1.ReplicaStatus = obj.ReplicaStatus.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricDeployedStatefulServiceReplicaDetailQueryResultItemEx2{}
	ex2.DeployedServiceReplica = obj.DeployedServiceReplica.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricDeployedStatefulServiceReplicaDetailQueryResultItem struct {
	ServiceName                         *uint16
	PartitionId                         uuid.UUID
	ReplicaId                           int64
	CurrentServiceOperation             FabricQueryServiceOperationName
	CurrentServiceOperationStartTimeUtc filetime
	CurrentReplicatorOperation          FabricQueryReplicatorOperationName
	ReadStatus                          FabricServicePartitionAccessStatus
	WriteStatus                         FabricServicePartitionAccessStatus
	ReportedLoad                        *innerFabricLoadMetricReportList
	ReplicatorStatus                    *innerFabricReplicatorStatusQueryResult
	Reserved                            unsafe.Pointer
}
type innerFabricDeployedStatefulServiceReplicaDetailQueryResultItemEx1 struct {
	ReplicaStatus *innerFabricReplicaStatusQueryResult
	Reserved      unsafe.Pointer
}
type innerFabricDeployedStatefulServiceReplicaDetailQueryResultItemEx2 struct {
	DeployedServiceReplica *innerFabricDeployedStatefulServiceReplicaQueryResultItem
	Reserved               unsafe.Pointer
}

func (obj *innerFabricDeployedStatefulServiceReplicaDetailQueryResultItem) toGoStruct() (dst *FabricDeployedStatefulServiceReplicaDetailQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedStatefulServiceReplicaDetailQueryResultItem{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.CurrentServiceOperation = obj.CurrentServiceOperation
	dst.CurrentServiceOperationStartTimeUtc = obj.CurrentServiceOperationStartTimeUtc.ToTime()
	dst.CurrentReplicatorOperation = obj.CurrentReplicatorOperation
	dst.ReadStatus = obj.ReadStatus
	dst.WriteStatus = obj.WriteStatus
	{
		var innerlst []innerFabricLoadMetricReport
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ReportedLoad.Items), int(obj.ReportedLoad.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricReport

			tmpitem = *item.toGoStruct()

			dst.ReportedLoad = append(dst.ReportedLoad, tmpitem)
		}

	}
	dst.ReplicatorStatus = obj.ReplicatorStatus.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricDeployedStatefulServiceReplicaDetailQueryResultItemEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ReplicaStatus = ex1.ReplicaStatus.toGoStruct()
	ex2 := (*innerFabricDeployedStatefulServiceReplicaDetailQueryResultItemEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.DeployedServiceReplica = ex2.DeployedServiceReplica.toGoStruct()
	return
}

type FabricKeyValueStoreMigrationQueryResult struct {
	CurrentPhase FabricKeyValueStoreMigrationPhase
	State        FabricKeyValueStoreMigrationState
	NextPhase    FabricKeyValueStoreMigrationPhase
}
type innerFabricKeyValueStoreMigrationQueryResult struct {
	FabricKeyValueStoreMigrationQueryResult
	Reserved unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreMigrationQueryResult) toGoStruct() *FabricKeyValueStoreMigrationQueryResult {
	if obj == nil {
		return nil
	}
	return &obj.FabricKeyValueStoreMigrationQueryResult
}
func (obj *FabricKeyValueStoreMigrationQueryResult) toInnerStruct() *innerFabricKeyValueStoreMigrationQueryResult {
	if obj == nil {
		return nil
	}
	return &innerFabricKeyValueStoreMigrationQueryResult{*obj, nil}
}

type FabricKeyValueStoreStatusQueryResult struct {
	DatabaseRowCountEstimate         int64
	DatabaseLogicalSizeEstimate      int64
	CopyNotificationCurrentKeyFilter string
	CopyNotificationCurrentProgress  int64
	StatusDetails                    string
	ProviderKind                     FabricKeyValueStoreProviderKind
	MigrationStatus                  *FabricKeyValueStoreMigrationQueryResult
}

func (obj *FabricKeyValueStoreStatusQueryResult) toInnerStruct() *innerFabricKeyValueStoreStatusQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricKeyValueStoreStatusQueryResult{}
	dst.DatabaseRowCountEstimate = obj.DatabaseRowCountEstimate
	dst.DatabaseLogicalSizeEstimate = obj.DatabaseLogicalSizeEstimate
	dst.CopyNotificationCurrentKeyFilter = utf16PtrFromString(obj.CopyNotificationCurrentKeyFilter)
	dst.CopyNotificationCurrentProgress = obj.CopyNotificationCurrentProgress
	dst.StatusDetails = utf16PtrFromString(obj.StatusDetails)
	ex0 := dst
	ex1 := &innerFabricKeyValueStoreStatusQueryResultEx1{}
	ex1.ProviderKind = obj.ProviderKind
	ex1.MigrationStatus = obj.MigrationStatus.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricKeyValueStoreStatusQueryResult struct {
	DatabaseRowCountEstimate         int64
	DatabaseLogicalSizeEstimate      int64
	CopyNotificationCurrentKeyFilter *uint16
	CopyNotificationCurrentProgress  int64
	StatusDetails                    *uint16
	Reserved                         unsafe.Pointer
}
type innerFabricKeyValueStoreStatusQueryResultEx1 struct {
	ProviderKind    FabricKeyValueStoreProviderKind
	MigrationStatus *innerFabricKeyValueStoreMigrationQueryResult
	Reserved        unsafe.Pointer
}

func (obj *innerFabricKeyValueStoreStatusQueryResult) toGoStruct() (dst *FabricKeyValueStoreStatusQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricKeyValueStoreStatusQueryResult{}
	dst.DatabaseRowCountEstimate = obj.DatabaseRowCountEstimate
	dst.DatabaseLogicalSizeEstimate = obj.DatabaseLogicalSizeEstimate
	dst.CopyNotificationCurrentKeyFilter = utf16PtrToString(obj.CopyNotificationCurrentKeyFilter)
	dst.CopyNotificationCurrentProgress = obj.CopyNotificationCurrentProgress
	dst.StatusDetails = utf16PtrToString(obj.StatusDetails)
	ex0 := obj
	ex1 := (*innerFabricKeyValueStoreStatusQueryResultEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ProviderKind = ex1.ProviderKind
	dst.MigrationStatus = ex1.MigrationStatus.toGoStruct()
	return
}

type FabricProvisionedCodeVersionQueryDescription struct {
	CodeVersionFilter string
}

func (obj *FabricProvisionedCodeVersionQueryDescription) toInnerStruct() *innerFabricProvisionedCodeVersionQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricProvisionedCodeVersionQueryDescription{}
	dst.CodeVersionFilter = utf16PtrFromString(obj.CodeVersionFilter)
	return dst
}

type innerFabricProvisionedCodeVersionQueryDescription struct {
	CodeVersionFilter *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricProvisionedCodeVersionQueryDescription) toGoStruct() (dst *FabricProvisionedCodeVersionQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricProvisionedCodeVersionQueryDescription{}
	dst.CodeVersionFilter = utf16PtrToString(obj.CodeVersionFilter)
	return
}

type FabricProvisionedCodeVersionQueryResultItem struct {
	CodeVersion string
}

func (obj *FabricProvisionedCodeVersionQueryResultItem) toInnerStruct() *innerFabricProvisionedCodeVersionQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricProvisionedCodeVersionQueryResultItem{}
	dst.CodeVersion = utf16PtrFromString(obj.CodeVersion)
	return dst
}

type innerFabricProvisionedCodeVersionQueryResultItem struct {
	CodeVersion *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricProvisionedCodeVersionQueryResultItem) toGoStruct() (dst *FabricProvisionedCodeVersionQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricProvisionedCodeVersionQueryResultItem{}
	dst.CodeVersion = utf16PtrToString(obj.CodeVersion)
	return
}

type innerFabricProvisionedCodeVersionQueryResultList struct {
	Count uint32
	Items *innerFabricProvisionedCodeVersionQueryResultItem
}

func (obj *innerFabricProvisionedCodeVersionQueryResultList) toGoStruct() []FabricProvisionedCodeVersionQueryResultItem {
	var dst []FabricProvisionedCodeVersionQueryResultItem
	{
		var innerlst []innerFabricProvisionedCodeVersionQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricProvisionedCodeVersionQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricProvisionedConfigVersionQueryDescription struct {
	ConfigVersionFilter string
}

func (obj *FabricProvisionedConfigVersionQueryDescription) toInnerStruct() *innerFabricProvisionedConfigVersionQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricProvisionedConfigVersionQueryDescription{}
	dst.ConfigVersionFilter = utf16PtrFromString(obj.ConfigVersionFilter)
	return dst
}

type innerFabricProvisionedConfigVersionQueryDescription struct {
	ConfigVersionFilter *uint16
	Reserved            unsafe.Pointer
}

func (obj *innerFabricProvisionedConfigVersionQueryDescription) toGoStruct() (dst *FabricProvisionedConfigVersionQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricProvisionedConfigVersionQueryDescription{}
	dst.ConfigVersionFilter = utf16PtrToString(obj.ConfigVersionFilter)
	return
}

type FabricProvisionedConfigVersionQueryResultItem struct {
	ConfigVersion string
}

func (obj *FabricProvisionedConfigVersionQueryResultItem) toInnerStruct() *innerFabricProvisionedConfigVersionQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricProvisionedConfigVersionQueryResultItem{}
	dst.ConfigVersion = utf16PtrFromString(obj.ConfigVersion)
	return dst
}

type innerFabricProvisionedConfigVersionQueryResultItem struct {
	ConfigVersion *uint16
	Reserved      unsafe.Pointer
}

func (obj *innerFabricProvisionedConfigVersionQueryResultItem) toGoStruct() (dst *FabricProvisionedConfigVersionQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricProvisionedConfigVersionQueryResultItem{}
	dst.ConfigVersion = utf16PtrToString(obj.ConfigVersion)
	return
}

type innerFabricProvisionedConfigVersionQueryResultList struct {
	Count uint32
	Items *innerFabricProvisionedConfigVersionQueryResultItem
}

func (obj *innerFabricProvisionedConfigVersionQueryResultList) toGoStruct() []FabricProvisionedConfigVersionQueryResultItem {
	var dst []FabricProvisionedConfigVersionQueryResultItem
	{
		var innerlst []innerFabricProvisionedConfigVersionQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricProvisionedConfigVersionQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceNameQueryDescription struct {
	PartitionId uuid.UUID
}
type innerFabricServiceNameQueryDescription struct {
	FabricServiceNameQueryDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceNameQueryDescription) toGoStruct() *FabricServiceNameQueryDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceNameQueryDescription
}
func (obj *FabricServiceNameQueryDescription) toInnerStruct() *innerFabricServiceNameQueryDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceNameQueryDescription{*obj, nil}
}

type FabricServiceNameQueryResult struct {
	ServiceName string
}

func (obj *FabricServiceNameQueryResult) toInnerStruct() *innerFabricServiceNameQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceNameQueryResult{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	return dst
}

type innerFabricServiceNameQueryResult struct {
	ServiceName *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricServiceNameQueryResult) toGoStruct() (dst *FabricServiceNameQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricServiceNameQueryResult{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	return
}

type FabricApplicationNameQueryDescription struct {
	ServiceName string
}

func (obj *FabricApplicationNameQueryDescription) toInnerStruct() *innerFabricApplicationNameQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationNameQueryDescription{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	return dst
}

type innerFabricApplicationNameQueryDescription struct {
	ServiceName *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricApplicationNameQueryDescription) toGoStruct() (dst *FabricApplicationNameQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationNameQueryDescription{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	return
}

type FabricApplicationNameQueryResult struct {
	ApplicationName string
}

func (obj *FabricApplicationNameQueryResult) toInnerStruct() *innerFabricApplicationNameQueryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationNameQueryResult{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	return dst
}

type innerFabricApplicationNameQueryResult struct {
	ApplicationName *uint16
	Reserved        unsafe.Pointer
}

func (obj *innerFabricApplicationNameQueryResult) toGoStruct() (dst *FabricApplicationNameQueryResult) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationNameQueryResult{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	return
}

type FabricRestartDeployedCodePackageDescription struct {
	NodeName              string
	ApplicationName       string
	ServiceManifestName   string
	CodePackageName       string
	CodePackageInstanceId int64
}

func (obj *FabricRestartDeployedCodePackageDescription) toInnerStruct() *innerFabricRestartDeployedCodePackageDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartDeployedCodePackageDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.CodePackageInstanceId = obj.CodePackageInstanceId
	return dst
}

type innerFabricRestartDeployedCodePackageDescription struct {
	NodeName              *uint16
	ApplicationName       *uint16
	ServiceManifestName   *uint16
	CodePackageName       *uint16
	CodePackageInstanceId int64
	Reserved              unsafe.Pointer
}

func (obj *innerFabricRestartDeployedCodePackageDescription) toGoStruct() (dst *FabricRestartDeployedCodePackageDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRestartDeployedCodePackageDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.CodePackageInstanceId = obj.CodePackageInstanceId
	return
}

type FabricRestartNodeDescription struct {
	NodeName         string
	NodeInstanceId   uint64
	CreateFabricDump bool
}

func (obj *FabricRestartNodeDescription) toInnerStruct() *innerFabricRestartNodeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartNodeDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	ex0 := dst
	ex1 := &innerFabricRestartNodeDescriptionEx1{}
	ex1.CreateFabricDump = obj.CreateFabricDump
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricRestartNodeDescription struct {
	NodeName       *uint16
	NodeInstanceId uint64
	Reserved       unsafe.Pointer
}
type innerFabricRestartNodeDescriptionEx1 struct {
	CreateFabricDump bool
	Reserved         unsafe.Pointer
}

func (obj *innerFabricRestartNodeDescription) toGoStruct() (dst *FabricRestartNodeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRestartNodeDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	ex0 := obj
	ex1 := (*innerFabricRestartNodeDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.CreateFabricDump = ex1.CreateFabricDump
	return
}

type FabricRestartNodeDescriptionUsingNodeName struct {
	NodeName               string
	NodeInstanceId         uint64
	ShouldCreateFabricDump bool
}

func (obj *FabricRestartNodeDescriptionUsingNodeName) toInnerStruct() *innerFabricRestartNodeDescriptionUsingNodeName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartNodeDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.ShouldCreateFabricDump = obj.ShouldCreateFabricDump
	return dst
}

type innerFabricRestartNodeDescriptionUsingNodeName struct {
	NodeName               *uint16
	NodeInstanceId         uint64
	ShouldCreateFabricDump bool
	Reserved               unsafe.Pointer
}

func (obj *innerFabricRestartNodeDescriptionUsingNodeName) toGoStruct() (dst *FabricRestartNodeDescriptionUsingNodeName) {
	if obj == nil {
		return
	}
	dst = &FabricRestartNodeDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.ShouldCreateFabricDump = obj.ShouldCreateFabricDump
	return
}

type FabricRestartNodeDescription2 struct {
	Kind  FabricRestartNodeDescriptionKind
	Value interface{}
}

func (obj *FabricRestartNodeDescription2) toInnerStruct() *innerFabricRestartNodeDescription2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartNodeDescription2{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricRestartNodeDescription2 struct {
	Kind  FabricRestartNodeDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricRestartNodeDescription2) toGoStruct() (dst *FabricRestartNodeDescription2) {
	if obj == nil {
		return
	}
	dst = &FabricRestartNodeDescription2{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricStopNodeDescription struct {
	NodeName       string
	NodeInstanceId uint64
}

func (obj *FabricStopNodeDescription) toInnerStruct() *innerFabricStopNodeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStopNodeDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	return dst
}

type innerFabricStopNodeDescription struct {
	NodeName       *uint16
	NodeInstanceId uint64
	Reserved       unsafe.Pointer
}

func (obj *innerFabricStopNodeDescription) toGoStruct() (dst *FabricStopNodeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStopNodeDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	return
}

type FabricStartNodeDescription struct {
	NodeName              string
	NodeInstanceId        uint64
	IPAddressOrFQDN       string
	ClusterConnectionPort uint32
}

func (obj *FabricStartNodeDescription) toInnerStruct() *innerFabricStartNodeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStartNodeDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.IPAddressOrFQDN = utf16PtrFromString(obj.IPAddressOrFQDN)
	dst.ClusterConnectionPort = obj.ClusterConnectionPort
	return dst
}

type innerFabricStartNodeDescription struct {
	NodeName              *uint16
	NodeInstanceId        uint64
	IPAddressOrFQDN       *uint16
	ClusterConnectionPort uint32
	Reserved              unsafe.Pointer
}

func (obj *innerFabricStartNodeDescription) toGoStruct() (dst *FabricStartNodeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStartNodeDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.IPAddressOrFQDN = utf16PtrToString(obj.IPAddressOrFQDN)
	dst.ClusterConnectionPort = obj.ClusterConnectionPort
	return
}

type FabricStartNodeDescription2 struct {
	Kind  FabricStartNodeDescriptionKind
	Value interface{}
}

func (obj *FabricStartNodeDescription2) toInnerStruct() *innerFabricStartNodeDescription2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStartNodeDescription2{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricStartNodeDescription2 struct {
	Kind  FabricStartNodeDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricStartNodeDescription2) toGoStruct() (dst *FabricStartNodeDescription2) {
	if obj == nil {
		return
	}
	dst = &FabricStartNodeDescription2{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricStartNodeDescriptionUsingNodeName struct {
	NodeName              string
	NodeInstanceId        uint64
	IPAddressOrFQDN       string
	ClusterConnectionPort uint32
}

func (obj *FabricStartNodeDescriptionUsingNodeName) toInnerStruct() *innerFabricStartNodeDescriptionUsingNodeName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStartNodeDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.IPAddressOrFQDN = utf16PtrFromString(obj.IPAddressOrFQDN)
	dst.ClusterConnectionPort = obj.ClusterConnectionPort
	return dst
}

type innerFabricStartNodeDescriptionUsingNodeName struct {
	NodeName              *uint16
	NodeInstanceId        uint64
	IPAddressOrFQDN       *uint16
	ClusterConnectionPort uint32
	Reserved              unsafe.Pointer
}

func (obj *innerFabricStartNodeDescriptionUsingNodeName) toGoStruct() (dst *FabricStartNodeDescriptionUsingNodeName) {
	if obj == nil {
		return
	}
	dst = &FabricStartNodeDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.IPAddressOrFQDN = utf16PtrToString(obj.IPAddressOrFQDN)
	dst.ClusterConnectionPort = obj.ClusterConnectionPort
	return
}

type FabricStopNodeDescription2 struct {
	Kind  FabricStopNodeDescriptionKind
	Value interface{}
}

func (obj *FabricStopNodeDescription2) toInnerStruct() *innerFabricStopNodeDescription2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStopNodeDescription2{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricStopNodeDescription2 struct {
	Kind  FabricStopNodeDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricStopNodeDescription2) toGoStruct() (dst *FabricStopNodeDescription2) {
	if obj == nil {
		return
	}
	dst = &FabricStopNodeDescription2{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricStopNodeDescriptionUsingNodeName struct {
	NodeName       string
	NodeInstanceId uint64
}

func (obj *FabricStopNodeDescriptionUsingNodeName) toInnerStruct() *innerFabricStopNodeDescriptionUsingNodeName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStopNodeDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	return dst
}

type innerFabricStopNodeDescriptionUsingNodeName struct {
	NodeName       *uint16
	NodeInstanceId uint64
	Reserved       unsafe.Pointer
}

func (obj *innerFabricStopNodeDescriptionUsingNodeName) toGoStruct() (dst *FabricStopNodeDescriptionUsingNodeName) {
	if obj == nil {
		return
	}
	dst = &FabricStopNodeDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NodeInstanceId = obj.NodeInstanceId
	return
}

type FabricRestartDeployedCodePackageDescription2 struct {
	Kind  FabricRestartDeployedCodePackageDescriptionKind
	Value interface{}
}

func (obj *FabricRestartDeployedCodePackageDescription2) toInnerStruct() *innerFabricRestartDeployedCodePackageDescription2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartDeployedCodePackageDescription2{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricRestartDeployedCodePackageDescription2 struct {
	Kind  FabricRestartDeployedCodePackageDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricRestartDeployedCodePackageDescription2) toGoStruct() (dst *FabricRestartDeployedCodePackageDescription2) {
	if obj == nil {
		return
	}
	dst = &FabricRestartDeployedCodePackageDescription2{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricRestartDeployedCodePackageDescriptionUsingNodeName struct {
	NodeName                   string
	ApplicationName            string
	ServiceManifestName        string
	CodePackageName            string
	CodePackageInstanceId      int64
	ServicePackageActivationId string
}

func (obj *FabricRestartDeployedCodePackageDescriptionUsingNodeName) toInnerStruct() *innerFabricRestartDeployedCodePackageDescriptionUsingNodeName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartDeployedCodePackageDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.CodePackageInstanceId = obj.CodePackageInstanceId
	ex0 := dst
	ex1 := &innerFabricRestartDeployedCodePackageDescriptionUsingNodeNameEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricRestartDeployedCodePackageDescriptionUsingNodeName struct {
	NodeName              *uint16
	ApplicationName       *uint16
	ServiceManifestName   *uint16
	CodePackageName       *uint16
	CodePackageInstanceId int64
	Reserved              unsafe.Pointer
}
type innerFabricRestartDeployedCodePackageDescriptionUsingNodeNameEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricRestartDeployedCodePackageDescriptionUsingNodeName) toGoStruct() (dst *FabricRestartDeployedCodePackageDescriptionUsingNodeName) {
	if obj == nil {
		return
	}
	dst = &FabricRestartDeployedCodePackageDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.CodePackageInstanceId = obj.CodePackageInstanceId
	ex0 := obj
	ex1 := (*innerFabricRestartDeployedCodePackageDescriptionUsingNodeNameEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type FabricDeployedCodePackageResult struct {
	NodeName                   string
	ApplicationName            string
	ServiceManifestName        string
	CodePackageName            string
	CodePackageInstanceId      int64
	ServicePackageActivationId string
}

func (obj *FabricDeployedCodePackageResult) toInnerStruct() *innerFabricDeployedCodePackageResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedCodePackageResult{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.CodePackageInstanceId = obj.CodePackageInstanceId
	ex0 := dst
	ex1 := &innerFabricDeployedCodePackageResultEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedCodePackageResult struct {
	NodeName              *uint16
	ApplicationName       *uint16
	ServiceManifestName   *uint16
	CodePackageName       *uint16
	CodePackageInstanceId int64
	Reserved              unsafe.Pointer
}
type innerFabricDeployedCodePackageResultEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedCodePackageResult) toGoStruct() (dst *FabricDeployedCodePackageResult) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedCodePackageResult{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.CodePackageInstanceId = obj.CodePackageInstanceId
	ex0 := obj
	ex1 := (*innerFabricDeployedCodePackageResultEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type FabricMovePrimaryDescription2 struct {
	Kind  FabricMovePrimaryDescriptionKind
	Value interface{}
}

func (obj *FabricMovePrimaryDescription2) toInnerStruct() *innerFabricMovePrimaryDescription2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricMovePrimaryDescription2{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricMovePrimaryDescription2 struct {
	Kind  FabricMovePrimaryDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricMovePrimaryDescription2) toGoStruct() (dst *FabricMovePrimaryDescription2) {
	if obj == nil {
		return
	}
	dst = &FabricMovePrimaryDescription2{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricMovePrimaryDescriptionUsingNodeName struct {
	NodeName          string
	ServiceName       string
	PartitionId       uuid.UUID
	IgnoreConstraints bool
}

func (obj *FabricMovePrimaryDescriptionUsingNodeName) toInnerStruct() *innerFabricMovePrimaryDescriptionUsingNodeName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricMovePrimaryDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.IgnoreConstraints = obj.IgnoreConstraints
	return dst
}

type innerFabricMovePrimaryDescriptionUsingNodeName struct {
	NodeName          *uint16
	ServiceName       *uint16
	PartitionId       uuid.UUID
	IgnoreConstraints bool
	Reserved          unsafe.Pointer
}

func (obj *innerFabricMovePrimaryDescriptionUsingNodeName) toGoStruct() (dst *FabricMovePrimaryDescriptionUsingNodeName) {
	if obj == nil {
		return
	}
	dst = &FabricMovePrimaryDescriptionUsingNodeName{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.IgnoreConstraints = obj.IgnoreConstraints
	return
}

type FabricMovePrimaryResult struct {
	NodeName    string
	ServiceName string
	PartitionId uuid.UUID
}

func (obj *FabricMovePrimaryResult) toInnerStruct() *innerFabricMovePrimaryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricMovePrimaryResult{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	return dst
}

type innerFabricMovePrimaryResult struct {
	NodeName    *uint16
	ServiceName *uint16
	PartitionId uuid.UUID
	Reserved    unsafe.Pointer
}

func (obj *innerFabricMovePrimaryResult) toGoStruct() (dst *FabricMovePrimaryResult) {
	if obj == nil {
		return
	}
	dst = &FabricMovePrimaryResult{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	return
}

type FabricMoveSecondaryDescription2 struct {
	Kind  FabricMoveSecondaryDescriptionKind
	Value interface{}
}

func (obj *FabricMoveSecondaryDescription2) toInnerStruct() *innerFabricMoveSecondaryDescription2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricMoveSecondaryDescription2{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricMoveSecondaryDescription2 struct {
	Kind  FabricMoveSecondaryDescriptionKind
	Value unsafe.Pointer
}

func (obj *innerFabricMoveSecondaryDescription2) toGoStruct() (dst *FabricMoveSecondaryDescription2) {
	if obj == nil {
		return
	}
	dst = &FabricMoveSecondaryDescription2{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricMoveSecondaryDescriptionUsingNodeName struct {
	CurrentNodeName   string
	NewNodeName       string
	ServiceName       string
	PartitionId       uuid.UUID
	IgnoreConstraints bool
}

func (obj *FabricMoveSecondaryDescriptionUsingNodeName) toInnerStruct() *innerFabricMoveSecondaryDescriptionUsingNodeName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricMoveSecondaryDescriptionUsingNodeName{}
	dst.CurrentNodeName = utf16PtrFromString(obj.CurrentNodeName)
	dst.NewNodeName = utf16PtrFromString(obj.NewNodeName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.IgnoreConstraints = obj.IgnoreConstraints
	return dst
}

type innerFabricMoveSecondaryDescriptionUsingNodeName struct {
	CurrentNodeName   *uint16
	NewNodeName       *uint16
	ServiceName       *uint16
	PartitionId       uuid.UUID
	IgnoreConstraints bool
	Reserved          unsafe.Pointer
}

func (obj *innerFabricMoveSecondaryDescriptionUsingNodeName) toGoStruct() (dst *FabricMoveSecondaryDescriptionUsingNodeName) {
	if obj == nil {
		return
	}
	dst = &FabricMoveSecondaryDescriptionUsingNodeName{}
	dst.CurrentNodeName = utf16PtrToString(obj.CurrentNodeName)
	dst.NewNodeName = utf16PtrToString(obj.NewNodeName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	dst.IgnoreConstraints = obj.IgnoreConstraints
	return
}

type FabricMoveSecondaryResult struct {
	CurrentNodeName string
	NewNodeName     string
	ServiceName     string
	PartitionId     uuid.UUID
}

func (obj *FabricMoveSecondaryResult) toInnerStruct() *innerFabricMoveSecondaryResult {
	if obj == nil {
		return nil
	}
	dst := &innerFabricMoveSecondaryResult{}
	dst.CurrentNodeName = utf16PtrFromString(obj.CurrentNodeName)
	dst.NewNodeName = utf16PtrFromString(obj.NewNodeName)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	return dst
}

type innerFabricMoveSecondaryResult struct {
	CurrentNodeName *uint16
	NewNodeName     *uint16
	ServiceName     *uint16
	PartitionId     uuid.UUID
	Reserved        unsafe.Pointer
}

func (obj *innerFabricMoveSecondaryResult) toGoStruct() (dst *FabricMoveSecondaryResult) {
	if obj == nil {
		return
	}
	dst = &FabricMoveSecondaryResult{}
	dst.CurrentNodeName = utf16PtrToString(obj.CurrentNodeName)
	dst.NewNodeName = utf16PtrToString(obj.NewNodeName)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	return
}

type FabricRestartReplicaDescription struct {
	NodeName            string
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
}

func (obj *FabricRestartReplicaDescription) toInnerStruct() *innerFabricRestartReplicaDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRestartReplicaDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	return dst
}

type innerFabricRestartReplicaDescription struct {
	NodeName            *uint16
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
	Reserved            unsafe.Pointer
}

func (obj *innerFabricRestartReplicaDescription) toGoStruct() (dst *FabricRestartReplicaDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRestartReplicaDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	return
}

type FabricRemoveReplicaDescription struct {
	NodeName            string
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
	ForceRemove         bool
}

func (obj *FabricRemoveReplicaDescription) toInnerStruct() *innerFabricRemoveReplicaDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRemoveReplicaDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	ex0 := dst
	ex1 := &innerFabricRemoveReplicaDescriptionEx1{}
	ex1.ForceRemove = obj.ForceRemove
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricRemoveReplicaDescription struct {
	NodeName            *uint16
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
	Reserved            unsafe.Pointer
}
type innerFabricRemoveReplicaDescriptionEx1 struct {
	ForceRemove bool
	Reserved    unsafe.Pointer
}

func (obj *innerFabricRemoveReplicaDescription) toGoStruct() (dst *FabricRemoveReplicaDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRemoveReplicaDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	ex0 := obj
	ex1 := (*innerFabricRemoveReplicaDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ForceRemove = ex1.ForceRemove
	return
}

type FabricHealthReportSendOptions struct {
	Immediate bool
}
type innerFabricHealthReportSendOptions struct {
	FabricHealthReportSendOptions
	Reserved unsafe.Pointer
}

func (obj *innerFabricHealthReportSendOptions) toGoStruct() *FabricHealthReportSendOptions {
	if obj == nil {
		return nil
	}
	return &obj.FabricHealthReportSendOptions
}
func (obj *FabricHealthReportSendOptions) toInnerStruct() *innerFabricHealthReportSendOptions {
	if obj == nil {
		return nil
	}
	return &innerFabricHealthReportSendOptions{*obj, nil}
}

type FabricHealthInformation struct {
	SourceId          string
	Property          string
	TimeToLiveSeconds uint32
	State             FabricHealthState
	Description       string
	SequenceNumber    int64
	RemoveWhenExpired bool
}

func (obj *FabricHealthInformation) toInnerStruct() *innerFabricHealthInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricHealthInformation{}
	dst.SourceId = utf16PtrFromString(obj.SourceId)
	dst.Property = utf16PtrFromString(obj.Property)
	dst.TimeToLiveSeconds = obj.TimeToLiveSeconds
	dst.State = obj.State
	dst.Description = utf16PtrFromString(obj.Description)
	dst.SequenceNumber = obj.SequenceNumber
	dst.RemoveWhenExpired = obj.RemoveWhenExpired
	return dst
}

type innerFabricHealthInformation struct {
	SourceId          *uint16
	Property          *uint16
	TimeToLiveSeconds uint32
	State             FabricHealthState
	Description       *uint16
	SequenceNumber    int64
	RemoveWhenExpired bool
	Reserved          unsafe.Pointer
}

func (obj *innerFabricHealthInformation) toGoStruct() (dst *FabricHealthInformation) {
	if obj == nil {
		return
	}
	dst = &FabricHealthInformation{}
	dst.SourceId = utf16PtrToString(obj.SourceId)
	dst.Property = utf16PtrToString(obj.Property)
	dst.TimeToLiveSeconds = obj.TimeToLiveSeconds
	dst.State = obj.State
	dst.Description = utf16PtrToString(obj.Description)
	dst.SequenceNumber = obj.SequenceNumber
	dst.RemoveWhenExpired = obj.RemoveWhenExpired
	return
}

type FabricHealthReport struct {
	Kind  FabricHealthReportKind
	Value interface{}
}

func (obj *FabricHealthReport) toInnerStruct() *innerFabricHealthReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricHealthReport{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricHealthReport struct {
	Kind  FabricHealthReportKind
	Value unsafe.Pointer
}

func (obj *innerFabricHealthReport) toGoStruct() (dst *FabricHealthReport) {
	if obj == nil {
		return
	}
	dst = &FabricHealthReport{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricClusterHealthReport struct {
	HealthInformation *FabricHealthInformation
}
type innerFabricClusterHealthReport struct {
	FabricClusterHealthReport
	Reserved unsafe.Pointer
}

func (obj *innerFabricClusterHealthReport) toGoStruct() *FabricClusterHealthReport {
	if obj == nil {
		return nil
	}
	return &obj.FabricClusterHealthReport
}
func (obj *FabricClusterHealthReport) toInnerStruct() *innerFabricClusterHealthReport {
	if obj == nil {
		return nil
	}
	return &innerFabricClusterHealthReport{*obj, nil}
}

type FabricStatelessServiceInstanceHealthReport struct {
	PartitionId       uuid.UUID
	InstanceId        int64
	HealthInformation *FabricHealthInformation
}
type innerFabricStatelessServiceInstanceHealthReport struct {
	FabricStatelessServiceInstanceHealthReport
	Reserved unsafe.Pointer
}

func (obj *innerFabricStatelessServiceInstanceHealthReport) toGoStruct() *FabricStatelessServiceInstanceHealthReport {
	if obj == nil {
		return nil
	}
	return &obj.FabricStatelessServiceInstanceHealthReport
}
func (obj *FabricStatelessServiceInstanceHealthReport) toInnerStruct() *innerFabricStatelessServiceInstanceHealthReport {
	if obj == nil {
		return nil
	}
	return &innerFabricStatelessServiceInstanceHealthReport{*obj, nil}
}

type FabricStatefulServiceReplicaHealthReport struct {
	PartitionId       uuid.UUID
	ReplicaId         int64
	HealthInformation *FabricHealthInformation
}
type innerFabricStatefulServiceReplicaHealthReport struct {
	FabricStatefulServiceReplicaHealthReport
	Reserved unsafe.Pointer
}

func (obj *innerFabricStatefulServiceReplicaHealthReport) toGoStruct() *FabricStatefulServiceReplicaHealthReport {
	if obj == nil {
		return nil
	}
	return &obj.FabricStatefulServiceReplicaHealthReport
}
func (obj *FabricStatefulServiceReplicaHealthReport) toInnerStruct() *innerFabricStatefulServiceReplicaHealthReport {
	if obj == nil {
		return nil
	}
	return &innerFabricStatefulServiceReplicaHealthReport{*obj, nil}
}

type FabricPartitionHealthReport struct {
	PartitionId       uuid.UUID
	HealthInformation *FabricHealthInformation
}
type innerFabricPartitionHealthReport struct {
	FabricPartitionHealthReport
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionHealthReport) toGoStruct() *FabricPartitionHealthReport {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionHealthReport
}
func (obj *FabricPartitionHealthReport) toInnerStruct() *innerFabricPartitionHealthReport {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionHealthReport{*obj, nil}
}

type FabricNodeHealthReport struct {
	NodeName          string
	HealthInformation *FabricHealthInformation
}

func (obj *FabricNodeHealthReport) toInnerStruct() *innerFabricNodeHealthReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealthReport{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthInformation = obj.HealthInformation.toInnerStruct()
	return dst
}

type innerFabricNodeHealthReport struct {
	NodeName          *uint16
	HealthInformation *innerFabricHealthInformation
	Reserved          unsafe.Pointer
}

func (obj *innerFabricNodeHealthReport) toGoStruct() (dst *FabricNodeHealthReport) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealthReport{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthInformation = obj.HealthInformation.toGoStruct()
	return
}

type FabricApplicationHealthReport struct {
	ApplicationName   string
	HealthInformation *FabricHealthInformation
}

func (obj *FabricApplicationHealthReport) toInnerStruct() *innerFabricApplicationHealthReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthReport{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.HealthInformation = obj.HealthInformation.toInnerStruct()
	return dst
}

type innerFabricApplicationHealthReport struct {
	ApplicationName   *uint16
	HealthInformation *innerFabricHealthInformation
	Reserved          unsafe.Pointer
}

func (obj *innerFabricApplicationHealthReport) toGoStruct() (dst *FabricApplicationHealthReport) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthReport{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.HealthInformation = obj.HealthInformation.toGoStruct()
	return
}

type FabricServiceHealthReport struct {
	ServiceName       string
	HealthInformation *FabricHealthInformation
}

func (obj *FabricServiceHealthReport) toInnerStruct() *innerFabricServiceHealthReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealthReport{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.HealthInformation = obj.HealthInformation.toInnerStruct()
	return dst
}

type innerFabricServiceHealthReport struct {
	ServiceName       *uint16
	HealthInformation *innerFabricHealthInformation
	Reserved          unsafe.Pointer
}

func (obj *innerFabricServiceHealthReport) toGoStruct() (dst *FabricServiceHealthReport) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealthReport{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.HealthInformation = obj.HealthInformation.toGoStruct()
	return
}

type FabricDeployedServicePackageHealthReport struct {
	ApplicationName            string
	ServiceManifestName        string
	NodeName                   string
	HealthInformation          *FabricHealthInformation
	ServicePackageActivationId string
}

func (obj *FabricDeployedServicePackageHealthReport) toInnerStruct() *innerFabricDeployedServicePackageHealthReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealthReport{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthInformation = obj.HealthInformation.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthReportEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageHealthReport struct {
	ApplicationName     *uint16
	ServiceManifestName *uint16
	NodeName            *uint16
	HealthInformation   *innerFabricHealthInformation
	Reserved            unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthReportEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthReport) toGoStruct() (dst *FabricDeployedServicePackageHealthReport) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealthReport{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthInformation = obj.HealthInformation.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthReportEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type FabricDeployedApplicationHealthReport struct {
	ApplicationName   string
	NodeName          string
	HealthInformation *FabricHealthInformation
}

func (obj *FabricDeployedApplicationHealthReport) toInnerStruct() *innerFabricDeployedApplicationHealthReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealthReport{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthInformation = obj.HealthInformation.toInnerStruct()
	return dst
}

type innerFabricDeployedApplicationHealthReport struct {
	ApplicationName   *uint16
	NodeName          *uint16
	HealthInformation *innerFabricHealthInformation
	Reserved          unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthReport) toGoStruct() (dst *FabricDeployedApplicationHealthReport) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealthReport{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthInformation = obj.HealthInformation.toGoStruct()
	return
}

type FabricServiceTypeHealthPolicy struct {
	MaxPercentUnhealthyServices             byte
	MaxPercentUnhealthyPartitionsPerService byte
	MaxPercentUnhealthyReplicasPerPartition byte
}
type innerFabricServiceTypeHealthPolicy struct {
	FabricServiceTypeHealthPolicy
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceTypeHealthPolicy) toGoStruct() *FabricServiceTypeHealthPolicy {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceTypeHealthPolicy
}
func (obj *FabricServiceTypeHealthPolicy) toInnerStruct() *innerFabricServiceTypeHealthPolicy {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceTypeHealthPolicy{*obj, nil}
}

type FabricServiceTypeHealthPolicyMapItem struct {
	ServiceTypeName         string
	ServiceTypeHealthPolicy *FabricServiceTypeHealthPolicy
}

func (obj *FabricServiceTypeHealthPolicyMapItem) toInnerStruct() *innerFabricServiceTypeHealthPolicyMapItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceTypeHealthPolicyMapItem{}
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	dst.ServiceTypeHealthPolicy = obj.ServiceTypeHealthPolicy.toInnerStruct()
	return dst
}

type innerFabricServiceTypeHealthPolicyMapItem struct {
	ServiceTypeName         *uint16
	ServiceTypeHealthPolicy *innerFabricServiceTypeHealthPolicy
}

func (obj *innerFabricServiceTypeHealthPolicyMapItem) toGoStruct() (dst *FabricServiceTypeHealthPolicyMapItem) {
	if obj == nil {
		return
	}
	dst = &FabricServiceTypeHealthPolicyMapItem{}
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	dst.ServiceTypeHealthPolicy = obj.ServiceTypeHealthPolicy.toGoStruct()
	return
}

type innerFabricServiceTypeHealthPolicyMap struct {
	Count uint32
	Items *innerFabricServiceTypeHealthPolicyMapItem
}

func (obj *innerFabricServiceTypeHealthPolicyMap) toGoStruct() map[string]FabricServiceTypeHealthPolicy {
	var dst = make(map[string]FabricServiceTypeHealthPolicy)
	{
		var mapvar = make(map[string]FabricServiceTypeHealthPolicy)

		var innerlst []innerFabricServiceTypeHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricServiceTypeHealthPolicy

			k = utf16PtrToString(kv.ServiceTypeName)
			v = kv.ServiceTypeHealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst = mapvar
	}
	return dst
}

type FabricApplicationHealthPolicy struct {
	ConsiderWarningAsError                  bool
	MaxPercentUnhealthyDeployedApplications byte
	DefaultServiceTypeHealthPolicy          *FabricServiceTypeHealthPolicy
	ServiceTypeHealthPolicyMap              map[string]FabricServiceTypeHealthPolicy
}

func (obj *FabricApplicationHealthPolicy) toInnerStruct() *innerFabricApplicationHealthPolicy {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthPolicy{}
	dst.ConsiderWarningAsError = obj.ConsiderWarningAsError
	dst.MaxPercentUnhealthyDeployedApplications = obj.MaxPercentUnhealthyDeployedApplications
	dst.DefaultServiceTypeHealthPolicy = obj.DefaultServiceTypeHealthPolicy.toInnerStruct()
	{
		mapobj := &innerFabricServiceTypeHealthPolicyMap{}

		var tmp []innerFabricServiceTypeHealthPolicyMapItem

		for k, v := range obj.ServiceTypeHealthPolicyMap {
			kv := innerFabricServiceTypeHealthPolicyMapItem{}

			kv.ServiceTypeName = utf16PtrFromString(k)
			kv.ServiceTypeHealthPolicy = v.toInnerStruct()

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		dst.ServiceTypeHealthPolicyMap = mapobj
	}
	return dst
}

type innerFabricApplicationHealthPolicy struct {
	ConsiderWarningAsError                  bool
	MaxPercentUnhealthyDeployedApplications byte
	DefaultServiceTypeHealthPolicy          *innerFabricServiceTypeHealthPolicy
	ServiceTypeHealthPolicyMap              *innerFabricServiceTypeHealthPolicyMap
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricApplicationHealthPolicy) toGoStruct() (dst *FabricApplicationHealthPolicy) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthPolicy{}
	dst.ConsiderWarningAsError = obj.ConsiderWarningAsError
	dst.MaxPercentUnhealthyDeployedApplications = obj.MaxPercentUnhealthyDeployedApplications
	dst.DefaultServiceTypeHealthPolicy = obj.DefaultServiceTypeHealthPolicy.toGoStruct()
	{
		var mapvar = make(map[string]FabricServiceTypeHealthPolicy)

		var innerlst []innerFabricServiceTypeHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ServiceTypeHealthPolicyMap.Items), int(obj.ServiceTypeHealthPolicyMap.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricServiceTypeHealthPolicy

			k = utf16PtrToString(kv.ServiceTypeName)
			v = kv.ServiceTypeHealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst.ServiceTypeHealthPolicyMap = mapvar
	}
	return
}

type FabricApplicationHealthPolicyMapItem struct {
	ApplicationName string
	HealthPolicy    *FabricApplicationHealthPolicy
}

func (obj *FabricApplicationHealthPolicyMapItem) toInnerStruct() *innerFabricApplicationHealthPolicyMapItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthPolicyMapItem{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	return dst
}

type innerFabricApplicationHealthPolicyMapItem struct {
	ApplicationName *uint16
	HealthPolicy    *innerFabricApplicationHealthPolicy
}

func (obj *innerFabricApplicationHealthPolicyMapItem) toGoStruct() (dst *FabricApplicationHealthPolicyMapItem) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthPolicyMapItem{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	return
}

type innerFabricApplicationHealthPolicyMap struct {
	Count uint32
	Items *innerFabricApplicationHealthPolicyMapItem
}

func (obj *innerFabricApplicationHealthPolicyMap) toGoStruct() map[string]FabricApplicationHealthPolicy {
	var dst = make(map[string]FabricApplicationHealthPolicy)
	{
		var mapvar = make(map[string]FabricApplicationHealthPolicy)

		var innerlst []innerFabricApplicationHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricApplicationHealthPolicy

			k = utf16PtrToString(kv.ApplicationName)
			v = kv.HealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst = mapvar
	}
	return dst
}

type FabricClusterHealthPolicy struct {
	ConsiderWarningAsError          bool
	MaxPercentUnhealthyNodes        byte
	MaxPercentUnhealthyApplications byte
	ApplicationTypeHealthPolicyMap  map[string]byte
}

func (obj *FabricClusterHealthPolicy) toInnerStruct() *innerFabricClusterHealthPolicy {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterHealthPolicy{}
	dst.ConsiderWarningAsError = obj.ConsiderWarningAsError
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	ex0 := dst
	ex1 := &innerFabricClusterHealthPolicyEx1{}
	{
		mapobj := &innerFabricApplicationTypeHealthPolicyMap{}

		var tmp []innerFabricApplicationTypeHealthPolicyMapItem

		for k, v := range obj.ApplicationTypeHealthPolicyMap {
			kv := innerFabricApplicationTypeHealthPolicyMapItem{}

			kv.ApplicationTypeName = utf16PtrFromString(k)
			kv.MaxPercentUnhealthyApplications = v

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		ex1.ApplicationTypeHealthPolicyMap = mapobj
	}
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricClusterHealthPolicy struct {
	ConsiderWarningAsError          bool
	MaxPercentUnhealthyNodes        byte
	MaxPercentUnhealthyApplications byte
	Reserved                        unsafe.Pointer
}
type innerFabricClusterHealthPolicyEx1 struct {
	ApplicationTypeHealthPolicyMap *innerFabricApplicationTypeHealthPolicyMap
	Reserved                       unsafe.Pointer
}

func (obj *innerFabricClusterHealthPolicy) toGoStruct() (dst *FabricClusterHealthPolicy) {
	if obj == nil {
		return
	}
	dst = &FabricClusterHealthPolicy{}
	dst.ConsiderWarningAsError = obj.ConsiderWarningAsError
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	ex0 := obj
	ex1 := (*innerFabricClusterHealthPolicyEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var mapvar = make(map[string]byte)

		var innerlst []innerFabricApplicationTypeHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.ApplicationTypeHealthPolicyMap.Items), int(ex1.ApplicationTypeHealthPolicyMap.Count))

		for _, kv := range innerlst {
			var k string
			var v byte

			k = utf16PtrToString(kv.ApplicationTypeName)
			v = kv.MaxPercentUnhealthyApplications
			mapvar[k] = v

		}

		dst.ApplicationTypeHealthPolicyMap = mapvar
	}
	return
}

type FabricClusterUpgradeHealthPolicy struct {
	MaxPercentDeltaUnhealthyNodes              byte
	MaxPercentUpgradeDomainDeltaUnhealthyNodes byte
}
type innerFabricClusterUpgradeHealthPolicy struct {
	FabricClusterUpgradeHealthPolicy
	Reserved unsafe.Pointer
}

func (obj *innerFabricClusterUpgradeHealthPolicy) toGoStruct() *FabricClusterUpgradeHealthPolicy {
	if obj == nil {
		return nil
	}
	return &obj.FabricClusterUpgradeHealthPolicy
}
func (obj *FabricClusterUpgradeHealthPolicy) toInnerStruct() *innerFabricClusterUpgradeHealthPolicy {
	if obj == nil {
		return nil
	}
	return &innerFabricClusterUpgradeHealthPolicy{*obj, nil}
}

type FabricLoadMetricInformation struct {
	Name                             string
	IsBalancedBefore                 bool
	IsBalancedAfter                  bool
	DeviationBefore                  float64
	DeviationAfter                   float64
	BalancingThreshold               float64
	Action                           string
	ActivityThreshold                uint32
	ClusterCapacity                  int64
	ClusterLoad                      int64
	RemainingUnbufferedCapacity      int64
	NodeBufferPercentage             float64
	BufferedCapacity                 int64
	RemainingBufferedCapacity        int64
	IsClusterCapacityViolation       bool
	MinNodeLoadValue                 int64
	MinNodeLoadNodeId                FabricNodeId
	MaxNodeLoadValue                 int64
	MaxNodeLoadNodeId                FabricNodeId
	CurrentClusterLoad               float64
	BufferedClusterCapacityRemaining float64
	ClusterCapacityRemaining         float64
	MaximumNodeLoad                  float64
	MinimumNodeLoad                  float64
}

func (obj *FabricLoadMetricInformation) toInnerStruct() *innerFabricLoadMetricInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricLoadMetricInformation{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.IsBalancedBefore = obj.IsBalancedBefore
	dst.IsBalancedAfter = obj.IsBalancedAfter
	dst.DeviationBefore = obj.DeviationBefore
	dst.DeviationAfter = obj.DeviationAfter
	dst.BalancingThreshold = obj.BalancingThreshold
	dst.Action = utf16PtrFromString(obj.Action)
	ex0 := dst
	ex1 := &innerFabricLoadMetricInformationEx1{}
	ex1.ActivityThreshold = obj.ActivityThreshold
	ex1.ClusterCapacity = obj.ClusterCapacity
	ex1.ClusterLoad = obj.ClusterLoad
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricLoadMetricInformationEx2{}
	ex2.RemainingUnbufferedCapacity = obj.RemainingUnbufferedCapacity
	ex2.NodeBufferPercentage = obj.NodeBufferPercentage
	ex2.BufferedCapacity = obj.BufferedCapacity
	ex2.RemainingBufferedCapacity = obj.RemainingBufferedCapacity
	ex2.IsClusterCapacityViolation = obj.IsClusterCapacityViolation
	ex2.MinNodeLoadValue = obj.MinNodeLoadValue
	ex2.MinNodeLoadNodeId = *obj.MinNodeLoadNodeId.toInnerStruct()
	ex2.MaxNodeLoadValue = obj.MaxNodeLoadValue
	ex2.MaxNodeLoadNodeId = *obj.MaxNodeLoadNodeId.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricLoadMetricInformationEx3{}
	ex3.CurrentClusterLoad = obj.CurrentClusterLoad
	ex3.BufferedClusterCapacityRemaining = obj.BufferedClusterCapacityRemaining
	ex3.ClusterCapacityRemaining = obj.ClusterCapacityRemaining
	ex3.MaximumNodeLoad = obj.MaximumNodeLoad
	ex3.MinimumNodeLoad = obj.MinimumNodeLoad
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricLoadMetricInformation struct {
	Name               *uint16
	IsBalancedBefore   bool
	IsBalancedAfter    bool
	DeviationBefore    float64
	DeviationAfter     float64
	BalancingThreshold float64
	Action             *uint16
	Reserved           unsafe.Pointer
}
type innerFabricLoadMetricInformationEx1 struct {
	ActivityThreshold uint32
	ClusterCapacity   int64
	ClusterLoad       int64
	Reserved          unsafe.Pointer
}
type innerFabricLoadMetricInformationEx2 struct {
	RemainingUnbufferedCapacity int64
	NodeBufferPercentage        float64
	BufferedCapacity            int64
	RemainingBufferedCapacity   int64
	IsClusterCapacityViolation  bool
	MinNodeLoadValue            int64
	MinNodeLoadNodeId           innerFabricNodeId
	MaxNodeLoadValue            int64
	MaxNodeLoadNodeId           innerFabricNodeId
	Reserved                    unsafe.Pointer
}
type innerFabricLoadMetricInformationEx3 struct {
	CurrentClusterLoad               float64
	BufferedClusterCapacityRemaining float64
	ClusterCapacityRemaining         float64
	MaximumNodeLoad                  float64
	MinimumNodeLoad                  float64
	Reserved                         unsafe.Pointer
}

func (obj *innerFabricLoadMetricInformation) toGoStruct() (dst *FabricLoadMetricInformation) {
	if obj == nil {
		return
	}
	dst = &FabricLoadMetricInformation{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.IsBalancedBefore = obj.IsBalancedBefore
	dst.IsBalancedAfter = obj.IsBalancedAfter
	dst.DeviationBefore = obj.DeviationBefore
	dst.DeviationAfter = obj.DeviationAfter
	dst.BalancingThreshold = obj.BalancingThreshold
	dst.Action = utf16PtrToString(obj.Action)
	ex0 := obj
	ex1 := (*innerFabricLoadMetricInformationEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ActivityThreshold = ex1.ActivityThreshold
	dst.ClusterCapacity = ex1.ClusterCapacity
	dst.ClusterLoad = ex1.ClusterLoad
	ex2 := (*innerFabricLoadMetricInformationEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.RemainingUnbufferedCapacity = ex2.RemainingUnbufferedCapacity
	dst.NodeBufferPercentage = ex2.NodeBufferPercentage
	dst.BufferedCapacity = ex2.BufferedCapacity
	dst.RemainingBufferedCapacity = ex2.RemainingBufferedCapacity
	dst.IsClusterCapacityViolation = ex2.IsClusterCapacityViolation
	dst.MinNodeLoadValue = ex2.MinNodeLoadValue
	dst.MinNodeLoadNodeId = *ex2.MinNodeLoadNodeId.toGoStruct()
	dst.MaxNodeLoadValue = ex2.MaxNodeLoadValue
	dst.MaxNodeLoadNodeId = *ex2.MaxNodeLoadNodeId.toGoStruct()
	ex3 := (*innerFabricLoadMetricInformationEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.CurrentClusterLoad = ex3.CurrentClusterLoad
	dst.BufferedClusterCapacityRemaining = ex3.BufferedClusterCapacityRemaining
	dst.ClusterCapacityRemaining = ex3.ClusterCapacityRemaining
	dst.MaximumNodeLoad = ex3.MaximumNodeLoad
	dst.MinimumNodeLoad = ex3.MinimumNodeLoad
	return
}

type innerFabricLoadMetricInformationList struct {
	Count uint32
	Items *innerFabricLoadMetricInformation
}

func (obj *innerFabricLoadMetricInformationList) toGoStruct() []FabricLoadMetricInformation {
	var dst []FabricLoadMetricInformation
	{
		var innerlst []innerFabricLoadMetricInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricInformation

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricClusterLoadInformation struct {
	LastBalancingStartTimeUtc time.Time
	LastBalancingEndTimeUtc   time.Time
	LoadMetricInformation     []FabricLoadMetricInformation
}

func (obj *FabricClusterLoadInformation) toInnerStruct() *innerFabricClusterLoadInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterLoadInformation{}
	dst.LastBalancingStartTimeUtc = timeToFiletime(obj.LastBalancingStartTimeUtc)
	dst.LastBalancingEndTimeUtc = timeToFiletime(obj.LastBalancingEndTimeUtc)
	lst_41 := &innerFabricLoadMetricInformationList{}
	{

		var tmp []innerFabricLoadMetricInformation

		for _, item := range obj.LoadMetricInformation {
			var tmpitem innerFabricLoadMetricInformation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_41.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_41.Items = &tmp[0]
		}

	}
	dst.LoadMetricInformation = lst_41
	return dst
}

type innerFabricClusterLoadInformation struct {
	LastBalancingStartTimeUtc filetime
	LastBalancingEndTimeUtc   filetime
	LoadMetricInformation     *innerFabricLoadMetricInformationList
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricClusterLoadInformation) toGoStruct() (dst *FabricClusterLoadInformation) {
	if obj == nil {
		return
	}
	dst = &FabricClusterLoadInformation{}
	dst.LastBalancingStartTimeUtc = obj.LastBalancingStartTimeUtc.ToTime()
	dst.LastBalancingEndTimeUtc = obj.LastBalancingEndTimeUtc.ToTime()
	{
		var innerlst []innerFabricLoadMetricInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.LoadMetricInformation.Items), int(obj.LoadMetricInformation.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricInformation

			tmpitem = *item.toGoStruct()

			dst.LoadMetricInformation = append(dst.LoadMetricInformation, tmpitem)
		}

	}
	return
}

type FabricPartitionLoadInformation struct {
	PartitionId                uuid.UUID
	PrimaryLoadMetricReports   []FabricLoadMetricReport
	SecondaryLoadMetricReports []FabricLoadMetricReport
}

func (obj *FabricPartitionLoadInformation) toInnerStruct() *innerFabricPartitionLoadInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionLoadInformation{}
	dst.PartitionId = obj.PartitionId
	lst_42 := &innerFabricLoadMetricReportList{}
	{

		var tmp []innerFabricLoadMetricReport

		for _, item := range obj.PrimaryLoadMetricReports {
			var tmpitem innerFabricLoadMetricReport

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_42.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_42.Items = &tmp[0]
		}

	}
	dst.PrimaryLoadMetricReports = lst_42
	lst_43 := &innerFabricLoadMetricReportList{}
	{

		var tmp []innerFabricLoadMetricReport

		for _, item := range obj.SecondaryLoadMetricReports {
			var tmpitem innerFabricLoadMetricReport

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_43.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_43.Items = &tmp[0]
		}

	}
	dst.SecondaryLoadMetricReports = lst_43
	return dst
}

type innerFabricPartitionLoadInformation struct {
	PartitionId                uuid.UUID
	PrimaryLoadMetricReports   *innerFabricLoadMetricReportList
	SecondaryLoadMetricReports *innerFabricLoadMetricReportList
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricPartitionLoadInformation) toGoStruct() (dst *FabricPartitionLoadInformation) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionLoadInformation{}
	dst.PartitionId = obj.PartitionId
	{
		var innerlst []innerFabricLoadMetricReport
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.PrimaryLoadMetricReports.Items), int(obj.PrimaryLoadMetricReports.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricReport

			tmpitem = *item.toGoStruct()

			dst.PrimaryLoadMetricReports = append(dst.PrimaryLoadMetricReports, tmpitem)
		}

	}
	{
		var innerlst []innerFabricLoadMetricReport
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.SecondaryLoadMetricReports.Items), int(obj.SecondaryLoadMetricReports.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricReport

			tmpitem = *item.toGoStruct()

			dst.SecondaryLoadMetricReports = append(dst.SecondaryLoadMetricReports, tmpitem)
		}

	}
	return
}

type FabricReplicaLoadInformation struct {
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
	LoadMetricReports   []FabricLoadMetricReport
}

func (obj *FabricReplicaLoadInformation) toInnerStruct() *innerFabricReplicaLoadInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicaLoadInformation{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	lst_44 := &innerFabricLoadMetricReportList{}
	{

		var tmp []innerFabricLoadMetricReport

		for _, item := range obj.LoadMetricReports {
			var tmpitem innerFabricLoadMetricReport

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_44.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_44.Items = &tmp[0]
		}

	}
	dst.LoadMetricReports = lst_44
	return dst
}

type innerFabricReplicaLoadInformation struct {
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
	LoadMetricReports   *innerFabricLoadMetricReportList
	Reserved            unsafe.Pointer
}

func (obj *innerFabricReplicaLoadInformation) toGoStruct() (dst *FabricReplicaLoadInformation) {
	if obj == nil {
		return
	}
	dst = &FabricReplicaLoadInformation{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	{
		var innerlst []innerFabricLoadMetricReport
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.LoadMetricReports.Items), int(obj.LoadMetricReports.Count))

		for _, item := range innerlst {
			var tmpitem FabricLoadMetricReport

			tmpitem = *item.toGoStruct()

			dst.LoadMetricReports = append(dst.LoadMetricReports, tmpitem)
		}

	}
	return
}

type FabricUnplacedReplicaInformation struct {
	ServiceName            string
	PartitionId            uuid.UUID
	UnplacedReplicaReasons []string
}

func (obj *FabricUnplacedReplicaInformation) toInnerStruct() *innerFabricUnplacedReplicaInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUnplacedReplicaInformation{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	lst_45 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.UnplacedReplicaReasons {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_45.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_45.Items = &tmp[0]
		}

	}
	dst.UnplacedReplicaReasons = lst_45
	return dst
}

type innerFabricUnplacedReplicaInformation struct {
	ServiceName            *uint16
	PartitionId            uuid.UUID
	UnplacedReplicaReasons *innerFabricStringList
	Reserved               unsafe.Pointer
}

func (obj *innerFabricUnplacedReplicaInformation) toGoStruct() (dst *FabricUnplacedReplicaInformation) {
	if obj == nil {
		return
	}
	dst = &FabricUnplacedReplicaInformation{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.PartitionId = obj.PartitionId
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnplacedReplicaReasons.Items), int(obj.UnplacedReplicaReasons.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.UnplacedReplicaReasons = append(dst.UnplacedReplicaReasons, tmpitem)
		}

	}
	return
}

type FabricNodeLoadMetricInformation struct {
	Name                          string
	NodeCapacity                  int64
	NodeLoad                      int64
	NodeRemainingCapacity         int64
	IsCapacityViolation           bool
	NodeBufferedCapacity          int64
	NodeRemainingBufferedCapacity int64
	CurrentNodeLoad               float64
	NodeCapacityRemaining         float64
	BufferedNodeCapacityRemaining float64
}

func (obj *FabricNodeLoadMetricInformation) toInnerStruct() *innerFabricNodeLoadMetricInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeLoadMetricInformation{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.NodeCapacity = obj.NodeCapacity
	dst.NodeLoad = obj.NodeLoad
	dst.NodeRemainingCapacity = obj.NodeRemainingCapacity
	dst.IsCapacityViolation = obj.IsCapacityViolation
	ex0 := dst
	ex1 := &innerFabricNodeLoadMetricInformationEx1{}
	ex1.NodeBufferedCapacity = obj.NodeBufferedCapacity
	ex1.NodeRemainingBufferedCapacity = obj.NodeRemainingBufferedCapacity
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricNodeLoadMetricInformationEx2{}
	ex2.CurrentNodeLoad = obj.CurrentNodeLoad
	ex2.NodeCapacityRemaining = obj.NodeCapacityRemaining
	ex2.BufferedNodeCapacityRemaining = obj.BufferedNodeCapacityRemaining
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricNodeLoadMetricInformation struct {
	Name                  *uint16
	NodeCapacity          int64
	NodeLoad              int64
	NodeRemainingCapacity int64
	IsCapacityViolation   bool
	Reserved              unsafe.Pointer
}
type innerFabricNodeLoadMetricInformationEx1 struct {
	NodeBufferedCapacity          int64
	NodeRemainingBufferedCapacity int64
	Reserved                      unsafe.Pointer
}
type innerFabricNodeLoadMetricInformationEx2 struct {
	CurrentNodeLoad               float64
	NodeCapacityRemaining         float64
	BufferedNodeCapacityRemaining float64
	Reserved                      unsafe.Pointer
}

func (obj *innerFabricNodeLoadMetricInformation) toGoStruct() (dst *FabricNodeLoadMetricInformation) {
	if obj == nil {
		return
	}
	dst = &FabricNodeLoadMetricInformation{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.NodeCapacity = obj.NodeCapacity
	dst.NodeLoad = obj.NodeLoad
	dst.NodeRemainingCapacity = obj.NodeRemainingCapacity
	dst.IsCapacityViolation = obj.IsCapacityViolation
	ex0 := obj
	ex1 := (*innerFabricNodeLoadMetricInformationEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.NodeBufferedCapacity = ex1.NodeBufferedCapacity
	dst.NodeRemainingBufferedCapacity = ex1.NodeRemainingBufferedCapacity
	ex2 := (*innerFabricNodeLoadMetricInformationEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.CurrentNodeLoad = ex2.CurrentNodeLoad
	dst.NodeCapacityRemaining = ex2.NodeCapacityRemaining
	dst.BufferedNodeCapacityRemaining = ex2.BufferedNodeCapacityRemaining
	return
}

type innerFabricNodeLoadMetricInformationList struct {
	Count uint32
	Items *innerFabricNodeLoadMetricInformation
}

func (obj *innerFabricNodeLoadMetricInformationList) toGoStruct() []FabricNodeLoadMetricInformation {
	var dst []FabricNodeLoadMetricInformation
	{
		var innerlst []innerFabricNodeLoadMetricInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeLoadMetricInformation

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricNodeLoadInformation struct {
	NodeName                  string
	NodeLoadMetricInformation []FabricNodeLoadMetricInformation
}

func (obj *FabricNodeLoadInformation) toInnerStruct() *innerFabricNodeLoadInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeLoadInformation{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	lst_46 := &innerFabricNodeLoadMetricInformationList{}
	{

		var tmp []innerFabricNodeLoadMetricInformation

		for _, item := range obj.NodeLoadMetricInformation {
			var tmpitem innerFabricNodeLoadMetricInformation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_46.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_46.Items = &tmp[0]
		}

	}
	dst.NodeLoadMetricInformation = lst_46
	return dst
}

type innerFabricNodeLoadInformation struct {
	NodeName                  *uint16
	NodeLoadMetricInformation *innerFabricNodeLoadMetricInformationList
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricNodeLoadInformation) toGoStruct() (dst *FabricNodeLoadInformation) {
	if obj == nil {
		return
	}
	dst = &FabricNodeLoadInformation{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	{
		var innerlst []innerFabricNodeLoadMetricInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.NodeLoadMetricInformation.Items), int(obj.NodeLoadMetricInformation.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeLoadMetricInformation

			tmpitem = *item.toGoStruct()

			dst.NodeLoadMetricInformation = append(dst.NodeLoadMetricInformation, tmpitem)
		}

	}
	return
}

type FabricApplicationLoadMetricInformation struct {
	Name                string
	ReservationCapacity int64
	ApplicationCapacity int64
	ApplicationLoad     int64
}

func (obj *FabricApplicationLoadMetricInformation) toInnerStruct() *innerFabricApplicationLoadMetricInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationLoadMetricInformation{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.ReservationCapacity = obj.ReservationCapacity
	dst.ApplicationCapacity = obj.ApplicationCapacity
	dst.ApplicationLoad = obj.ApplicationLoad
	return dst
}

type innerFabricApplicationLoadMetricInformation struct {
	Name                *uint16
	ReservationCapacity int64
	ApplicationCapacity int64
	ApplicationLoad     int64
	Reserved            unsafe.Pointer
}

func (obj *innerFabricApplicationLoadMetricInformation) toGoStruct() (dst *FabricApplicationLoadMetricInformation) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationLoadMetricInformation{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.ReservationCapacity = obj.ReservationCapacity
	dst.ApplicationCapacity = obj.ApplicationCapacity
	dst.ApplicationLoad = obj.ApplicationLoad
	return
}

type innerFabricApplicationLoadMetricInformationList struct {
	Count       uint32
	LoadMetrics *innerFabricApplicationLoadMetricInformation
	Reserved    unsafe.Pointer
}

func (obj *innerFabricApplicationLoadMetricInformationList) toGoStruct() []FabricApplicationLoadMetricInformation {
	var dst []FabricApplicationLoadMetricInformation
	{
		var innerlst []innerFabricApplicationLoadMetricInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.LoadMetrics), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationLoadMetricInformation

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationLoadInformation struct {
	Name                             string
	MinimumNodes                     uint32
	MaximumNodes                     uint32
	NodeCount                        uint32
	ApplicationLoadMetricInformation []FabricApplicationLoadMetricInformation
}

func (obj *FabricApplicationLoadInformation) toInnerStruct() *innerFabricApplicationLoadInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationLoadInformation{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.MinimumNodes = obj.MinimumNodes
	dst.MaximumNodes = obj.MaximumNodes
	dst.NodeCount = obj.NodeCount
	lst_47 := &innerFabricApplicationLoadMetricInformationList{}
	{

		var tmp []innerFabricApplicationLoadMetricInformation

		for _, item := range obj.ApplicationLoadMetricInformation {
			var tmpitem innerFabricApplicationLoadMetricInformation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_47.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_47.LoadMetrics = &tmp[0]
		}

	}
	dst.ApplicationLoadMetricInformation = lst_47
	return dst
}

type innerFabricApplicationLoadInformation struct {
	Name                             *uint16
	MinimumNodes                     uint32
	MaximumNodes                     uint32
	NodeCount                        uint32
	ApplicationLoadMetricInformation *innerFabricApplicationLoadMetricInformationList
	Reserved                         unsafe.Pointer
}

func (obj *innerFabricApplicationLoadInformation) toGoStruct() (dst *FabricApplicationLoadInformation) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationLoadInformation{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.MinimumNodes = obj.MinimumNodes
	dst.MaximumNodes = obj.MaximumNodes
	dst.NodeCount = obj.NodeCount
	{
		var innerlst []innerFabricApplicationLoadMetricInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationLoadMetricInformation.LoadMetrics), int(obj.ApplicationLoadMetricInformation.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationLoadMetricInformation

			tmpitem = *item.toGoStruct()

			dst.ApplicationLoadMetricInformation = append(dst.ApplicationLoadMetricInformation, tmpitem)
		}

	}
	return
}

type FabricGatewayInformation struct {
	NodeAddress    string
	NodeId         FabricNodeId
	NodeInstanceId uint64
	NodeName       string
}

func (obj *FabricGatewayInformation) toInnerStruct() *innerFabricGatewayInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricGatewayInformation{}
	dst.NodeAddress = utf16PtrFromString(obj.NodeAddress)
	dst.NodeId = *obj.NodeId.toInnerStruct()
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	return dst
}

type innerFabricGatewayInformation struct {
	NodeAddress    *uint16
	NodeId         innerFabricNodeId
	NodeInstanceId uint64
	NodeName       *uint16
	Reserved       unsafe.Pointer
}

func (obj *innerFabricGatewayInformation) toGoStruct() (dst *FabricGatewayInformation) {
	if obj == nil {
		return
	}
	dst = &FabricGatewayInformation{}
	dst.NodeAddress = utf16PtrToString(obj.NodeAddress)
	dst.NodeId = *obj.NodeId.toGoStruct()
	dst.NodeInstanceId = obj.NodeInstanceId
	dst.NodeName = utf16PtrToString(obj.NodeName)
	return
}

type FabricStartApprovedUpgradesDescription struct {
	OperationId       uuid.UUID
	ClusterConfigPath string
	RollbackOnFailure bool
}

func (obj *FabricStartApprovedUpgradesDescription) toInnerStruct() *innerFabricStartApprovedUpgradesDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStartApprovedUpgradesDescription{}
	dst.OperationId = obj.OperationId
	dst.ClusterConfigPath = utf16PtrFromString(obj.ClusterConfigPath)
	dst.RollbackOnFailure = obj.RollbackOnFailure
	return dst
}

type innerFabricStartApprovedUpgradesDescription struct {
	OperationId       uuid.UUID
	ClusterConfigPath *uint16
	RollbackOnFailure bool
	Reserved          unsafe.Pointer
}

func (obj *innerFabricStartApprovedUpgradesDescription) toGoStruct() (dst *FabricStartApprovedUpgradesDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStartApprovedUpgradesDescription{}
	dst.OperationId = obj.OperationId
	dst.ClusterConfigPath = utf16PtrToString(obj.ClusterConfigPath)
	dst.RollbackOnFailure = obj.RollbackOnFailure
	return
}

type FabricStartUpgradeDescription struct {
	ClusterConfig                              string
	HealthCheckRetryTimeoutInSeconds           uint32
	HealthCheckWaitDurationInSeconds           uint32
	HealthCheckStableDurationInSeconds         uint32
	UpgradeDomainTimeoutInSeconds              uint32
	UpgradeTimeoutInSeconds                    uint32
	MaxPercentUnhealthyApplications            byte
	MaxPercentUnhealthyNodes                   byte
	MaxPercentDeltaUnhealthyNodes              byte
	MaxPercentUpgradeDomainDeltaUnhealthyNodes byte
	ApplicationHealthPolicyMap                 map[string]FabricApplicationHealthPolicy
}

func (obj *FabricStartUpgradeDescription) toInnerStruct() *innerFabricStartUpgradeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStartUpgradeDescription{}
	dst.ClusterConfig = utf16PtrFromString(obj.ClusterConfig)
	dst.HealthCheckRetryTimeoutInSeconds = obj.HealthCheckRetryTimeoutInSeconds
	dst.HealthCheckWaitDurationInSeconds = obj.HealthCheckWaitDurationInSeconds
	dst.HealthCheckStableDurationInSeconds = obj.HealthCheckStableDurationInSeconds
	dst.UpgradeDomainTimeoutInSeconds = obj.UpgradeDomainTimeoutInSeconds
	dst.UpgradeTimeoutInSeconds = obj.UpgradeTimeoutInSeconds
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	dst.MaxPercentDeltaUnhealthyNodes = obj.MaxPercentDeltaUnhealthyNodes
	dst.MaxPercentUpgradeDomainDeltaUnhealthyNodes = obj.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	ex0 := dst
	ex1 := &innerFabricStartUpgradeDescriptionEx1{}
	{
		mapobj := &innerFabricApplicationHealthPolicyMap{}

		var tmp []innerFabricApplicationHealthPolicyMapItem

		for k, v := range obj.ApplicationHealthPolicyMap {
			kv := innerFabricApplicationHealthPolicyMapItem{}

			kv.ApplicationName = utf16PtrFromString(k)
			kv.HealthPolicy = v.toInnerStruct()

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		ex1.ApplicationHealthPolicyMap = mapobj
	}
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStartUpgradeDescription struct {
	ClusterConfig                              *uint16
	HealthCheckRetryTimeoutInSeconds           uint32
	HealthCheckWaitDurationInSeconds           uint32
	HealthCheckStableDurationInSeconds         uint32
	UpgradeDomainTimeoutInSeconds              uint32
	UpgradeTimeoutInSeconds                    uint32
	MaxPercentUnhealthyApplications            byte
	MaxPercentUnhealthyNodes                   byte
	MaxPercentDeltaUnhealthyNodes              byte
	MaxPercentUpgradeDomainDeltaUnhealthyNodes byte
	Reserved                                   unsafe.Pointer
}
type innerFabricStartUpgradeDescriptionEx1 struct {
	ApplicationHealthPolicyMap *innerFabricApplicationHealthPolicyMap
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricStartUpgradeDescription) toGoStruct() (dst *FabricStartUpgradeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricStartUpgradeDescription{}
	dst.ClusterConfig = utf16PtrToString(obj.ClusterConfig)
	dst.HealthCheckRetryTimeoutInSeconds = obj.HealthCheckRetryTimeoutInSeconds
	dst.HealthCheckWaitDurationInSeconds = obj.HealthCheckWaitDurationInSeconds
	dst.HealthCheckStableDurationInSeconds = obj.HealthCheckStableDurationInSeconds
	dst.UpgradeDomainTimeoutInSeconds = obj.UpgradeDomainTimeoutInSeconds
	dst.UpgradeTimeoutInSeconds = obj.UpgradeTimeoutInSeconds
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	dst.MaxPercentDeltaUnhealthyNodes = obj.MaxPercentDeltaUnhealthyNodes
	dst.MaxPercentUpgradeDomainDeltaUnhealthyNodes = obj.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	ex0 := obj
	ex1 := (*innerFabricStartUpgradeDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var mapvar = make(map[string]FabricApplicationHealthPolicy)

		var innerlst []innerFabricApplicationHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.ApplicationHealthPolicyMap.Items), int(ex1.ApplicationHealthPolicyMap.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricApplicationHealthPolicy

			k = utf16PtrToString(kv.ApplicationName)
			v = kv.HealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst.ApplicationHealthPolicyMap = mapvar
	}
	return
}

type FabricUpgradeOrchestrationServiceState struct {
	CurrentCodeVersion     string
	CurrentManifestVersion string
	TargetCodeVersion      string
	TargetManifestVersion  string
	PendingUpgradeType     string
}

func (obj *FabricUpgradeOrchestrationServiceState) toInnerStruct() *innerFabricUpgradeOrchestrationServiceState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeOrchestrationServiceState{}
	dst.CurrentCodeVersion = utf16PtrFromString(obj.CurrentCodeVersion)
	dst.CurrentManifestVersion = utf16PtrFromString(obj.CurrentManifestVersion)
	dst.TargetCodeVersion = utf16PtrFromString(obj.TargetCodeVersion)
	dst.TargetManifestVersion = utf16PtrFromString(obj.TargetManifestVersion)
	dst.PendingUpgradeType = utf16PtrFromString(obj.PendingUpgradeType)
	return dst
}

type innerFabricUpgradeOrchestrationServiceState struct {
	CurrentCodeVersion     *uint16
	CurrentManifestVersion *uint16
	TargetCodeVersion      *uint16
	TargetManifestVersion  *uint16
	PendingUpgradeType     *uint16
	Reserved               unsafe.Pointer
}

func (obj *innerFabricUpgradeOrchestrationServiceState) toGoStruct() (dst *FabricUpgradeOrchestrationServiceState) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeOrchestrationServiceState{}
	dst.CurrentCodeVersion = utf16PtrToString(obj.CurrentCodeVersion)
	dst.CurrentManifestVersion = utf16PtrToString(obj.CurrentManifestVersion)
	dst.TargetCodeVersion = utf16PtrToString(obj.TargetCodeVersion)
	dst.TargetManifestVersion = utf16PtrToString(obj.TargetManifestVersion)
	dst.PendingUpgradeType = utf16PtrToString(obj.PendingUpgradeType)
	return
}

type FabricHealthEvent struct {
	HealthInformation        *FabricHealthInformation
	SourceUtcTimestamp       time.Time
	LastModifiedUtcTimestamp time.Time
	IsExpired                bool
	LastOkTransitionAt       time.Time
	LastWarningTransitionAt  time.Time
	LastErrorTransitionAt    time.Time
}

func (obj *FabricHealthEvent) toInnerStruct() *innerFabricHealthEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricHealthEvent{}
	dst.HealthInformation = obj.HealthInformation.toInnerStruct()
	dst.SourceUtcTimestamp = timeToFiletime(obj.SourceUtcTimestamp)
	dst.LastModifiedUtcTimestamp = timeToFiletime(obj.LastModifiedUtcTimestamp)
	dst.IsExpired = obj.IsExpired
	ex0 := dst
	ex1 := &innerFabricHealthEventEx1{}
	ex1.LastOkTransitionAt = timeToFiletime(obj.LastOkTransitionAt)
	ex1.LastWarningTransitionAt = timeToFiletime(obj.LastWarningTransitionAt)
	ex1.LastErrorTransitionAt = timeToFiletime(obj.LastErrorTransitionAt)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricHealthEvent struct {
	HealthInformation        *innerFabricHealthInformation
	SourceUtcTimestamp       filetime
	LastModifiedUtcTimestamp filetime
	IsExpired                bool
	Reserved                 unsafe.Pointer
}
type innerFabricHealthEventEx1 struct {
	LastOkTransitionAt      filetime
	LastWarningTransitionAt filetime
	LastErrorTransitionAt   filetime
	Reserved                unsafe.Pointer
}

func (obj *innerFabricHealthEvent) toGoStruct() (dst *FabricHealthEvent) {
	if obj == nil {
		return
	}
	dst = &FabricHealthEvent{}
	dst.HealthInformation = obj.HealthInformation.toGoStruct()
	dst.SourceUtcTimestamp = obj.SourceUtcTimestamp.ToTime()
	dst.LastModifiedUtcTimestamp = obj.LastModifiedUtcTimestamp.ToTime()
	dst.IsExpired = obj.IsExpired
	ex0 := obj
	ex1 := (*innerFabricHealthEventEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.LastOkTransitionAt = ex1.LastOkTransitionAt.ToTime()
	dst.LastWarningTransitionAt = ex1.LastWarningTransitionAt.ToTime()
	dst.LastErrorTransitionAt = ex1.LastErrorTransitionAt.ToTime()
	return
}

type innerFabricHealthEventList struct {
	Count uint32
	Items *innerFabricHealthEvent
}

func (obj *innerFabricHealthEventList) toGoStruct() []FabricHealthEvent {
	var dst []FabricHealthEvent
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricHealthEvaluation struct {
	Kind  FabricHealthEvaluationKind
	Value interface{}
}

func (obj *FabricHealthEvaluation) toInnerStruct() *innerFabricHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricHealthEvaluation{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricHealthEvaluation struct {
	Kind  FabricHealthEvaluationKind
	Value unsafe.Pointer
}

func (obj *innerFabricHealthEvaluation) toGoStruct() (dst *FabricHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricHealthEvaluation{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricHealthEvaluationList struct {
	Count uint32
	Items *innerFabricHealthEvaluation
}

func (obj *innerFabricHealthEvaluationList) toGoStruct() []FabricHealthEvaluation {
	var dst []FabricHealthEvaluation
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricHealthStateCount struct {
	OkCount      uint32
	WarningCount uint32
	ErrorCount   uint32
}
type innerFabricHealthStateCount struct {
	FabricHealthStateCount
	Reserved unsafe.Pointer
}

func (obj *innerFabricHealthStateCount) toGoStruct() *FabricHealthStateCount {
	if obj == nil {
		return nil
	}
	return &obj.FabricHealthStateCount
}
func (obj *FabricHealthStateCount) toInnerStruct() *innerFabricHealthStateCount {
	if obj == nil {
		return nil
	}
	return &innerFabricHealthStateCount{*obj, nil}
}

type FabricEntityKindHealthStateCount struct {
	EntityKind       FabricHealthEntityKind
	HealthStateCount *FabricHealthStateCount
}
type innerFabricEntityKindHealthStateCount struct {
	FabricEntityKindHealthStateCount
	Reserved unsafe.Pointer
}

func (obj *innerFabricEntityKindHealthStateCount) toGoStruct() *FabricEntityKindHealthStateCount {
	if obj == nil {
		return nil
	}
	return &obj.FabricEntityKindHealthStateCount
}
func (obj *FabricEntityKindHealthStateCount) toInnerStruct() *innerFabricEntityKindHealthStateCount {
	if obj == nil {
		return nil
	}
	return &innerFabricEntityKindHealthStateCount{*obj, nil}
}

type FabricHealthStatistics struct {
	Items []FabricEntityKindHealthStateCount
}
type innerFabricHealthStatistics struct {
	FabricHealthStatistics
	Reserved unsafe.Pointer
}

func (obj *innerFabricHealthStatistics) toGoStruct() *FabricHealthStatistics {
	if obj == nil {
		return nil
	}
	return &obj.FabricHealthStatistics
}
func (obj *FabricHealthStatistics) toInnerStruct() *innerFabricHealthStatistics {
	if obj == nil {
		return nil
	}
	return &innerFabricHealthStatistics{*obj, nil}
}

type FabricReplicaHealth struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricReplicaHealth) toInnerStruct() *innerFabricReplicaHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicaHealth{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricReplicaHealth struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricReplicaHealth) toGoStruct() (dst *FabricReplicaHealth) {
	if obj == nil {
		return
	}
	dst = &FabricReplicaHealth{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricStatefulServiceReplicaHealth struct {
	PartitionId           uuid.UUID
	ReplicaId             int64
	AggregatedHealthState FabricHealthState
	HealthEvents          []FabricHealthEvent
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricStatefulServiceReplicaHealth) toInnerStruct() *innerFabricStatefulServiceReplicaHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceReplicaHealth{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_50 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_50.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_50.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_50
	ex0 := dst
	ex1 := &innerFabricStatefulServiceReplicaHealthEx1{}
	lst_51 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_51.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_51.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_51
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatefulServiceReplicaHealth struct {
	PartitionId           uuid.UUID
	ReplicaId             int64
	AggregatedHealthState FabricHealthState
	HealthEvents          *innerFabricHealthEventList
	Reserved              unsafe.Pointer
}
type innerFabricStatefulServiceReplicaHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}

func (obj *innerFabricStatefulServiceReplicaHealth) toGoStruct() (dst *FabricStatefulServiceReplicaHealth) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceReplicaHealth{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceReplicaHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricStatelessServiceInstanceHealth struct {
	PartitionId           uuid.UUID
	InstanceId            int64
	AggregatedHealthState FabricHealthState
	HealthEvents          []FabricHealthEvent
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricStatelessServiceInstanceHealth) toInnerStruct() *innerFabricStatelessServiceInstanceHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceInstanceHealth{}
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_52 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_52.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_52.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_52
	ex0 := dst
	ex1 := &innerFabricStatelessServiceInstanceHealthEx1{}
	lst_53 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_53.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_53.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_53
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatelessServiceInstanceHealth struct {
	PartitionId           uuid.UUID
	InstanceId            int64
	AggregatedHealthState FabricHealthState
	HealthEvents          *innerFabricHealthEventList
	Reserved              unsafe.Pointer
}
type innerFabricStatelessServiceInstanceHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}

func (obj *innerFabricStatelessServiceInstanceHealth) toGoStruct() (dst *FabricStatelessServiceInstanceHealth) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceInstanceHealth{}
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricStatelessServiceInstanceHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricReplicaHealthState struct {
	Kind  FabricServiceKind
	Value interface{}
}

func (obj *FabricReplicaHealthState) toInnerStruct() *innerFabricReplicaHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicaHealthState{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricReplicaHealthState struct {
	Kind  FabricServiceKind
	Value unsafe.Pointer
}

func (obj *innerFabricReplicaHealthState) toGoStruct() (dst *FabricReplicaHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricReplicaHealthState{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type innerFabricReplicaHealthStateList struct {
	Count uint32
	Items *innerFabricReplicaHealthState
}

func (obj *innerFabricReplicaHealthStateList) toGoStruct() []FabricReplicaHealthState {
	var dst []FabricReplicaHealthState
	{
		var innerlst []innerFabricReplicaHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricReplicaHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricStatelessServiceInstanceHealthState struct {
	PartitionId           uuid.UUID
	InstanceId            int64
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricStatelessServiceInstanceHealthState) toInnerStruct() *innerFabricStatelessServiceInstanceHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatelessServiceInstanceHealthState{}
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := dst
	ex1 := &innerFabricStatelessServiceInstanceHealthStateEx1{}
	lst_54 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_54.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_54.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_54
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatelessServiceInstanceHealthState struct {
	PartitionId           uuid.UUID
	InstanceId            int64
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}
type innerFabricStatelessServiceInstanceHealthStateEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}

func (obj *innerFabricStatelessServiceInstanceHealthState) toGoStruct() (dst *FabricStatelessServiceInstanceHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricStatelessServiceInstanceHealthState{}
	dst.PartitionId = obj.PartitionId
	dst.InstanceId = obj.InstanceId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := obj
	ex1 := (*innerFabricStatelessServiceInstanceHealthStateEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricStatefulServiceReplicaHealthState struct {
	PartitionId           uuid.UUID
	ReplicaId             int64
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricStatefulServiceReplicaHealthState) toInnerStruct() *innerFabricStatefulServiceReplicaHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStatefulServiceReplicaHealthState{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := dst
	ex1 := &innerFabricStatefulServiceReplicaHealthStateEx1{}
	lst_55 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_55.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_55.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_55
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStatefulServiceReplicaHealthState struct {
	PartitionId           uuid.UUID
	ReplicaId             int64
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}
type innerFabricStatefulServiceReplicaHealthStateEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}

func (obj *innerFabricStatefulServiceReplicaHealthState) toGoStruct() (dst *FabricStatefulServiceReplicaHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricStatefulServiceReplicaHealthState{}
	dst.PartitionId = obj.PartitionId
	dst.ReplicaId = obj.ReplicaId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := obj
	ex1 := (*innerFabricStatefulServiceReplicaHealthStateEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricPartitionHealth struct {
	PartitionId           uuid.UUID
	AggregatedHealthState FabricHealthState
	HealthEvents          []FabricHealthEvent
	ReplicaHealthStates   []FabricReplicaHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
	HealthStatistics      *FabricHealthStatistics
}

func (obj *FabricPartitionHealth) toInnerStruct() *innerFabricPartitionHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionHealth{}
	dst.PartitionId = obj.PartitionId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_56 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_56.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_56.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_56
	lst_57 := &innerFabricReplicaHealthStateList{}
	{

		var tmp []innerFabricReplicaHealthState

		for _, item := range obj.ReplicaHealthStates {
			var tmpitem innerFabricReplicaHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_57.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_57.Items = &tmp[0]
		}

	}
	dst.ReplicaHealthStates = lst_57
	ex0 := dst
	ex1 := &innerFabricPartitionHealthEx1{}
	lst_58 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_58.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_58.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_58
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricPartitionHealthEx2{}
	ex2.HealthStatistics = obj.HealthStatistics.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricPartitionHealth struct {
	PartitionId           uuid.UUID
	AggregatedHealthState FabricHealthState
	HealthEvents          *innerFabricHealthEventList
	ReplicaHealthStates   *innerFabricReplicaHealthStateList
	Reserved              unsafe.Pointer
}
type innerFabricPartitionHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}
type innerFabricPartitionHealthEx2 struct {
	HealthStatistics *innerFabricHealthStatistics
	Reserved         unsafe.Pointer
}

func (obj *innerFabricPartitionHealth) toGoStruct() (dst *FabricPartitionHealth) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionHealth{}
	dst.PartitionId = obj.PartitionId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	{
		var innerlst []innerFabricReplicaHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ReplicaHealthStates.Items), int(obj.ReplicaHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricReplicaHealthState

			tmpitem = *item.toGoStruct()

			dst.ReplicaHealthStates = append(dst.ReplicaHealthStates, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricPartitionHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex2 := (*innerFabricPartitionHealthEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.HealthStatistics = ex2.HealthStatistics.toGoStruct()
	return
}

type FabricPartitionHealthState struct {
	PartitionId           uuid.UUID
	AggregatedHealthState FabricHealthState
}
type innerFabricPartitionHealthState struct {
	FabricPartitionHealthState
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionHealthState) toGoStruct() *FabricPartitionHealthState {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionHealthState
}
func (obj *FabricPartitionHealthState) toInnerStruct() *innerFabricPartitionHealthState {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionHealthState{*obj, nil}
}

type innerFabricPartitionHealthStateList struct {
	Count uint32
	Items *innerFabricPartitionHealthState
}

func (obj *innerFabricPartitionHealthStateList) toGoStruct() []FabricPartitionHealthState {
	var dst []FabricPartitionHealthState
	{
		var innerlst []innerFabricPartitionHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricPartitionHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServicePackageHealth struct {
	ApplicationName            string
	ServiceManifestName        string
	NodeName                   string
	AggregatedHealthState      FabricHealthState
	HealthEvents               []FabricHealthEvent
	UnhealthyEvaluations       []FabricHealthEvaluation
	ServicePackageActivationId string
}

func (obj *FabricDeployedServicePackageHealth) toInnerStruct() *innerFabricDeployedServicePackageHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealth{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_59 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_59.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_59.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_59
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthEx1{}
	lst_60 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_60.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_60.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_60
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricDeployedServicePackageHealthEx2{}
	ex2.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricDeployedServicePackageHealth struct {
	ApplicationName       *uint16
	ServiceManifestName   *uint16
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	HealthEvents          *innerFabricHealthEventList
	Reserved              unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthEx2 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealth) toGoStruct() (dst *FabricDeployedServicePackageHealth) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealth{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex2 := (*innerFabricDeployedServicePackageHealthEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex2.ServicePackageActivationId)
	return
}

type FabricDeployedServicePackageHealthState struct {
	ApplicationName            string
	ServiceManifestName        string
	NodeName                   string
	AggregatedHealthState      FabricHealthState
	ServicePackageActivationId string
}

func (obj *FabricDeployedServicePackageHealthState) toInnerStruct() *innerFabricDeployedServicePackageHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealthState{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthStateEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageHealthState struct {
	ApplicationName       *uint16
	ServiceManifestName   *uint16
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthStateEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthState) toGoStruct() (dst *FabricDeployedServicePackageHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealthState{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthStateEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type innerFabricDeployedServicePackageHealthStateList struct {
	Count uint32
	Items *innerFabricDeployedServicePackageHealthState
}

func (obj *innerFabricDeployedServicePackageHealthStateList) toGoStruct() []FabricDeployedServicePackageHealthState {
	var dst []FabricDeployedServicePackageHealthState
	{
		var innerlst []innerFabricDeployedServicePackageHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedApplicationHealth struct {
	ApplicationName                    string
	NodeName                           string
	AggregatedHealthState              FabricHealthState
	HealthEvents                       []FabricHealthEvent
	DeployedServicePackageHealthStates []FabricDeployedServicePackageHealthState
	UnhealthyEvaluations               []FabricHealthEvaluation
	HealthStatistics                   *FabricHealthStatistics
}

func (obj *FabricDeployedApplicationHealth) toInnerStruct() *innerFabricDeployedApplicationHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealth{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_61 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_61.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_61.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_61
	lst_62 := &innerFabricDeployedServicePackageHealthStateList{}
	{

		var tmp []innerFabricDeployedServicePackageHealthState

		for _, item := range obj.DeployedServicePackageHealthStates {
			var tmpitem innerFabricDeployedServicePackageHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_62.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_62.Items = &tmp[0]
		}

	}
	dst.DeployedServicePackageHealthStates = lst_62
	ex0 := dst
	ex1 := &innerFabricDeployedApplicationHealthEx1{}
	lst_63 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_63.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_63.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_63
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricDeployedApplicationHealthEx2{}
	ex2.HealthStatistics = obj.HealthStatistics.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricDeployedApplicationHealth struct {
	ApplicationName                    *uint16
	NodeName                           *uint16
	AggregatedHealthState              FabricHealthState
	HealthEvents                       *innerFabricHealthEventList
	DeployedServicePackageHealthStates *innerFabricDeployedServicePackageHealthStateList
	Reserved                           unsafe.Pointer
}
type innerFabricDeployedApplicationHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}
type innerFabricDeployedApplicationHealthEx2 struct {
	HealthStatistics *innerFabricHealthStatistics
	Reserved         unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealth) toGoStruct() (dst *FabricDeployedApplicationHealth) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealth{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	{
		var innerlst []innerFabricDeployedServicePackageHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DeployedServicePackageHealthStates.Items), int(obj.DeployedServicePackageHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageHealthState

			tmpitem = *item.toGoStruct()

			dst.DeployedServicePackageHealthStates = append(dst.DeployedServicePackageHealthStates, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricDeployedApplicationHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex2 := (*innerFabricDeployedApplicationHealthEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.HealthStatistics = ex2.HealthStatistics.toGoStruct()
	return
}

type FabricDeployedApplicationHealthState struct {
	ApplicationName       string
	NodeName              string
	AggregatedHealthState FabricHealthState
}

func (obj *FabricDeployedApplicationHealthState) toInnerStruct() *innerFabricDeployedApplicationHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealthState{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return dst
}

type innerFabricDeployedApplicationHealthState struct {
	ApplicationName       *uint16
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthState) toGoStruct() (dst *FabricDeployedApplicationHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealthState{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return
}

type innerFabricDeployedApplicationHealthStateList struct {
	Count uint32
	Items *innerFabricDeployedApplicationHealthState
}

func (obj *innerFabricDeployedApplicationHealthStateList) toGoStruct() []FabricDeployedApplicationHealthState {
	var dst []FabricDeployedApplicationHealthState
	{
		var innerlst []innerFabricDeployedApplicationHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceHealth struct {
	ServiceName           string
	AggregatedHealthState FabricHealthState
	HealthEvents          []FabricHealthEvent
	PartitionHealthStates []FabricPartitionHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
	HealthStatistics      *FabricHealthStatistics
}

func (obj *FabricServiceHealth) toInnerStruct() *innerFabricServiceHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealth{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_64 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_64.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_64.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_64
	lst_65 := &innerFabricPartitionHealthStateList{}
	{

		var tmp []innerFabricPartitionHealthState

		for _, item := range obj.PartitionHealthStates {
			var tmpitem innerFabricPartitionHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_65.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_65.Items = &tmp[0]
		}

	}
	dst.PartitionHealthStates = lst_65
	ex0 := dst
	ex1 := &innerFabricServiceHealthEx1{}
	lst_66 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_66.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_66.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_66
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricServiceHealthEx2{}
	ex2.HealthStatistics = obj.HealthStatistics.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricServiceHealth struct {
	ServiceName           *uint16
	AggregatedHealthState FabricHealthState
	HealthEvents          *innerFabricHealthEventList
	PartitionHealthStates *innerFabricPartitionHealthStateList
	Reserved              unsafe.Pointer
}
type innerFabricServiceHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}
type innerFabricServiceHealthEx2 struct {
	HealthStatistics *innerFabricHealthStatistics
	Reserved         unsafe.Pointer
}

func (obj *innerFabricServiceHealth) toGoStruct() (dst *FabricServiceHealth) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealth{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	{
		var innerlst []innerFabricPartitionHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.PartitionHealthStates.Items), int(obj.PartitionHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricPartitionHealthState

			tmpitem = *item.toGoStruct()

			dst.PartitionHealthStates = append(dst.PartitionHealthStates, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricServiceHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex2 := (*innerFabricServiceHealthEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.HealthStatistics = ex2.HealthStatistics.toGoStruct()
	return
}

type FabricServiceHealthState struct {
	ServiceName           string
	AggregatedHealthState FabricHealthState
}

func (obj *FabricServiceHealthState) toInnerStruct() *innerFabricServiceHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealthState{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return dst
}

type innerFabricServiceHealthState struct {
	ServiceName           *uint16
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}

func (obj *innerFabricServiceHealthState) toGoStruct() (dst *FabricServiceHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealthState{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return
}

type innerFabricServiceHealthStateList struct {
	Count uint32
	Items *innerFabricServiceHealthState
}

func (obj *innerFabricServiceHealthStateList) toGoStruct() []FabricServiceHealthState {
	var dst []FabricServiceHealthState
	{
		var innerlst []innerFabricServiceHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationHealth struct {
	ApplicationName                 string
	AggregatedHealthState           FabricHealthState
	HealthEvents                    []FabricHealthEvent
	DeployedApplicationHealthStates []FabricDeployedApplicationHealthState
	ServiceHealthStates             []FabricServiceHealthState
	UnhealthyEvaluations            []FabricHealthEvaluation
	HealthStatistics                *FabricHealthStatistics
}

func (obj *FabricApplicationHealth) toInnerStruct() *innerFabricApplicationHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealth{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_67 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_67.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_67.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_67
	lst_68 := &innerFabricDeployedApplicationHealthStateList{}
	{

		var tmp []innerFabricDeployedApplicationHealthState

		for _, item := range obj.DeployedApplicationHealthStates {
			var tmpitem innerFabricDeployedApplicationHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_68.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_68.Items = &tmp[0]
		}

	}
	dst.DeployedApplicationHealthStates = lst_68
	lst_69 := &innerFabricServiceHealthStateList{}
	{

		var tmp []innerFabricServiceHealthState

		for _, item := range obj.ServiceHealthStates {
			var tmpitem innerFabricServiceHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_69.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_69.Items = &tmp[0]
		}

	}
	dst.ServiceHealthStates = lst_69
	ex0 := dst
	ex1 := &innerFabricApplicationHealthEx1{}
	lst_70 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_70.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_70.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_70
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricApplicationHealthEx2{}
	ex2.HealthStatistics = obj.HealthStatistics.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricApplicationHealth struct {
	ApplicationName                 *uint16
	AggregatedHealthState           FabricHealthState
	HealthEvents                    *innerFabricHealthEventList
	DeployedApplicationHealthStates *innerFabricDeployedApplicationHealthStateList
	ServiceHealthStates             *innerFabricServiceHealthStateList
	Reserved                        unsafe.Pointer
}
type innerFabricApplicationHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}
type innerFabricApplicationHealthEx2 struct {
	HealthStatistics *innerFabricHealthStatistics
	Reserved         unsafe.Pointer
}

func (obj *innerFabricApplicationHealth) toGoStruct() (dst *FabricApplicationHealth) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealth{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	{
		var innerlst []innerFabricDeployedApplicationHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DeployedApplicationHealthStates.Items), int(obj.DeployedApplicationHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationHealthState

			tmpitem = *item.toGoStruct()

			dst.DeployedApplicationHealthStates = append(dst.DeployedApplicationHealthStates, tmpitem)
		}

	}
	{
		var innerlst []innerFabricServiceHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ServiceHealthStates.Items), int(obj.ServiceHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceHealthState

			tmpitem = *item.toGoStruct()

			dst.ServiceHealthStates = append(dst.ServiceHealthStates, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricApplicationHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex2 := (*innerFabricApplicationHealthEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.HealthStatistics = ex2.HealthStatistics.toGoStruct()
	return
}

type FabricNodeHealth struct {
	NodeName              string
	AggregatedHealthState FabricHealthState
	HealthEvents          []FabricHealthEvent
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricNodeHealth) toInnerStruct() *innerFabricNodeHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealth{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_71 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_71.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_71.Items = &tmp[0]
		}

	}
	dst.HealthEvents = lst_71
	ex0 := dst
	ex1 := &innerFabricNodeHealthEx1{}
	lst_72 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_72.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_72.Items = &tmp[0]
		}

	}
	ex1.UnhealthyEvaluations = lst_72
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricNodeHealth struct {
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	HealthEvents          *innerFabricHealthEventList
	Reserved              unsafe.Pointer
}
type innerFabricNodeHealthEx1 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}

func (obj *innerFabricNodeHealth) toGoStruct() (dst *FabricNodeHealth) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealth{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.HealthEvents.Items), int(obj.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricNodeHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.UnhealthyEvaluations.Items), int(ex1.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricClusterHealth struct {
	AggregatedHealthState   FabricHealthState
	NodeHealthStates        []FabricNodeHealthState
	ApplicationHealthStates []FabricApplicationHealthState
	HealthEvents            []FabricHealthEvent
	UnhealthyEvaluations    []FabricHealthEvaluation
	HealthStatistics        *FabricHealthStatistics
}

func (obj *FabricClusterHealth) toInnerStruct() *innerFabricClusterHealth {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterHealth{}
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := dst
	ex1 := &innerFabricClusterHealthEx1{}
	lst_73 := &innerFabricNodeHealthStateList{}
	{

		var tmp []innerFabricNodeHealthState

		for _, item := range obj.NodeHealthStates {
			var tmpitem innerFabricNodeHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_73.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_73.Items = &tmp[0]
		}

	}
	ex1.NodeHealthStates = lst_73
	lst_74 := &innerFabricApplicationHealthStateList{}
	{

		var tmp []innerFabricApplicationHealthState

		for _, item := range obj.ApplicationHealthStates {
			var tmpitem innerFabricApplicationHealthState

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_74.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_74.Items = &tmp[0]
		}

	}
	ex1.ApplicationHealthStates = lst_74
	lst_75 := &innerFabricHealthEventList{}
	{

		var tmp []innerFabricHealthEvent

		for _, item := range obj.HealthEvents {
			var tmpitem innerFabricHealthEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_75.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_75.Items = &tmp[0]
		}

	}
	ex1.HealthEvents = lst_75
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricClusterHealthEx2{}
	lst_76 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_76.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_76.Items = &tmp[0]
		}

	}
	ex2.UnhealthyEvaluations = lst_76
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricClusterHealthEx3{}
	ex3.HealthStatistics = obj.HealthStatistics.toInnerStruct()
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricClusterHealth struct {
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}
type innerFabricClusterHealthEx1 struct {
	NodeHealthStates        *innerFabricNodeHealthStateList
	ApplicationHealthStates *innerFabricApplicationHealthStateList
	HealthEvents            *innerFabricHealthEventList
	Reserved                unsafe.Pointer
}
type innerFabricClusterHealthEx2 struct {
	UnhealthyEvaluations *innerFabricHealthEvaluationList
	Reserved             unsafe.Pointer
}
type innerFabricClusterHealthEx3 struct {
	HealthStatistics *innerFabricHealthStatistics
	Reserved         unsafe.Pointer
}

func (obj *innerFabricClusterHealth) toGoStruct() (dst *FabricClusterHealth) {
	if obj == nil {
		return
	}
	dst = &FabricClusterHealth{}
	dst.AggregatedHealthState = obj.AggregatedHealthState
	ex0 := obj
	ex1 := (*innerFabricClusterHealthEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []innerFabricNodeHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.NodeHealthStates.Items), int(ex1.NodeHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeHealthState

			tmpitem = *item.toGoStruct()

			dst.NodeHealthStates = append(dst.NodeHealthStates, tmpitem)
		}

	}
	{
		var innerlst []innerFabricApplicationHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.ApplicationHealthStates.Items), int(ex1.ApplicationHealthStates.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationHealthState

			tmpitem = *item.toGoStruct()

			dst.ApplicationHealthStates = append(dst.ApplicationHealthStates, tmpitem)
		}

	}
	{
		var innerlst []innerFabricHealthEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.HealthEvents.Items), int(ex1.HealthEvents.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvent

			tmpitem = *item.toGoStruct()

			dst.HealthEvents = append(dst.HealthEvents, tmpitem)
		}

	}
	ex2 := (*innerFabricClusterHealthEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex2.UnhealthyEvaluations.Items), int(ex2.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex3 := (*innerFabricClusterHealthEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	dst.HealthStatistics = ex3.HealthStatistics.toGoStruct()
	return
}

type FabricNodeHealthState struct {
	NodeName              string
	AggregatedHealthState FabricHealthState
}

func (obj *FabricNodeHealthState) toInnerStruct() *innerFabricNodeHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealthState{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return dst
}

type innerFabricNodeHealthState struct {
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}

func (obj *innerFabricNodeHealthState) toGoStruct() (dst *FabricNodeHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealthState{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return
}

type innerFabricNodeHealthStateList struct {
	Count uint32
	Items *innerFabricNodeHealthState
}

func (obj *innerFabricNodeHealthStateList) toGoStruct() []FabricNodeHealthState {
	var dst []FabricNodeHealthState
	{
		var innerlst []innerFabricNodeHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationHealthState struct {
	ApplicationName       string
	AggregatedHealthState FabricHealthState
}

func (obj *FabricApplicationHealthState) toInnerStruct() *innerFabricApplicationHealthState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthState{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return dst
}

type innerFabricApplicationHealthState struct {
	ApplicationName       *uint16
	AggregatedHealthState FabricHealthState
	Reserved              unsafe.Pointer
}

func (obj *innerFabricApplicationHealthState) toGoStruct() (dst *FabricApplicationHealthState) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthState{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	return
}

type innerFabricApplicationHealthStateList struct {
	Count uint32
	Items *innerFabricApplicationHealthState
}

func (obj *innerFabricApplicationHealthStateList) toGoStruct() []FabricApplicationHealthState {
	var dst []FabricApplicationHealthState
	{
		var innerlst []innerFabricApplicationHealthState
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationHealthState

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricEventHealthEvaluation struct {
	Description            string
	AggregatedHealthState  FabricHealthState
	UnhealthyEvent         *FabricHealthEvent
	ConsiderWarningAsError bool
}

func (obj *FabricEventHealthEvaluation) toInnerStruct() *innerFabricEventHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricEventHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UnhealthyEvent = obj.UnhealthyEvent.toInnerStruct()
	dst.ConsiderWarningAsError = obj.ConsiderWarningAsError
	return dst
}

type innerFabricEventHealthEvaluation struct {
	Description            *uint16
	AggregatedHealthState  FabricHealthState
	UnhealthyEvent         *innerFabricHealthEvent
	ConsiderWarningAsError bool
	Reserved               unsafe.Pointer
}

func (obj *innerFabricEventHealthEvaluation) toGoStruct() (dst *FabricEventHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricEventHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UnhealthyEvent = obj.UnhealthyEvent.toGoStruct()
	dst.ConsiderWarningAsError = obj.ConsiderWarningAsError
	return
}

type FabricReplicasHealthEvaluation struct {
	Description                             string
	AggregatedHealthState                   FabricHealthState
	UnhealthyEvaluations                    []FabricHealthEvaluation
	TotalCount                              uint32
	MaxPercentUnhealthyReplicasPerPartition byte
}

func (obj *FabricReplicasHealthEvaluation) toInnerStruct() *innerFabricReplicasHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicasHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_77 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_77.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_77.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_77
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyReplicasPerPartition = obj.MaxPercentUnhealthyReplicasPerPartition
	return dst
}

type innerFabricReplicasHealthEvaluation struct {
	Description                             *uint16
	AggregatedHealthState                   FabricHealthState
	UnhealthyEvaluations                    *innerFabricHealthEvaluationList
	TotalCount                              uint32
	MaxPercentUnhealthyReplicasPerPartition byte
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricReplicasHealthEvaluation) toGoStruct() (dst *FabricReplicasHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricReplicasHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyReplicasPerPartition = obj.MaxPercentUnhealthyReplicasPerPartition
	return
}

type FabricPartitionsHealthEvaluation struct {
	Description                             string
	AggregatedHealthState                   FabricHealthState
	UnhealthyEvaluations                    []FabricHealthEvaluation
	TotalCount                              uint32
	MaxPercentUnhealthyPartitionsPerService byte
}

func (obj *FabricPartitionsHealthEvaluation) toInnerStruct() *innerFabricPartitionsHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionsHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_78 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_78.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_78.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_78
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyPartitionsPerService = obj.MaxPercentUnhealthyPartitionsPerService
	return dst
}

type innerFabricPartitionsHealthEvaluation struct {
	Description                             *uint16
	AggregatedHealthState                   FabricHealthState
	UnhealthyEvaluations                    *innerFabricHealthEvaluationList
	TotalCount                              uint32
	MaxPercentUnhealthyPartitionsPerService byte
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricPartitionsHealthEvaluation) toGoStruct() (dst *FabricPartitionsHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionsHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyPartitionsPerService = obj.MaxPercentUnhealthyPartitionsPerService
	return
}

type FabricDeployedServicePackagesHealthEvaluation struct {
	Description           string
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
	TotalCount            uint32
}

func (obj *FabricDeployedServicePackagesHealthEvaluation) toInnerStruct() *innerFabricDeployedServicePackagesHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackagesHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_79 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_79.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_79.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_79
	dst.TotalCount = obj.TotalCount
	return dst
}

type innerFabricDeployedServicePackagesHealthEvaluation struct {
	Description           *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	TotalCount            uint32
	Reserved              unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackagesHealthEvaluation) toGoStruct() (dst *FabricDeployedServicePackagesHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackagesHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	return
}

type FabricDeployedApplicationsHealthEvaluation struct {
	Description                             string
	AggregatedHealthState                   FabricHealthState
	UnhealthyEvaluations                    []FabricHealthEvaluation
	TotalCount                              uint32
	MaxPercentUnhealthyDeployedApplications byte
}

func (obj *FabricDeployedApplicationsHealthEvaluation) toInnerStruct() *innerFabricDeployedApplicationsHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationsHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_80 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_80.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_80.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_80
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyDeployedApplications = obj.MaxPercentUnhealthyDeployedApplications
	return dst
}

type innerFabricDeployedApplicationsHealthEvaluation struct {
	Description                             *uint16
	AggregatedHealthState                   FabricHealthState
	UnhealthyEvaluations                    *innerFabricHealthEvaluationList
	TotalCount                              uint32
	MaxPercentUnhealthyDeployedApplications byte
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationsHealthEvaluation) toGoStruct() (dst *FabricDeployedApplicationsHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationsHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyDeployedApplications = obj.MaxPercentUnhealthyDeployedApplications
	return
}

type FabricServicesHealthEvaluation struct {
	Description                 string
	AggregatedHealthState       FabricHealthState
	ServiceTypeName             string
	UnhealthyEvaluations        []FabricHealthEvaluation
	TotalCount                  uint32
	MaxPercentUnhealthyServices byte
}

func (obj *FabricServicesHealthEvaluation) toInnerStruct() *innerFabricServicesHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServicesHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ServiceTypeName = utf16PtrFromString(obj.ServiceTypeName)
	lst_81 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_81.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_81.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_81
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyServices = obj.MaxPercentUnhealthyServices
	return dst
}

type innerFabricServicesHealthEvaluation struct {
	Description                 *uint16
	AggregatedHealthState       FabricHealthState
	ServiceTypeName             *uint16
	UnhealthyEvaluations        *innerFabricHealthEvaluationList
	TotalCount                  uint32
	MaxPercentUnhealthyServices byte
	Reserved                    unsafe.Pointer
}

func (obj *innerFabricServicesHealthEvaluation) toGoStruct() (dst *FabricServicesHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricServicesHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ServiceTypeName = utf16PtrToString(obj.ServiceTypeName)
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyServices = obj.MaxPercentUnhealthyServices
	return
}

type FabricNodesHealthEvaluation struct {
	Description              string
	AggregatedHealthState    FabricHealthState
	UnhealthyEvaluations     []FabricHealthEvaluation
	TotalCount               uint32
	MaxPercentUnhealthyNodes byte
}

func (obj *FabricNodesHealthEvaluation) toInnerStruct() *innerFabricNodesHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodesHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_82 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_82.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_82.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_82
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	return dst
}

type innerFabricNodesHealthEvaluation struct {
	Description              *uint16
	AggregatedHealthState    FabricHealthState
	UnhealthyEvaluations     *innerFabricHealthEvaluationList
	TotalCount               uint32
	MaxPercentUnhealthyNodes byte
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricNodesHealthEvaluation) toGoStruct() (dst *FabricNodesHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricNodesHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	return
}

type FabricApplicationsHealthEvaluation struct {
	Description                     string
	AggregatedHealthState           FabricHealthState
	UnhealthyEvaluations            []FabricHealthEvaluation
	TotalCount                      uint32
	MaxPercentUnhealthyApplications byte
}

func (obj *FabricApplicationsHealthEvaluation) toInnerStruct() *innerFabricApplicationsHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationsHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_83 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_83.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_83.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_83
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	return dst
}

type innerFabricApplicationsHealthEvaluation struct {
	Description                     *uint16
	AggregatedHealthState           FabricHealthState
	UnhealthyEvaluations            *innerFabricHealthEvaluationList
	TotalCount                      uint32
	MaxPercentUnhealthyApplications byte
	Reserved                        unsafe.Pointer
}

func (obj *innerFabricApplicationsHealthEvaluation) toGoStruct() (dst *FabricApplicationsHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationsHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	return
}

type FabricUpgradeDomainNodesHealthEvaluation struct {
	Description              string
	AggregatedHealthState    FabricHealthState
	UpgradeDomainName        string
	UnhealthyEvaluations     []FabricHealthEvaluation
	TotalCount               uint32
	MaxPercentUnhealthyNodes byte
}

func (obj *FabricUpgradeDomainNodesHealthEvaluation) toInnerStruct() *innerFabricUpgradeDomainNodesHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeDomainNodesHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UpgradeDomainName = utf16PtrFromString(obj.UpgradeDomainName)
	lst_84 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_84.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_84.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_84
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	return dst
}

type innerFabricUpgradeDomainNodesHealthEvaluation struct {
	Description              *uint16
	AggregatedHealthState    FabricHealthState
	UpgradeDomainName        *uint16
	UnhealthyEvaluations     *innerFabricHealthEvaluationList
	TotalCount               uint32
	MaxPercentUnhealthyNodes byte
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricUpgradeDomainNodesHealthEvaluation) toGoStruct() (dst *FabricUpgradeDomainNodesHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeDomainNodesHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UpgradeDomainName = utf16PtrToString(obj.UpgradeDomainName)
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyNodes = obj.MaxPercentUnhealthyNodes
	return
}

type FabricUpgradeDomainDeployedApplicationsHealthEvaluation struct {
	Description                             string
	AggregatedHealthState                   FabricHealthState
	UpgradeDomainName                       string
	UnhealthyEvaluations                    []FabricHealthEvaluation
	TotalCount                              uint32
	MaxPercentUnhealthyDeployedApplications byte
}

func (obj *FabricUpgradeDomainDeployedApplicationsHealthEvaluation) toInnerStruct() *innerFabricUpgradeDomainDeployedApplicationsHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeDomainDeployedApplicationsHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UpgradeDomainName = utf16PtrFromString(obj.UpgradeDomainName)
	lst_85 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_85.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_85.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_85
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyDeployedApplications = obj.MaxPercentUnhealthyDeployedApplications
	return dst
}

type innerFabricUpgradeDomainDeployedApplicationsHealthEvaluation struct {
	Description                             *uint16
	AggregatedHealthState                   FabricHealthState
	UpgradeDomainName                       *uint16
	UnhealthyEvaluations                    *innerFabricHealthEvaluationList
	TotalCount                              uint32
	MaxPercentUnhealthyDeployedApplications byte
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricUpgradeDomainDeployedApplicationsHealthEvaluation) toGoStruct() (dst *FabricUpgradeDomainDeployedApplicationsHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeDomainDeployedApplicationsHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UpgradeDomainName = utf16PtrToString(obj.UpgradeDomainName)
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyDeployedApplications = obj.MaxPercentUnhealthyDeployedApplications
	return
}

type FabricSystemApplicationHealthEvaluation struct {
	Description           string
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricSystemApplicationHealthEvaluation) toInnerStruct() *innerFabricSystemApplicationHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSystemApplicationHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_86 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_86.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_86.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_86
	return dst
}

type innerFabricSystemApplicationHealthEvaluation struct {
	Description           *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricSystemApplicationHealthEvaluation) toGoStruct() (dst *FabricSystemApplicationHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricSystemApplicationHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricNodeHealthEvaluation struct {
	Description           string
	NodeName              string
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricNodeHealthEvaluation) toInnerStruct() *innerFabricNodeHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_87 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_87.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_87.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_87
	return dst
}

type innerFabricNodeHealthEvaluation struct {
	Description           *uint16
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricNodeHealthEvaluation) toGoStruct() (dst *FabricNodeHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricReplicaHealthEvaluation struct {
	Description           string
	PartitionId           uuid.UUID
	ReplicaOrInstanceId   int64
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricReplicaHealthEvaluation) toInnerStruct() *innerFabricReplicaHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricReplicaHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_88 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_88.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_88.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_88
	return dst
}

type innerFabricReplicaHealthEvaluation struct {
	Description           *uint16
	PartitionId           uuid.UUID
	ReplicaOrInstanceId   int64
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricReplicaHealthEvaluation) toGoStruct() (dst *FabricReplicaHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricReplicaHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.PartitionId = obj.PartitionId
	dst.ReplicaOrInstanceId = obj.ReplicaOrInstanceId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricPartitionHealthEvaluation struct {
	Description           string
	PartitionId           uuid.UUID
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricPartitionHealthEvaluation) toInnerStruct() *innerFabricPartitionHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.PartitionId = obj.PartitionId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_89 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_89.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_89.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_89
	return dst
}

type innerFabricPartitionHealthEvaluation struct {
	Description           *uint16
	PartitionId           uuid.UUID
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricPartitionHealthEvaluation) toGoStruct() (dst *FabricPartitionHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.PartitionId = obj.PartitionId
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricServiceHealthEvaluation struct {
	Description           string
	ServiceName           string
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricServiceHealthEvaluation) toInnerStruct() *innerFabricServiceHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_90 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_90.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_90.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_90
	return dst
}

type innerFabricServiceHealthEvaluation struct {
	Description           *uint16
	ServiceName           *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricServiceHealthEvaluation) toGoStruct() (dst *FabricServiceHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricDeployedServicePackageHealthEvaluation struct {
	Description                string
	ApplicationName            string
	ServiceManifestName        string
	NodeName                   string
	AggregatedHealthState      FabricHealthState
	UnhealthyEvaluations       []FabricHealthEvaluation
	ServicePackageActivationId string
}

func (obj *FabricDeployedServicePackageHealthEvaluation) toInnerStruct() *innerFabricDeployedServicePackageHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_91 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_91.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_91.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_91
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthEvaluationEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageHealthEvaluation struct {
	Description           *uint16
	ApplicationName       *uint16
	ServiceManifestName   *uint16
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthEvaluationEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthEvaluation) toGoStruct() (dst *FabricDeployedServicePackageHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthEvaluationEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type FabricDeployedApplicationHealthEvaluation struct {
	Description           string
	ApplicationName       string
	NodeName              string
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricDeployedApplicationHealthEvaluation) toInnerStruct() *innerFabricDeployedApplicationHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_92 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_92.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_92.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_92
	return dst
}

type innerFabricDeployedApplicationHealthEvaluation struct {
	Description           *uint16
	ApplicationName       *uint16
	NodeName              *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthEvaluation) toGoStruct() (dst *FabricDeployedApplicationHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricApplicationHealthEvaluation struct {
	Description           string
	ApplicationName       string
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  []FabricHealthEvaluation
}

func (obj *FabricApplicationHealthEvaluation) toInnerStruct() *innerFabricApplicationHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	lst_93 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_93.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_93.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_93
	return dst
}

type innerFabricApplicationHealthEvaluation struct {
	Description           *uint16
	ApplicationName       *uint16
	AggregatedHealthState FabricHealthState
	UnhealthyEvaluations  *innerFabricHealthEvaluationList
	Reserved              unsafe.Pointer
}

func (obj *innerFabricApplicationHealthEvaluation) toGoStruct() (dst *FabricApplicationHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricX509Credentials struct {
	AllowedCommonNames    []string
	FindType              FabricX509FindType
	FindValue             interface{}
	StoreLocation         FabricX509StoreLocation
	StoreName             string
	ProtectionLevel       FabricProtectionLevel
	IssuerThumbprints     []string
	RemoteCertThumbprints []string
	RemoteX509Names       []FabricX509Name
	FindValueSecondary    interface{}
	RemoteCertIssuers     []FabricX509IssuerName
}

func (obj *FabricX509Credentials) toInnerStruct() *innerFabricX509Credentials {
	if obj == nil {
		return nil
	}
	dst := &innerFabricX509Credentials{}
	{

		var tmp []*uint16

		for _, item := range obj.AllowedCommonNames {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		dst.AllowedCommonNameCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.AllowedCommonNames = &tmp[0]
		}

	}
	dst.FindType = obj.FindType
	dst.FindValue = toUnsafePointer(obj.FindValue)
	dst.StoreLocation = obj.StoreLocation
	dst.StoreName = utf16PtrFromString(obj.StoreName)
	dst.ProtectionLevel = obj.ProtectionLevel
	ex0 := dst
	ex1 := &innerFabricX509CredentialsEx1{}
	{

		var tmp []*uint16

		for _, item := range obj.IssuerThumbprints {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		ex1.IssuerThumbprintCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex1.IssuerThumbprints = &tmp[0]
		}

	}
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricX509CredentialsEx2{}
	{

		var tmp []*uint16

		for _, item := range obj.RemoteCertThumbprints {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		ex2.RemoteCertThumbprintCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex2.RemoteCertThumbprints = &tmp[0]
		}

	}
	{

		var tmp []innerFabricX509Name

		for _, item := range obj.RemoteX509Names {
			var tmpitem innerFabricX509Name

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex2.RemoteX509NameCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex2.RemoteX509Names = &tmp[0]
		}

	}
	ex2.FindValueSecondary = toUnsafePointer(obj.FindValueSecondary)
	ex1.Reserved = unsafe.Pointer(ex2)
	ex3 := &innerFabricX509CredentialsEx3{}
	{

		var tmp []innerFabricX509IssuerName

		for _, item := range obj.RemoteCertIssuers {
			var tmpitem innerFabricX509IssuerName

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		ex3.RemoteCertIssuerCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex3.RemoteCertIssuers = &tmp[0]
		}

	}
	ex2.Reserved = unsafe.Pointer(ex3)
	return dst
}

type innerFabricX509Credentials struct {
	AllowedCommonNameCount uint32
	AllowedCommonNames     **uint16
	FindType               FabricX509FindType
	FindValue              unsafe.Pointer
	StoreLocation          FabricX509StoreLocation
	StoreName              *uint16
	ProtectionLevel        FabricProtectionLevel
	Reserved               unsafe.Pointer
}
type innerFabricX509CredentialsEx1 struct {
	IssuerThumbprintCount uint32
	IssuerThumbprints     **uint16
	Reserved              unsafe.Pointer
}
type innerFabricX509CredentialsEx2 struct {
	RemoteCertThumbprintCount uint32
	RemoteCertThumbprints     **uint16
	RemoteX509NameCount       uint32
	RemoteX509Names           *innerFabricX509Name
	FindValueSecondary        unsafe.Pointer
	Reserved                  unsafe.Pointer
}
type innerFabricX509CredentialsEx3 struct {
	RemoteCertIssuerCount uint32
	RemoteCertIssuers     *innerFabricX509IssuerName
	Reserved              unsafe.Pointer
}

func (obj *innerFabricX509Credentials) toGoStruct() (dst *FabricX509Credentials) {
	if obj == nil {
		return
	}
	dst = &FabricX509Credentials{}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.AllowedCommonNames), int(obj.AllowedCommonNameCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.AllowedCommonNames = append(dst.AllowedCommonNames, tmpitem)
		}

	}
	dst.FindType = obj.FindType
	dst.FindValue = fromUnsafePointer(obj.FindValue)
	dst.StoreLocation = obj.StoreLocation
	dst.StoreName = utf16PtrToString(obj.StoreName)
	dst.ProtectionLevel = obj.ProtectionLevel
	ex0 := obj
	ex1 := (*innerFabricX509CredentialsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.IssuerThumbprints), int(ex1.IssuerThumbprintCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.IssuerThumbprints = append(dst.IssuerThumbprints, tmpitem)
		}

	}
	ex2 := (*innerFabricX509CredentialsEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex2.RemoteCertThumbprints), int(ex2.RemoteCertThumbprintCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.RemoteCertThumbprints = append(dst.RemoteCertThumbprints, tmpitem)
		}

	}
	{
		var innerlst []innerFabricX509Name
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex2.RemoteX509Names), int(ex2.RemoteX509NameCount))

		for _, item := range innerlst {
			var tmpitem FabricX509Name

			tmpitem = *item.toGoStruct()

			dst.RemoteX509Names = append(dst.RemoteX509Names, tmpitem)
		}

	}
	dst.FindValueSecondary = fromUnsafePointer(ex2.FindValueSecondary)
	ex3 := (*innerFabricX509CredentialsEx3)(ex2.Reserved)
	if ex3 == nil {
		return
	}
	{
		var innerlst []innerFabricX509IssuerName
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex3.RemoteCertIssuers), int(ex3.RemoteCertIssuerCount))

		for _, item := range innerlst {
			var tmpitem FabricX509IssuerName

			tmpitem = *item.toGoStruct()

			dst.RemoteCertIssuers = append(dst.RemoteCertIssuers, tmpitem)
		}

	}
	return
}

type FabricX509Name struct {
	Name                 string
	IssuerCertThumbprint string
}

func (obj *FabricX509Name) toInnerStruct() *innerFabricX509Name {
	if obj == nil {
		return nil
	}
	dst := &innerFabricX509Name{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.IssuerCertThumbprint = utf16PtrFromString(obj.IssuerCertThumbprint)
	return dst
}

type innerFabricX509Name struct {
	Name                 *uint16
	IssuerCertThumbprint *uint16
	Reserved             unsafe.Pointer
}

func (obj *innerFabricX509Name) toGoStruct() (dst *FabricX509Name) {
	if obj == nil {
		return
	}
	dst = &FabricX509Name{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.IssuerCertThumbprint = utf16PtrToString(obj.IssuerCertThumbprint)
	return
}

type FabricX509IssuerName struct {
	Name         string
	IssuerStores []string
}

func (obj *FabricX509IssuerName) toInnerStruct() *innerFabricX509IssuerName {
	if obj == nil {
		return nil
	}
	dst := &innerFabricX509IssuerName{}
	dst.Name = utf16PtrFromString(obj.Name)
	{

		var tmp []*uint16

		for _, item := range obj.IssuerStores {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		dst.IssuerStoreCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.IssuerStores = &tmp[0]
		}

	}
	return dst
}

type innerFabricX509IssuerName struct {
	Name             *uint16
	IssuerStoreCount uint32
	IssuerStores     **uint16
	Reserved         unsafe.Pointer
}

func (obj *innerFabricX509IssuerName) toGoStruct() (dst *FabricX509IssuerName) {
	if obj == nil {
		return
	}
	dst = &FabricX509IssuerName{}
	dst.Name = utf16PtrToString(obj.Name)
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.IssuerStores), int(obj.IssuerStoreCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.IssuerStores = append(dst.IssuerStores, tmpitem)
		}

	}
	return
}

type FabricX509Credentials2 struct {
	CertLoadPath          string
	RemoteCertThumbprints []string
	RemoteX509Names       []FabricX509Name
	ProtectionLevel       FabricProtectionLevel
}

func (obj *FabricX509Credentials2) toInnerStruct() *innerFabricX509Credentials2 {
	if obj == nil {
		return nil
	}
	dst := &innerFabricX509Credentials2{}
	dst.CertLoadPath = utf16PtrFromString(obj.CertLoadPath)
	{

		var tmp []*uint16

		for _, item := range obj.RemoteCertThumbprints {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		dst.RemoteCertThumbprintCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.RemoteCertThumbprints = &tmp[0]
		}

	}
	{

		var tmp []innerFabricX509Name

		for _, item := range obj.RemoteX509Names {
			var tmpitem innerFabricX509Name

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		dst.RemoteX509NameCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.RemoteX509Names = &tmp[0]
		}

	}
	dst.ProtectionLevel = obj.ProtectionLevel
	return dst
}

type innerFabricX509Credentials2 struct {
	CertLoadPath              *uint16
	RemoteCertThumbprintCount uint32
	RemoteCertThumbprints     **uint16
	RemoteX509NameCount       uint32
	RemoteX509Names           *innerFabricX509Name
	ProtectionLevel           FabricProtectionLevel
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricX509Credentials2) toGoStruct() (dst *FabricX509Credentials2) {
	if obj == nil {
		return
	}
	dst = &FabricX509Credentials2{}
	dst.CertLoadPath = utf16PtrToString(obj.CertLoadPath)
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.RemoteCertThumbprints), int(obj.RemoteCertThumbprintCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.RemoteCertThumbprints = append(dst.RemoteCertThumbprints, tmpitem)
		}

	}
	{
		var innerlst []innerFabricX509Name
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.RemoteX509Names), int(obj.RemoteX509NameCount))

		for _, item := range innerlst {
			var tmpitem FabricX509Name

			tmpitem = *item.toGoStruct()

			dst.RemoteX509Names = append(dst.RemoteX509Names, tmpitem)
		}

	}
	dst.ProtectionLevel = obj.ProtectionLevel
	return
}

type FabricClaimsCredentials struct {
	ServerCommonNames []string
	IssuerThumbprints []string
	LocalClaims       string
	ProtectionLevel   FabricProtectionLevel
	ServerThumbprints []string
}

func (obj *FabricClaimsCredentials) toInnerStruct() *innerFabricClaimsCredentials {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClaimsCredentials{}
	{

		var tmp []*uint16

		for _, item := range obj.ServerCommonNames {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		dst.ServerCommonNameCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.ServerCommonNames = &tmp[0]
		}

	}
	{

		var tmp []*uint16

		for _, item := range obj.IssuerThumbprints {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		dst.IssuerThumbprintCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.IssuerThumbprints = &tmp[0]
		}

	}
	dst.LocalClaims = utf16PtrFromString(obj.LocalClaims)
	dst.ProtectionLevel = obj.ProtectionLevel
	ex0 := dst
	ex1 := &innerFabricClaimsCredentialsEx1{}
	{

		var tmp []*uint16

		for _, item := range obj.ServerThumbprints {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		ex1.ServerThumbprintCount = uint32(len(tmp))
		if len(tmp) > 0 {
			ex1.ServerThumbprints = &tmp[0]
		}

	}
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricClaimsCredentials struct {
	ServerCommonNameCount uint32
	ServerCommonNames     **uint16
	IssuerThumbprintCount uint32
	IssuerThumbprints     **uint16
	LocalClaims           *uint16
	ProtectionLevel       FabricProtectionLevel
	Reserved              unsafe.Pointer
}
type innerFabricClaimsCredentialsEx1 struct {
	ServerThumbprintCount uint32
	ServerThumbprints     **uint16
	Reserved              unsafe.Pointer
}

func (obj *innerFabricClaimsCredentials) toGoStruct() (dst *FabricClaimsCredentials) {
	if obj == nil {
		return
	}
	dst = &FabricClaimsCredentials{}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ServerCommonNames), int(obj.ServerCommonNameCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.ServerCommonNames = append(dst.ServerCommonNames, tmpitem)
		}

	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.IssuerThumbprints), int(obj.IssuerThumbprintCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.IssuerThumbprints = append(dst.IssuerThumbprints, tmpitem)
		}

	}
	dst.LocalClaims = utf16PtrToString(obj.LocalClaims)
	dst.ProtectionLevel = obj.ProtectionLevel
	ex0 := obj
	ex1 := (*innerFabricClaimsCredentialsEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(ex1.ServerThumbprints), int(ex1.ServerThumbprintCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.ServerThumbprints = append(dst.ServerThumbprints, tmpitem)
		}

	}
	return
}

type FabricWindowsCredentials struct {
	RemoteSpn        string
	RemoteIdentities []string
	ProtectionLevel  FabricProtectionLevel
}

func (obj *FabricWindowsCredentials) toInnerStruct() *innerFabricWindowsCredentials {
	if obj == nil {
		return nil
	}
	dst := &innerFabricWindowsCredentials{}
	dst.RemoteSpn = utf16PtrFromString(obj.RemoteSpn)
	{

		var tmp []*uint16

		for _, item := range obj.RemoteIdentities {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		dst.RemoteIdentityCount = uint32(len(tmp))
		if len(tmp) > 0 {
			dst.RemoteIdentities = &tmp[0]
		}

	}
	dst.ProtectionLevel = obj.ProtectionLevel
	return dst
}

type innerFabricWindowsCredentials struct {
	RemoteSpn           *uint16
	RemoteIdentityCount uint32
	RemoteIdentities    **uint16
	ProtectionLevel     FabricProtectionLevel
	Reserved            unsafe.Pointer
}

func (obj *innerFabricWindowsCredentials) toGoStruct() (dst *FabricWindowsCredentials) {
	if obj == nil {
		return
	}
	dst = &FabricWindowsCredentials{}
	dst.RemoteSpn = utf16PtrToString(obj.RemoteSpn)
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.RemoteIdentities), int(obj.RemoteIdentityCount))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.RemoteIdentities = append(dst.RemoteIdentities, tmpitem)
		}

	}
	dst.ProtectionLevel = obj.ProtectionLevel
	return
}

type FabricClaimsRetrievalMetadata struct {
	Kind  FabricClaimsRetrievalMetadataKind
	Value interface{}
}

func (obj *FabricClaimsRetrievalMetadata) toInnerStruct() *innerFabricClaimsRetrievalMetadata {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClaimsRetrievalMetadata{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricClaimsRetrievalMetadata struct {
	Kind  FabricClaimsRetrievalMetadataKind
	Value unsafe.Pointer
}

func (obj *innerFabricClaimsRetrievalMetadata) toGoStruct() (dst *FabricClaimsRetrievalMetadata) {
	if obj == nil {
		return
	}
	dst = &FabricClaimsRetrievalMetadata{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricAadClAimsRetrievalMetadata struct {
	Authority          string
	TenantId           string
	ClusterApplication string
	ClientApplication  string
	ClientRedirect     string
	LoginEndpoint      string
}

func (obj *FabricAadClAimsRetrievalMetadata) toInnerStruct() *innerFabricAadClAimsRetrievalMetadata {
	if obj == nil {
		return nil
	}
	dst := &innerFabricAadClAimsRetrievalMetadata{}
	dst.Authority = utf16PtrFromString(obj.Authority)
	dst.TenantId = utf16PtrFromString(obj.TenantId)
	dst.ClusterApplication = utf16PtrFromString(obj.ClusterApplication)
	dst.ClientApplication = utf16PtrFromString(obj.ClientApplication)
	dst.ClientRedirect = utf16PtrFromString(obj.ClientRedirect)
	ex0 := dst
	ex1 := &innerFabricAadClAimsRetrievalMetadataEx1{}
	ex1.LoginEndpoint = utf16PtrFromString(obj.LoginEndpoint)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricAadClAimsRetrievalMetadata struct {
	Authority          *uint16
	TenantId           *uint16
	ClusterApplication *uint16
	ClientApplication  *uint16
	ClientRedirect     *uint16
	Reserved           unsafe.Pointer
}
type innerFabricAadClAimsRetrievalMetadataEx1 struct {
	LoginEndpoint *uint16
	Reserved      unsafe.Pointer
}

func (obj *innerFabricAadClAimsRetrievalMetadata) toGoStruct() (dst *FabricAadClAimsRetrievalMetadata) {
	if obj == nil {
		return
	}
	dst = &FabricAadClAimsRetrievalMetadata{}
	dst.Authority = utf16PtrToString(obj.Authority)
	dst.TenantId = utf16PtrToString(obj.TenantId)
	dst.ClusterApplication = utf16PtrToString(obj.ClusterApplication)
	dst.ClientApplication = utf16PtrToString(obj.ClientApplication)
	dst.ClientRedirect = utf16PtrToString(obj.ClientRedirect)
	ex0 := obj
	ex1 := (*innerFabricAadClAimsRetrievalMetadataEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.LoginEndpoint = utf16PtrToString(ex1.LoginEndpoint)
	return
}

type FabricSecurityUserDescription struct {
	Name                    string
	Sid                     string
	ParentSystemGroups      []string
	ParentApplicationGroups []string
}

func (obj *FabricSecurityUserDescription) toInnerStruct() *innerFabricSecurityUserDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSecurityUserDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Sid = utf16PtrFromString(obj.Sid)
	lst_94 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.ParentSystemGroups {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_94.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_94.Items = &tmp[0]
		}

	}
	dst.ParentSystemGroups = lst_94
	lst_95 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.ParentApplicationGroups {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_95.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_95.Items = &tmp[0]
		}

	}
	dst.ParentApplicationGroups = lst_95
	return dst
}

type innerFabricSecurityUserDescription struct {
	Name                    *uint16
	Sid                     *uint16
	ParentSystemGroups      *innerFabricStringList
	ParentApplicationGroups *innerFabricStringList
	Reserved                unsafe.Pointer
}

func (obj *innerFabricSecurityUserDescription) toGoStruct() (dst *FabricSecurityUserDescription) {
	if obj == nil {
		return
	}
	dst = &FabricSecurityUserDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Sid = utf16PtrToString(obj.Sid)
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ParentSystemGroups.Items), int(obj.ParentSystemGroups.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.ParentSystemGroups = append(dst.ParentSystemGroups, tmpitem)
		}

	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ParentApplicationGroups.Items), int(obj.ParentApplicationGroups.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.ParentApplicationGroups = append(dst.ParentApplicationGroups, tmpitem)
		}

	}
	return
}

type innerFabricSecurityUserDescriptionList struct {
	Count uint32
	Items *innerFabricSecurityUserDescription
}

func (obj *innerFabricSecurityUserDescriptionList) toGoStruct() []FabricSecurityUserDescription {
	var dst []FabricSecurityUserDescription
	{
		var innerlst []innerFabricSecurityUserDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricSecurityUserDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricSecurityGroupDescription struct {
	Name               string
	Sid                string
	DomainGroupMembers []string
	SystemGroupMembers []string
	DomainUserMembers  []string
}

func (obj *FabricSecurityGroupDescription) toInnerStruct() *innerFabricSecurityGroupDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSecurityGroupDescription{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Sid = utf16PtrFromString(obj.Sid)
	lst_96 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.DomainGroupMembers {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_96.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_96.Items = &tmp[0]
		}

	}
	dst.DomainGroupMembers = lst_96
	lst_97 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.SystemGroupMembers {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_97.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_97.Items = &tmp[0]
		}

	}
	dst.SystemGroupMembers = lst_97
	lst_98 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.DomainUserMembers {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_98.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_98.Items = &tmp[0]
		}

	}
	dst.DomainUserMembers = lst_98
	return dst
}

type innerFabricSecurityGroupDescription struct {
	Name               *uint16
	Sid                *uint16
	DomainGroupMembers *innerFabricStringList
	SystemGroupMembers *innerFabricStringList
	DomainUserMembers  *innerFabricStringList
	Reserved           unsafe.Pointer
}

func (obj *innerFabricSecurityGroupDescription) toGoStruct() (dst *FabricSecurityGroupDescription) {
	if obj == nil {
		return
	}
	dst = &FabricSecurityGroupDescription{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Sid = utf16PtrToString(obj.Sid)
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DomainGroupMembers.Items), int(obj.DomainGroupMembers.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.DomainGroupMembers = append(dst.DomainGroupMembers, tmpitem)
		}

	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.SystemGroupMembers.Items), int(obj.SystemGroupMembers.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.SystemGroupMembers = append(dst.SystemGroupMembers, tmpitem)
		}

	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DomainUserMembers.Items), int(obj.DomainUserMembers.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.DomainUserMembers = append(dst.DomainUserMembers, tmpitem)
		}

	}
	return
}

type innerFabricSecurityGroupDescriptionList struct {
	Count uint32
	Items *innerFabricSecurityGroupDescription
}

func (obj *innerFabricSecurityGroupDescriptionList) toGoStruct() []FabricSecurityGroupDescription {
	var dst []FabricSecurityGroupDescription
	{
		var innerlst []innerFabricSecurityGroupDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricSecurityGroupDescription

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationPrincipalsDescription struct {
	Users  []FabricSecurityUserDescription
	Groups []FabricSecurityGroupDescription
}

func (obj *FabricApplicationPrincipalsDescription) toInnerStruct() *innerFabricApplicationPrincipalsDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationPrincipalsDescription{}
	lst_99 := &innerFabricSecurityUserDescriptionList{}
	{

		var tmp []innerFabricSecurityUserDescription

		for _, item := range obj.Users {
			var tmpitem innerFabricSecurityUserDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_99.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_99.Items = &tmp[0]
		}

	}
	dst.Users = lst_99
	lst_100 := &innerFabricSecurityGroupDescriptionList{}
	{

		var tmp []innerFabricSecurityGroupDescription

		for _, item := range obj.Groups {
			var tmpitem innerFabricSecurityGroupDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_100.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_100.Items = &tmp[0]
		}

	}
	dst.Groups = lst_100
	return dst
}

type innerFabricApplicationPrincipalsDescription struct {
	Users    *innerFabricSecurityUserDescriptionList
	Groups   *innerFabricSecurityGroupDescriptionList
	Reserved unsafe.Pointer
}

func (obj *innerFabricApplicationPrincipalsDescription) toGoStruct() (dst *FabricApplicationPrincipalsDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationPrincipalsDescription{}
	{
		var innerlst []innerFabricSecurityUserDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Users.Items), int(obj.Users.Count))

		for _, item := range innerlst {
			var tmpitem FabricSecurityUserDescription

			tmpitem = *item.toGoStruct()

			dst.Users = append(dst.Users, tmpitem)
		}

	}
	{
		var innerlst []innerFabricSecurityGroupDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Groups.Items), int(obj.Groups.Count))

		for _, item := range innerlst {
			var tmpitem FabricSecurityGroupDescription

			tmpitem = *item.toGoStruct()

			dst.Groups = append(dst.Groups, tmpitem)
		}

	}
	return
}

type FabricApplicationUpgradeProgress struct {
	UpgradeDescription                    *FabricApplicationUpgradeDescription
	UpgradeState                          FabricApplicationUpgradeState
	UpgradeMode                           FabricRollingUpgradeMode
	NextUpgradeDomain                     string
	UpgradeDomains                        []FabricUpgradeDomainStatusDescription
	UpgradeDurationInSeconds              uint32
	CurrentUpgradeDomainDurationInSeconds uint32
	UnhealthyEvaluations                  []FabricHealthEvaluation
	CurrentUpgradeDomainProgress          *FabricUpgradeDomainProgress
	StartTimestampUtc                     time.Time
	FailureTimestampUtc                   time.Time
	FailureReason                         FabricUpgradeFailureReason
	UpgradeDomainProgressAtFailure        *FabricUpgradeDomainProgress
	UpgradeStatusDetails                  string
}

func (obj *FabricApplicationUpgradeProgress) toInnerStruct() *innerFabricApplicationUpgradeProgress {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationUpgradeProgress{}
	dst.UpgradeDescription = obj.UpgradeDescription.toInnerStruct()
	dst.UpgradeState = obj.UpgradeState
	dst.UpgradeMode = obj.UpgradeMode
	dst.NextUpgradeDomain = utf16PtrFromString(obj.NextUpgradeDomain)
	lst_101 := &innerFabricUpgradeDomainStatusDescriptionList{}
	{

		var tmp []innerFabricUpgradeDomainStatusDescription

		for _, item := range obj.UpgradeDomains {
			var tmpitem innerFabricUpgradeDomainStatusDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_101.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_101.Items = &tmp[0]
		}

	}
	dst.UpgradeDomains = lst_101
	dst.UpgradeDurationInSeconds = obj.UpgradeDurationInSeconds
	dst.CurrentUpgradeDomainDurationInSeconds = obj.CurrentUpgradeDomainDurationInSeconds
	lst_102 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_102.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_102.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_102
	dst.CurrentUpgradeDomainProgress = obj.CurrentUpgradeDomainProgress.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricApplicationUpgradeProgressEx1{}
	ex1.StartTimestampUtc = timeToFiletime(obj.StartTimestampUtc)
	ex1.FailureTimestampUtc = timeToFiletime(obj.FailureTimestampUtc)
	ex1.FailureReason = obj.FailureReason
	ex1.UpgradeDomainProgressAtFailure = obj.UpgradeDomainProgressAtFailure.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricApplicationUpgradeProgressEx2{}
	ex2.UpgradeStatusDetails = utf16PtrFromString(obj.UpgradeStatusDetails)
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricApplicationUpgradeProgress struct {
	UpgradeDescription                    *innerFabricApplicationUpgradeDescription
	UpgradeState                          FabricApplicationUpgradeState
	UpgradeMode                           FabricRollingUpgradeMode
	NextUpgradeDomain                     *uint16
	UpgradeDomains                        *innerFabricUpgradeDomainStatusDescriptionList
	UpgradeDurationInSeconds              uint32
	CurrentUpgradeDomainDurationInSeconds uint32
	UnhealthyEvaluations                  *innerFabricHealthEvaluationList
	CurrentUpgradeDomainProgress          *innerFabricUpgradeDomainProgress
	Reserved                              unsafe.Pointer
}
type innerFabricApplicationUpgradeProgressEx1 struct {
	StartTimestampUtc              filetime
	FailureTimestampUtc            filetime
	FailureReason                  FabricUpgradeFailureReason
	UpgradeDomainProgressAtFailure *innerFabricUpgradeDomainProgress
	Reserved                       unsafe.Pointer
}
type innerFabricApplicationUpgradeProgressEx2 struct {
	UpgradeStatusDetails *uint16
	Reserved             unsafe.Pointer
}

func (obj *innerFabricApplicationUpgradeProgress) toGoStruct() (dst *FabricApplicationUpgradeProgress) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationUpgradeProgress{}
	dst.UpgradeDescription = obj.UpgradeDescription.toGoStruct()
	dst.UpgradeState = obj.UpgradeState
	dst.UpgradeMode = obj.UpgradeMode
	dst.NextUpgradeDomain = utf16PtrToString(obj.NextUpgradeDomain)
	{
		var innerlst []innerFabricUpgradeDomainStatusDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UpgradeDomains.Items), int(obj.UpgradeDomains.Count))

		for _, item := range innerlst {
			var tmpitem FabricUpgradeDomainStatusDescription

			tmpitem = *item.toGoStruct()

			dst.UpgradeDomains = append(dst.UpgradeDomains, tmpitem)
		}

	}
	dst.UpgradeDurationInSeconds = obj.UpgradeDurationInSeconds
	dst.CurrentUpgradeDomainDurationInSeconds = obj.CurrentUpgradeDomainDurationInSeconds
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.CurrentUpgradeDomainProgress = obj.CurrentUpgradeDomainProgress.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricApplicationUpgradeProgressEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.StartTimestampUtc = ex1.StartTimestampUtc.ToTime()
	dst.FailureTimestampUtc = ex1.FailureTimestampUtc.ToTime()
	dst.FailureReason = ex1.FailureReason
	dst.UpgradeDomainProgressAtFailure = ex1.UpgradeDomainProgressAtFailure.toGoStruct()
	ex2 := (*innerFabricApplicationUpgradeProgressEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.UpgradeStatusDetails = utf16PtrToString(ex2.UpgradeStatusDetails)
	return
}

type FabricProvisionApplicationTypeDescriptionBase struct {
	Kind  FabricProvisionApplicationTypeKind
	Value interface{}
}

func (obj *FabricProvisionApplicationTypeDescriptionBase) toInnerStruct() *innerFabricProvisionApplicationTypeDescriptionBase {
	if obj == nil {
		return nil
	}
	dst := &innerFabricProvisionApplicationTypeDescriptionBase{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricProvisionApplicationTypeDescriptionBase struct {
	Kind  FabricProvisionApplicationTypeKind
	Value unsafe.Pointer
}

func (obj *innerFabricProvisionApplicationTypeDescriptionBase) toGoStruct() (dst *FabricProvisionApplicationTypeDescriptionBase) {
	if obj == nil {
		return
	}
	dst = &FabricProvisionApplicationTypeDescriptionBase{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricProvisionApplicationTypeDescription struct {
	BuildPath                       string
	Async                           bool
	ApplicationPackageCleanupPolicy FabricApplicationPackageCleanupPolicy
}

func (obj *FabricProvisionApplicationTypeDescription) toInnerStruct() *innerFabricProvisionApplicationTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricProvisionApplicationTypeDescription{}
	dst.BuildPath = utf16PtrFromString(obj.BuildPath)
	dst.Async = obj.Async
	ex0 := dst
	ex1 := &innerFabricProvisionApplicationTypeDescriptionEx1{}
	ex1.ApplicationPackageCleanupPolicy = obj.ApplicationPackageCleanupPolicy
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricProvisionApplicationTypeDescription struct {
	BuildPath *uint16
	Async     bool
	Reserved  unsafe.Pointer
}
type innerFabricProvisionApplicationTypeDescriptionEx1 struct {
	ApplicationPackageCleanupPolicy FabricApplicationPackageCleanupPolicy
	Reserved                        unsafe.Pointer
}

func (obj *innerFabricProvisionApplicationTypeDescription) toGoStruct() (dst *FabricProvisionApplicationTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricProvisionApplicationTypeDescription{}
	dst.BuildPath = utf16PtrToString(obj.BuildPath)
	dst.Async = obj.Async
	ex0 := obj
	ex1 := (*innerFabricProvisionApplicationTypeDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ApplicationPackageCleanupPolicy = ex1.ApplicationPackageCleanupPolicy
	return
}

type FabricExternalStoreProvisionApplicationTypeDescription struct {
	ApplicationTypeName           string
	ApplicationTypeVersion        string
	ApplicationPackageDownloadUri string
	Async                         bool
}

func (obj *FabricExternalStoreProvisionApplicationTypeDescription) toInnerStruct() *innerFabricExternalStoreProvisionApplicationTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricExternalStoreProvisionApplicationTypeDescription{}
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	dst.ApplicationPackageDownloadUri = utf16PtrFromString(obj.ApplicationPackageDownloadUri)
	dst.Async = obj.Async
	return dst
}

type innerFabricExternalStoreProvisionApplicationTypeDescription struct {
	ApplicationTypeName           *uint16
	ApplicationTypeVersion        *uint16
	ApplicationPackageDownloadUri *uint16
	Async                         bool
	Reserved                      unsafe.Pointer
}

func (obj *innerFabricExternalStoreProvisionApplicationTypeDescription) toGoStruct() (dst *FabricExternalStoreProvisionApplicationTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricExternalStoreProvisionApplicationTypeDescription{}
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	dst.ApplicationPackageDownloadUri = utf16PtrToString(obj.ApplicationPackageDownloadUri)
	dst.Async = obj.Async
	return
}

type FabricUnprovisionApplicationTypeDescription struct {
	ApplicationTypeName    string
	ApplicationTypeVersion string
	Async                  bool
}

func (obj *FabricUnprovisionApplicationTypeDescription) toInnerStruct() *innerFabricUnprovisionApplicationTypeDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUnprovisionApplicationTypeDescription{}
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrFromString(obj.ApplicationTypeVersion)
	dst.Async = obj.Async
	return dst
}

type innerFabricUnprovisionApplicationTypeDescription struct {
	ApplicationTypeName    *uint16
	ApplicationTypeVersion *uint16
	Async                  bool
	Reserved               unsafe.Pointer
}

func (obj *innerFabricUnprovisionApplicationTypeDescription) toGoStruct() (dst *FabricUnprovisionApplicationTypeDescription) {
	if obj == nil {
		return
	}
	dst = &FabricUnprovisionApplicationTypeDescription{}
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.ApplicationTypeVersion = utf16PtrToString(obj.ApplicationTypeVersion)
	dst.Async = obj.Async
	return
}

type FabricDeleteApplicationDescription struct {
	ApplicationName string
	ForceDelete     bool
}

func (obj *FabricDeleteApplicationDescription) toInnerStruct() *innerFabricDeleteApplicationDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeleteApplicationDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.ForceDelete = obj.ForceDelete
	return dst
}

type innerFabricDeleteApplicationDescription struct {
	ApplicationName *uint16
	ForceDelete     bool
	Reserved        unsafe.Pointer
}

func (obj *innerFabricDeleteApplicationDescription) toGoStruct() (dst *FabricDeleteApplicationDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeleteApplicationDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.ForceDelete = obj.ForceDelete
	return
}

type FabricUpgradeProgress struct {
	UpgradeDescription                    *FabricUpgradeDescription
	UpgradeState                          FabricUpgradeState
	UpgradeMode                           FabricRollingUpgradeMode
	NextUpgradeDomain                     string
	UpgradeDomains                        []FabricUpgradeDomainStatusDescription
	UpgradeDurationInSeconds              uint32
	CurrentUpgradeDomainDurationInSeconds uint32
	UnhealthyEvaluations                  []FabricHealthEvaluation
	CurrentUpgradeDomainProgress          *FabricUpgradeDomainProgress
	StartTimestampUtc                     time.Time
	FailureTimestampUtc                   time.Time
	FailureReason                         FabricUpgradeFailureReason
	UpgradeDomainProgressAtFailure        *FabricUpgradeDomainProgress
}

func (obj *FabricUpgradeProgress) toInnerStruct() *innerFabricUpgradeProgress {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeProgress{}
	dst.UpgradeDescription = obj.UpgradeDescription.toInnerStruct()
	dst.UpgradeState = obj.UpgradeState
	dst.UpgradeMode = obj.UpgradeMode
	dst.NextUpgradeDomain = utf16PtrFromString(obj.NextUpgradeDomain)
	lst_103 := &innerFabricUpgradeDomainStatusDescriptionList{}
	{

		var tmp []innerFabricUpgradeDomainStatusDescription

		for _, item := range obj.UpgradeDomains {
			var tmpitem innerFabricUpgradeDomainStatusDescription

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_103.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_103.Items = &tmp[0]
		}

	}
	dst.UpgradeDomains = lst_103
	dst.UpgradeDurationInSeconds = obj.UpgradeDurationInSeconds
	dst.CurrentUpgradeDomainDurationInSeconds = obj.CurrentUpgradeDomainDurationInSeconds
	lst_104 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_104.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_104.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_104
	dst.CurrentUpgradeDomainProgress = obj.CurrentUpgradeDomainProgress.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricUpgradeProgressEx1{}
	ex1.StartTimestampUtc = timeToFiletime(obj.StartTimestampUtc)
	ex1.FailureTimestampUtc = timeToFiletime(obj.FailureTimestampUtc)
	ex1.FailureReason = obj.FailureReason
	ex1.UpgradeDomainProgressAtFailure = obj.UpgradeDomainProgressAtFailure.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricUpgradeProgress struct {
	UpgradeDescription                    *innerFabricUpgradeDescription
	UpgradeState                          FabricUpgradeState
	UpgradeMode                           FabricRollingUpgradeMode
	NextUpgradeDomain                     *uint16
	UpgradeDomains                        *innerFabricUpgradeDomainStatusDescriptionList
	UpgradeDurationInSeconds              uint32
	CurrentUpgradeDomainDurationInSeconds uint32
	UnhealthyEvaluations                  *innerFabricHealthEvaluationList
	CurrentUpgradeDomainProgress          *innerFabricUpgradeDomainProgress
	Reserved                              unsafe.Pointer
}
type innerFabricUpgradeProgressEx1 struct {
	StartTimestampUtc              filetime
	FailureTimestampUtc            filetime
	FailureReason                  FabricUpgradeFailureReason
	UpgradeDomainProgressAtFailure *innerFabricUpgradeDomainProgress
	Reserved                       unsafe.Pointer
}

func (obj *innerFabricUpgradeProgress) toGoStruct() (dst *FabricUpgradeProgress) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeProgress{}
	dst.UpgradeDescription = obj.UpgradeDescription.toGoStruct()
	dst.UpgradeState = obj.UpgradeState
	dst.UpgradeMode = obj.UpgradeMode
	dst.NextUpgradeDomain = utf16PtrToString(obj.NextUpgradeDomain)
	{
		var innerlst []innerFabricUpgradeDomainStatusDescription
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UpgradeDomains.Items), int(obj.UpgradeDomains.Count))

		for _, item := range innerlst {
			var tmpitem FabricUpgradeDomainStatusDescription

			tmpitem = *item.toGoStruct()

			dst.UpgradeDomains = append(dst.UpgradeDomains, tmpitem)
		}

	}
	dst.UpgradeDurationInSeconds = obj.UpgradeDurationInSeconds
	dst.CurrentUpgradeDomainDurationInSeconds = obj.CurrentUpgradeDomainDurationInSeconds
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.CurrentUpgradeDomainProgress = obj.CurrentUpgradeDomainProgress.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricUpgradeProgressEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.StartTimestampUtc = ex1.StartTimestampUtc.ToTime()
	dst.FailureTimestampUtc = ex1.FailureTimestampUtc.ToTime()
	dst.FailureReason = ex1.FailureReason
	dst.UpgradeDomainProgressAtFailure = ex1.UpgradeDomainProgressAtFailure.toGoStruct()
	return
}

type FabricPackageSharingPolicy struct {
	PackageName string
	Scope       FabricPackageSharingPolicyScope
}

func (obj *FabricPackageSharingPolicy) toInnerStruct() *innerFabricPackageSharingPolicy {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPackageSharingPolicy{}
	dst.PackageName = utf16PtrFromString(obj.PackageName)
	dst.Scope = obj.Scope
	return dst
}

type innerFabricPackageSharingPolicy struct {
	PackageName *uint16
	Scope       FabricPackageSharingPolicyScope
	Reserved    unsafe.Pointer
}

func (obj *innerFabricPackageSharingPolicy) toGoStruct() (dst *FabricPackageSharingPolicy) {
	if obj == nil {
		return
	}
	dst = &FabricPackageSharingPolicy{}
	dst.PackageName = utf16PtrToString(obj.PackageName)
	dst.Scope = obj.Scope
	return
}

type innerFabricPackageSharingPolicyList struct {
	Count uint32
	Items *innerFabricPackageSharingPolicy
}

func (obj *innerFabricPackageSharingPolicyList) toGoStruct() []FabricPackageSharingPolicy {
	var dst []FabricPackageSharingPolicy
	{
		var innerlst []innerFabricPackageSharingPolicy
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricPackageSharingPolicy

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricHealthEventsFilter struct {
	HealthStateFilter uint32
}
type innerFabricHealthEventsFilter struct {
	FabricHealthEventsFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricHealthEventsFilter) toGoStruct() *FabricHealthEventsFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricHealthEventsFilter
}
func (obj *FabricHealthEventsFilter) toInnerStruct() *innerFabricHealthEventsFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricHealthEventsFilter{*obj, nil}
}

type FabricNodeHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricNodeHealthStatesFilter struct {
	FabricNodeHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricNodeHealthStatesFilter) toGoStruct() *FabricNodeHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricNodeHealthStatesFilter
}
func (obj *FabricNodeHealthStatesFilter) toInnerStruct() *innerFabricNodeHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricNodeHealthStatesFilter{*obj, nil}
}

type FabricReplicaHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricReplicaHealthStatesFilter struct {
	FabricReplicaHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaHealthStatesFilter) toGoStruct() *FabricReplicaHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicaHealthStatesFilter
}
func (obj *FabricReplicaHealthStatesFilter) toInnerStruct() *innerFabricReplicaHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicaHealthStatesFilter{*obj, nil}
}

type FabricPartitionHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricPartitionHealthStatesFilter struct {
	FabricPartitionHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionHealthStatesFilter) toGoStruct() *FabricPartitionHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionHealthStatesFilter
}
func (obj *FabricPartitionHealthStatesFilter) toInnerStruct() *innerFabricPartitionHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionHealthStatesFilter{*obj, nil}
}

type FabricServiceHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricServiceHealthStatesFilter struct {
	FabricServiceHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceHealthStatesFilter) toGoStruct() *FabricServiceHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceHealthStatesFilter
}
func (obj *FabricServiceHealthStatesFilter) toInnerStruct() *innerFabricServiceHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceHealthStatesFilter{*obj, nil}
}

type FabricApplicationHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricApplicationHealthStatesFilter struct {
	FabricApplicationHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricApplicationHealthStatesFilter) toGoStruct() *FabricApplicationHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricApplicationHealthStatesFilter
}
func (obj *FabricApplicationHealthStatesFilter) toInnerStruct() *innerFabricApplicationHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricApplicationHealthStatesFilter{*obj, nil}
}

type FabricDeployedApplicationHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricDeployedApplicationHealthStatesFilter struct {
	FabricDeployedApplicationHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthStatesFilter) toGoStruct() *FabricDeployedApplicationHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricDeployedApplicationHealthStatesFilter
}
func (obj *FabricDeployedApplicationHealthStatesFilter) toInnerStruct() *innerFabricDeployedApplicationHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricDeployedApplicationHealthStatesFilter{*obj, nil}
}

type FabricDeployedServicePackageHealthStatesFilter struct {
	HealthStateFilter uint32
}
type innerFabricDeployedServicePackageHealthStatesFilter struct {
	FabricDeployedServicePackageHealthStatesFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthStatesFilter) toGoStruct() *FabricDeployedServicePackageHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricDeployedServicePackageHealthStatesFilter
}
func (obj *FabricDeployedServicePackageHealthStatesFilter) toInnerStruct() *innerFabricDeployedServicePackageHealthStatesFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricDeployedServicePackageHealthStatesFilter{*obj, nil}
}

type FabricClusterHealthQueryDescription struct {
	HealthPolicy               *FabricClusterHealthPolicy
	ApplicationHealthPolicyMap map[string]FabricApplicationHealthPolicy
	EventsFilter               *FabricHealthEventsFilter
	NodesFilter                *FabricNodeHealthStatesFilter
	ApplicationsFilter         *FabricApplicationHealthStatesFilter
	HealthStatisticsFilter     *FabricClusterHealthStatisticsFilter
}

func (obj *FabricClusterHealthQueryDescription) toInnerStruct() *innerFabricClusterHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterHealthQueryDescription{}
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	{
		mapobj := &innerFabricApplicationHealthPolicyMap{}

		var tmp []innerFabricApplicationHealthPolicyMapItem

		for k, v := range obj.ApplicationHealthPolicyMap {
			kv := innerFabricApplicationHealthPolicyMapItem{}

			kv.ApplicationName = utf16PtrFromString(k)
			kv.HealthPolicy = v.toInnerStruct()

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		dst.ApplicationHealthPolicyMap = mapobj
	}
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	dst.NodesFilter = obj.NodesFilter.toInnerStruct()
	dst.ApplicationsFilter = obj.ApplicationsFilter.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricClusterHealthQueryDescriptionEx1{}
	ex1.HealthStatisticsFilter = obj.HealthStatisticsFilter.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricClusterHealthQueryDescription struct {
	HealthPolicy               *innerFabricClusterHealthPolicy
	ApplicationHealthPolicyMap *innerFabricApplicationHealthPolicyMap
	EventsFilter               *innerFabricHealthEventsFilter
	NodesFilter                *innerFabricNodeHealthStatesFilter
	ApplicationsFilter         *innerFabricApplicationHealthStatesFilter
	Reserved                   unsafe.Pointer
}
type innerFabricClusterHealthQueryDescriptionEx1 struct {
	HealthStatisticsFilter *innerFabricClusterHealthStatisticsFilter
	Reserved               unsafe.Pointer
}

func (obj *innerFabricClusterHealthQueryDescription) toGoStruct() (dst *FabricClusterHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricClusterHealthQueryDescription{}
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	{
		var mapvar = make(map[string]FabricApplicationHealthPolicy)

		var innerlst []innerFabricApplicationHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationHealthPolicyMap.Items), int(obj.ApplicationHealthPolicyMap.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricApplicationHealthPolicy

			k = utf16PtrToString(kv.ApplicationName)
			v = kv.HealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst.ApplicationHealthPolicyMap = mapvar
	}
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	dst.NodesFilter = obj.NodesFilter.toGoStruct()
	dst.ApplicationsFilter = obj.ApplicationsFilter.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricClusterHealthQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthStatisticsFilter = ex1.HealthStatisticsFilter.toGoStruct()
	return
}

type FabricClusterHealthStatisticsFilter struct {
	ExcludeHealthStatistics                  bool
	IncludeSystemApplicationHealthStatistics bool
}
type innerFabricClusterHealthStatisticsFilter struct {
	FabricClusterHealthStatisticsFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricClusterHealthStatisticsFilter) toGoStruct() *FabricClusterHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricClusterHealthStatisticsFilter
}
func (obj *FabricClusterHealthStatisticsFilter) toInnerStruct() *innerFabricClusterHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricClusterHealthStatisticsFilter{*obj, nil}
}

type FabricNodeHealthQueryDescription struct {
	NodeName     string
	HealthPolicy *FabricClusterHealthPolicy
	EventsFilter *FabricHealthEventsFilter
}

func (obj *FabricNodeHealthQueryDescription) toInnerStruct() *innerFabricNodeHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealthQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	return dst
}

type innerFabricNodeHealthQueryDescription struct {
	NodeName     *uint16
	HealthPolicy *innerFabricClusterHealthPolicy
	EventsFilter *innerFabricHealthEventsFilter
	Reserved     unsafe.Pointer
}

func (obj *innerFabricNodeHealthQueryDescription) toGoStruct() (dst *FabricNodeHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealthQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	return
}

type FabricApplicationHealthQueryDescription struct {
	ApplicationName            string
	HealthPolicy               *FabricApplicationHealthPolicy
	EventsFilter               *FabricHealthEventsFilter
	ServicesFilter             *FabricServiceHealthStatesFilter
	DeployedApplicationsFilter *FabricDeployedApplicationHealthStatesFilter
	HealthStatisticsFilter     *FabricApplicationHealthStatisticsFilter
}

func (obj *FabricApplicationHealthQueryDescription) toInnerStruct() *innerFabricApplicationHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	dst.ServicesFilter = obj.ServicesFilter.toInnerStruct()
	dst.DeployedApplicationsFilter = obj.DeployedApplicationsFilter.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricApplicationHealthQueryDescriptionEx1{}
	ex1.HealthStatisticsFilter = obj.HealthStatisticsFilter.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricApplicationHealthQueryDescription struct {
	ApplicationName            *uint16
	HealthPolicy               *innerFabricApplicationHealthPolicy
	EventsFilter               *innerFabricHealthEventsFilter
	ServicesFilter             *innerFabricServiceHealthStatesFilter
	DeployedApplicationsFilter *innerFabricDeployedApplicationHealthStatesFilter
	Reserved                   unsafe.Pointer
}
type innerFabricApplicationHealthQueryDescriptionEx1 struct {
	HealthStatisticsFilter *innerFabricApplicationHealthStatisticsFilter
	Reserved               unsafe.Pointer
}

func (obj *innerFabricApplicationHealthQueryDescription) toGoStruct() (dst *FabricApplicationHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	dst.ServicesFilter = obj.ServicesFilter.toGoStruct()
	dst.DeployedApplicationsFilter = obj.DeployedApplicationsFilter.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricApplicationHealthQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthStatisticsFilter = ex1.HealthStatisticsFilter.toGoStruct()
	return
}

type FabricApplicationHealthStatisticsFilter struct {
	ExcludeHealthStatistics bool
}
type innerFabricApplicationHealthStatisticsFilter struct {
	FabricApplicationHealthStatisticsFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricApplicationHealthStatisticsFilter) toGoStruct() *FabricApplicationHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricApplicationHealthStatisticsFilter
}
func (obj *FabricApplicationHealthStatisticsFilter) toInnerStruct() *innerFabricApplicationHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricApplicationHealthStatisticsFilter{*obj, nil}
}

type FabricServiceHealthQueryDescription struct {
	ServiceName            string
	HealthPolicy           *FabricApplicationHealthPolicy
	EventsFilter           *FabricHealthEventsFilter
	PartitionsFilter       *FabricPartitionHealthStatesFilter
	HealthStatisticsFilter *FabricServiceHealthStatisticsFilter
}

func (obj *FabricServiceHealthQueryDescription) toInnerStruct() *innerFabricServiceHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealthQueryDescription{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	dst.PartitionsFilter = obj.PartitionsFilter.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricServiceHealthQueryDescriptionEx1{}
	ex1.HealthStatisticsFilter = obj.HealthStatisticsFilter.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricServiceHealthQueryDescription struct {
	ServiceName      *uint16
	HealthPolicy     *innerFabricApplicationHealthPolicy
	EventsFilter     *innerFabricHealthEventsFilter
	PartitionsFilter *innerFabricPartitionHealthStatesFilter
	Reserved         unsafe.Pointer
}
type innerFabricServiceHealthQueryDescriptionEx1 struct {
	HealthStatisticsFilter *innerFabricServiceHealthStatisticsFilter
	Reserved               unsafe.Pointer
}

func (obj *innerFabricServiceHealthQueryDescription) toGoStruct() (dst *FabricServiceHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealthQueryDescription{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	dst.PartitionsFilter = obj.PartitionsFilter.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricServiceHealthQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthStatisticsFilter = ex1.HealthStatisticsFilter.toGoStruct()
	return
}

type FabricServiceHealthStatisticsFilter struct {
	ExcludeHealthStatistics bool
}
type innerFabricServiceHealthStatisticsFilter struct {
	FabricServiceHealthStatisticsFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricServiceHealthStatisticsFilter) toGoStruct() *FabricServiceHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricServiceHealthStatisticsFilter
}
func (obj *FabricServiceHealthStatisticsFilter) toInnerStruct() *innerFabricServiceHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricServiceHealthStatisticsFilter{*obj, nil}
}

type FabricPartitionHealthQueryDescription struct {
	PartitionId            uuid.UUID
	HealthPolicy           *FabricApplicationHealthPolicy
	EventsFilter           *FabricHealthEventsFilter
	ReplicasFilter         *FabricReplicaHealthStatesFilter
	HealthStatisticsFilter *FabricPartitionHealthStatisticsFilter
}

func (obj *FabricPartitionHealthQueryDescription) toInnerStruct() *innerFabricPartitionHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionHealthQueryDescription{}
	dst.PartitionId = obj.PartitionId
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	dst.ReplicasFilter = obj.ReplicasFilter.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricPartitionHealthQueryDescriptionEx1{}
	ex1.HealthStatisticsFilter = obj.HealthStatisticsFilter.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricPartitionHealthQueryDescription struct {
	PartitionId    uuid.UUID
	HealthPolicy   *innerFabricApplicationHealthPolicy
	EventsFilter   *innerFabricHealthEventsFilter
	ReplicasFilter *innerFabricReplicaHealthStatesFilter
	Reserved       unsafe.Pointer
}
type innerFabricPartitionHealthQueryDescriptionEx1 struct {
	HealthStatisticsFilter *innerFabricPartitionHealthStatisticsFilter
	Reserved               unsafe.Pointer
}

func (obj *innerFabricPartitionHealthQueryDescription) toGoStruct() (dst *FabricPartitionHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionHealthQueryDescription{}
	dst.PartitionId = obj.PartitionId
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	dst.ReplicasFilter = obj.ReplicasFilter.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricPartitionHealthQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthStatisticsFilter = ex1.HealthStatisticsFilter.toGoStruct()
	return
}

type FabricPartitionHealthStatisticsFilter struct {
	ExcludeHealthStatistics bool
}
type innerFabricPartitionHealthStatisticsFilter struct {
	FabricPartitionHealthStatisticsFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricPartitionHealthStatisticsFilter) toGoStruct() *FabricPartitionHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricPartitionHealthStatisticsFilter
}
func (obj *FabricPartitionHealthStatisticsFilter) toInnerStruct() *innerFabricPartitionHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricPartitionHealthStatisticsFilter{*obj, nil}
}

type FabricReplicaHealthQueryDescription struct {
	PartitionId         uuid.UUID
	ReplicaOrInstanceId int64
	HealthPolicy        *FabricApplicationHealthPolicy
	EventsFilter        *FabricHealthEventsFilter
}
type innerFabricReplicaHealthQueryDescription struct {
	FabricReplicaHealthQueryDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaHealthQueryDescription) toGoStruct() *FabricReplicaHealthQueryDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicaHealthQueryDescription
}
func (obj *FabricReplicaHealthQueryDescription) toInnerStruct() *innerFabricReplicaHealthQueryDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicaHealthQueryDescription{*obj, nil}
}

type FabricDeployedApplicationHealthQueryDescription struct {
	ApplicationName               string
	NodeName                      string
	HealthPolicy                  *FabricApplicationHealthPolicy
	EventsFilter                  *FabricHealthEventsFilter
	DeployedServicePackagesFilter *FabricDeployedServicePackageHealthStatesFilter
	HealthStatisticsFilter        *FabricDeployedApplicationHealthStatisticsFilter
}

func (obj *FabricDeployedApplicationHealthQueryDescription) toInnerStruct() *innerFabricDeployedApplicationHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealthQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	dst.DeployedServicePackagesFilter = obj.DeployedServicePackagesFilter.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricDeployedApplicationHealthQueryDescriptionEx1{}
	ex1.HealthStatisticsFilter = obj.HealthStatisticsFilter.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedApplicationHealthQueryDescription struct {
	ApplicationName               *uint16
	NodeName                      *uint16
	HealthPolicy                  *innerFabricApplicationHealthPolicy
	EventsFilter                  *innerFabricHealthEventsFilter
	DeployedServicePackagesFilter *innerFabricDeployedServicePackageHealthStatesFilter
	Reserved                      unsafe.Pointer
}
type innerFabricDeployedApplicationHealthQueryDescriptionEx1 struct {
	HealthStatisticsFilter *innerFabricDeployedApplicationHealthStatisticsFilter
	Reserved               unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthQueryDescription) toGoStruct() (dst *FabricDeployedApplicationHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealthQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	dst.DeployedServicePackagesFilter = obj.DeployedServicePackagesFilter.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricDeployedApplicationHealthQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.HealthStatisticsFilter = ex1.HealthStatisticsFilter.toGoStruct()
	return
}

type FabricDeployedApplicationHealthStatisticsFilter struct {
	ExcludeHealthStatistics bool
}
type innerFabricDeployedApplicationHealthStatisticsFilter struct {
	FabricDeployedApplicationHealthStatisticsFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthStatisticsFilter) toGoStruct() *FabricDeployedApplicationHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricDeployedApplicationHealthStatisticsFilter
}
func (obj *FabricDeployedApplicationHealthStatisticsFilter) toInnerStruct() *innerFabricDeployedApplicationHealthStatisticsFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricDeployedApplicationHealthStatisticsFilter{*obj, nil}
}

type FabricDeployedServicePackageHealthQueryDescription struct {
	ApplicationName            string
	NodeName                   string
	ServiceManifestName        string
	HealthPolicy               *FabricApplicationHealthPolicy
	EventsFilter               *FabricHealthEventsFilter
	ServicePackageActivationId string
}

func (obj *FabricDeployedServicePackageHealthQueryDescription) toInnerStruct() *innerFabricDeployedServicePackageHealthQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealthQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.HealthPolicy = obj.HealthPolicy.toInnerStruct()
	dst.EventsFilter = obj.EventsFilter.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthQueryDescriptionEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageHealthQueryDescription struct {
	ApplicationName     *uint16
	NodeName            *uint16
	ServiceManifestName *uint16
	HealthPolicy        *innerFabricApplicationHealthPolicy
	EventsFilter        *innerFabricHealthEventsFilter
	Reserved            unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthQueryDescriptionEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthQueryDescription) toGoStruct() (dst *FabricDeployedServicePackageHealthQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealthQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.HealthPolicy = obj.HealthPolicy.toGoStruct()
	dst.EventsFilter = obj.EventsFilter.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthQueryDescriptionEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type FabricRepairScopeIdentifier struct {
	Kind  FabricRepairScopeIdentifierKind
	Value interface{}
}

func (obj *FabricRepairScopeIdentifier) toInnerStruct() *innerFabricRepairScopeIdentifier {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairScopeIdentifier{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricRepairScopeIdentifier struct {
	Kind  FabricRepairScopeIdentifierKind
	Value unsafe.Pointer
}

func (obj *innerFabricRepairScopeIdentifier) toGoStruct() (dst *FabricRepairScopeIdentifier) {
	if obj == nil {
		return
	}
	dst = &FabricRepairScopeIdentifier{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricRepairTargetDescription struct {
	Kind  FabricRepairTargetKind
	Value interface{}
}

func (obj *FabricRepairTargetDescription) toInnerStruct() *innerFabricRepairTargetDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairTargetDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricRepairTargetDescription struct {
	Kind  FabricRepairTargetKind
	Value unsafe.Pointer
}

func (obj *innerFabricRepairTargetDescription) toGoStruct() (dst *FabricRepairTargetDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairTargetDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricRepairNodeImpact struct {
	NodeName    string
	ImpactLevel FabricRepairNodeImpactLevel
}

func (obj *FabricRepairNodeImpact) toInnerStruct() *innerFabricRepairNodeImpact {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairNodeImpact{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.ImpactLevel = obj.ImpactLevel
	return dst
}

type innerFabricRepairNodeImpact struct {
	NodeName    *uint16
	ImpactLevel FabricRepairNodeImpactLevel
	Reserved    unsafe.Pointer
}

func (obj *innerFabricRepairNodeImpact) toGoStruct() (dst *FabricRepairNodeImpact) {
	if obj == nil {
		return
	}
	dst = &FabricRepairNodeImpact{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.ImpactLevel = obj.ImpactLevel
	return
}

type innerFabricRepairNodeImpactList struct {
	Count uint32
	Items *innerFabricRepairNodeImpact
}

func (obj *innerFabricRepairNodeImpactList) toGoStruct() []FabricRepairNodeImpact {
	var dst []FabricRepairNodeImpact
	{
		var innerlst []innerFabricRepairNodeImpact
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricRepairNodeImpact

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricRepairImpactDescription struct {
	Kind  FabricRepairImpactKind
	Value interface{}
}

func (obj *FabricRepairImpactDescription) toInnerStruct() *innerFabricRepairImpactDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairImpactDescription{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricRepairImpactDescription struct {
	Kind  FabricRepairImpactKind
	Value unsafe.Pointer
}

func (obj *innerFabricRepairImpactDescription) toGoStruct() (dst *FabricRepairImpactDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairImpactDescription{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricRepairResultDescription struct {
	ResultStatus  FabricRepairTaskResult
	ResultCode    FabricErrorCode
	ResultDetails string
}

func (obj *FabricRepairResultDescription) toInnerStruct() *innerFabricRepairResultDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairResultDescription{}
	dst.ResultStatus = obj.ResultStatus
	dst.ResultCode = obj.ResultCode
	dst.ResultDetails = utf16PtrFromString(obj.ResultDetails)
	return dst
}

type innerFabricRepairResultDescription struct {
	ResultStatus  FabricRepairTaskResult
	ResultCode    FabricErrorCode
	ResultDetails *uint16
	Reserved      unsafe.Pointer
}

func (obj *innerFabricRepairResultDescription) toGoStruct() (dst *FabricRepairResultDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairResultDescription{}
	dst.ResultStatus = obj.ResultStatus
	dst.ResultCode = obj.ResultCode
	dst.ResultDetails = utf16PtrToString(obj.ResultDetails)
	return
}

type FabricRepairTaskHistory struct {
	CreatedUtcTimestamp                   time.Time
	ClaimedUtcTimestamp                   time.Time
	PreparingUtcTimestamp                 time.Time
	ApprovedUtcTimestamp                  time.Time
	ExecutingUtcTimestamp                 time.Time
	RestoringUtcTimestamp                 time.Time
	CompletedUtcTimestamp                 time.Time
	PreparingHealthCheckStartUtcTimestamp time.Time
	PreparingHealthCheckEndUtcTimestamp   time.Time
	RestoringHealthCheckStartUtcTimestamp time.Time
	RestoringHealthCheckEndUtcTimestamp   time.Time
}

func (obj *FabricRepairTaskHistory) toInnerStruct() *innerFabricRepairTaskHistory {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairTaskHistory{}
	dst.CreatedUtcTimestamp = timeToFiletime(obj.CreatedUtcTimestamp)
	dst.ClaimedUtcTimestamp = timeToFiletime(obj.ClaimedUtcTimestamp)
	dst.PreparingUtcTimestamp = timeToFiletime(obj.PreparingUtcTimestamp)
	dst.ApprovedUtcTimestamp = timeToFiletime(obj.ApprovedUtcTimestamp)
	dst.ExecutingUtcTimestamp = timeToFiletime(obj.ExecutingUtcTimestamp)
	dst.RestoringUtcTimestamp = timeToFiletime(obj.RestoringUtcTimestamp)
	dst.CompletedUtcTimestamp = timeToFiletime(obj.CompletedUtcTimestamp)
	ex0 := dst
	ex1 := &innerFabricRepairTaskHistoryEx1{}
	ex1.PreparingHealthCheckStartUtcTimestamp = timeToFiletime(obj.PreparingHealthCheckStartUtcTimestamp)
	ex1.PreparingHealthCheckEndUtcTimestamp = timeToFiletime(obj.PreparingHealthCheckEndUtcTimestamp)
	ex1.RestoringHealthCheckStartUtcTimestamp = timeToFiletime(obj.RestoringHealthCheckStartUtcTimestamp)
	ex1.RestoringHealthCheckEndUtcTimestamp = timeToFiletime(obj.RestoringHealthCheckEndUtcTimestamp)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricRepairTaskHistory struct {
	CreatedUtcTimestamp   filetime
	ClaimedUtcTimestamp   filetime
	PreparingUtcTimestamp filetime
	ApprovedUtcTimestamp  filetime
	ExecutingUtcTimestamp filetime
	RestoringUtcTimestamp filetime
	CompletedUtcTimestamp filetime
	Reserved              unsafe.Pointer
}
type innerFabricRepairTaskHistoryEx1 struct {
	PreparingHealthCheckStartUtcTimestamp filetime
	PreparingHealthCheckEndUtcTimestamp   filetime
	RestoringHealthCheckStartUtcTimestamp filetime
	RestoringHealthCheckEndUtcTimestamp   filetime
	Reserved                              unsafe.Pointer
}

func (obj *innerFabricRepairTaskHistory) toGoStruct() (dst *FabricRepairTaskHistory) {
	if obj == nil {
		return
	}
	dst = &FabricRepairTaskHistory{}
	dst.CreatedUtcTimestamp = obj.CreatedUtcTimestamp.ToTime()
	dst.ClaimedUtcTimestamp = obj.ClaimedUtcTimestamp.ToTime()
	dst.PreparingUtcTimestamp = obj.PreparingUtcTimestamp.ToTime()
	dst.ApprovedUtcTimestamp = obj.ApprovedUtcTimestamp.ToTime()
	dst.ExecutingUtcTimestamp = obj.ExecutingUtcTimestamp.ToTime()
	dst.RestoringUtcTimestamp = obj.RestoringUtcTimestamp.ToTime()
	dst.CompletedUtcTimestamp = obj.CompletedUtcTimestamp.ToTime()
	ex0 := obj
	ex1 := (*innerFabricRepairTaskHistoryEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.PreparingHealthCheckStartUtcTimestamp = ex1.PreparingHealthCheckStartUtcTimestamp.ToTime()
	dst.PreparingHealthCheckEndUtcTimestamp = ex1.PreparingHealthCheckEndUtcTimestamp.ToTime()
	dst.RestoringHealthCheckStartUtcTimestamp = ex1.RestoringHealthCheckStartUtcTimestamp.ToTime()
	dst.RestoringHealthCheckEndUtcTimestamp = ex1.RestoringHealthCheckEndUtcTimestamp.ToTime()
	return
}

type FabricRepairExecutorState struct {
	Executor     string
	ExecutorData string
}

func (obj *FabricRepairExecutorState) toInnerStruct() *innerFabricRepairExecutorState {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairExecutorState{}
	dst.Executor = utf16PtrFromString(obj.Executor)
	dst.ExecutorData = utf16PtrFromString(obj.ExecutorData)
	return dst
}

type innerFabricRepairExecutorState struct {
	Executor     *uint16
	ExecutorData *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricRepairExecutorState) toGoStruct() (dst *FabricRepairExecutorState) {
	if obj == nil {
		return
	}
	dst = &FabricRepairExecutorState{}
	dst.Executor = utf16PtrToString(obj.Executor)
	dst.ExecutorData = utf16PtrToString(obj.ExecutorData)
	return
}

type FabricRepairTaskHealthPolicyUpdateDescription struct {
	Scope                       *FabricRepairScopeIdentifier
	RepairTaskId                string
	Version                     int64
	Flags                       uint32
	PerformPreparingHealthCheck bool
	PerformRestoringHealthCheck bool
}

func (obj *FabricRepairTaskHealthPolicyUpdateDescription) toInnerStruct() *innerFabricRepairTaskHealthPolicyUpdateDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairTaskHealthPolicyUpdateDescription{}
	dst.Scope = obj.Scope.toInnerStruct()
	dst.RepairTaskId = utf16PtrFromString(obj.RepairTaskId)
	dst.Version = obj.Version
	dst.Flags = obj.Flags
	dst.PerformPreparingHealthCheck = obj.PerformPreparingHealthCheck
	dst.PerformRestoringHealthCheck = obj.PerformRestoringHealthCheck
	return dst
}

type innerFabricRepairTaskHealthPolicyUpdateDescription struct {
	Scope                       *innerFabricRepairScopeIdentifier
	RepairTaskId                *uint16
	Version                     int64
	Flags                       uint32
	PerformPreparingHealthCheck bool
	PerformRestoringHealthCheck bool
	Reserved                    unsafe.Pointer
}

func (obj *innerFabricRepairTaskHealthPolicyUpdateDescription) toGoStruct() (dst *FabricRepairTaskHealthPolicyUpdateDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairTaskHealthPolicyUpdateDescription{}
	dst.Scope = obj.Scope.toGoStruct()
	dst.RepairTaskId = utf16PtrToString(obj.RepairTaskId)
	dst.Version = obj.Version
	dst.Flags = obj.Flags
	dst.PerformPreparingHealthCheck = obj.PerformPreparingHealthCheck
	dst.PerformRestoringHealthCheck = obj.PerformRestoringHealthCheck
	return
}

type FabricRepairTask struct {
	Scope                       *FabricRepairScopeIdentifier
	TaskId                      string
	Version                     int64
	Description                 string
	State                       FabricRepairTaskState
	Flags                       uint32
	Action                      string
	Target                      *FabricRepairTargetDescription
	ExecutorState               *FabricRepairExecutorState
	Impact                      *FabricRepairImpactDescription
	Result                      *FabricRepairResultDescription
	History                     *FabricRepairTaskHistory
	PerformPreparingHealthCheck bool
	PerformRestoringHealthCheck bool
	PreparingHealthCheckState   FabricRepairTaskHealthCheckState
	RestoringHealthCheckState   FabricRepairTaskHealthCheckState
}

func (obj *FabricRepairTask) toInnerStruct() *innerFabricRepairTask {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairTask{}
	dst.Scope = obj.Scope.toInnerStruct()
	dst.TaskId = utf16PtrFromString(obj.TaskId)
	dst.Version = obj.Version
	dst.Description = utf16PtrFromString(obj.Description)
	dst.State = obj.State
	dst.Flags = obj.Flags
	dst.Action = utf16PtrFromString(obj.Action)
	dst.Target = obj.Target.toInnerStruct()
	dst.ExecutorState = obj.ExecutorState.toInnerStruct()
	dst.Impact = obj.Impact.toInnerStruct()
	dst.Result = obj.Result.toInnerStruct()
	dst.History = obj.History.toInnerStruct()
	ex0 := dst
	ex1 := &innerFabricRepairTaskEx1{}
	ex1.PerformPreparingHealthCheck = obj.PerformPreparingHealthCheck
	ex1.PerformRestoringHealthCheck = obj.PerformRestoringHealthCheck
	ex1.PreparingHealthCheckState = obj.PreparingHealthCheckState
	ex1.RestoringHealthCheckState = obj.RestoringHealthCheckState
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricRepairTask struct {
	Scope         *innerFabricRepairScopeIdentifier
	TaskId        *uint16
	Version       int64
	Description   *uint16
	State         FabricRepairTaskState
	Flags         uint32
	Action        *uint16
	Target        *innerFabricRepairTargetDescription
	ExecutorState *innerFabricRepairExecutorState
	Impact        *innerFabricRepairImpactDescription
	Result        *innerFabricRepairResultDescription
	History       *innerFabricRepairTaskHistory
	Reserved      unsafe.Pointer
}
type innerFabricRepairTaskEx1 struct {
	PerformPreparingHealthCheck bool
	PerformRestoringHealthCheck bool
	PreparingHealthCheckState   FabricRepairTaskHealthCheckState
	RestoringHealthCheckState   FabricRepairTaskHealthCheckState
	Reserved                    unsafe.Pointer
}

func (obj *innerFabricRepairTask) toGoStruct() (dst *FabricRepairTask) {
	if obj == nil {
		return
	}
	dst = &FabricRepairTask{}
	dst.Scope = obj.Scope.toGoStruct()
	dst.TaskId = utf16PtrToString(obj.TaskId)
	dst.Version = obj.Version
	dst.Description = utf16PtrToString(obj.Description)
	dst.State = obj.State
	dst.Flags = obj.Flags
	dst.Action = utf16PtrToString(obj.Action)
	dst.Target = obj.Target.toGoStruct()
	dst.ExecutorState = obj.ExecutorState.toGoStruct()
	dst.Impact = obj.Impact.toGoStruct()
	dst.Result = obj.Result.toGoStruct()
	dst.History = obj.History.toGoStruct()
	ex0 := obj
	ex1 := (*innerFabricRepairTaskEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.PerformPreparingHealthCheck = ex1.PerformPreparingHealthCheck
	dst.PerformRestoringHealthCheck = ex1.PerformRestoringHealthCheck
	dst.PreparingHealthCheckState = ex1.PreparingHealthCheckState
	dst.RestoringHealthCheckState = ex1.RestoringHealthCheckState
	return
}

type innerFabricRepairTaskList struct {
	Count uint32
	Items *innerFabricRepairTask
}

func (obj *innerFabricRepairTaskList) toGoStruct() []FabricRepairTask {
	var dst []FabricRepairTask
	{
		var innerlst []innerFabricRepairTask
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricRepairTask

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricRepairCancelDescription struct {
	Scope        *FabricRepairScopeIdentifier
	RepairTaskId string
	Version      int64
	RequestAbort bool
}

func (obj *FabricRepairCancelDescription) toInnerStruct() *innerFabricRepairCancelDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairCancelDescription{}
	dst.Scope = obj.Scope.toInnerStruct()
	dst.RepairTaskId = utf16PtrFromString(obj.RepairTaskId)
	dst.Version = obj.Version
	dst.RequestAbort = obj.RequestAbort
	return dst
}

type innerFabricRepairCancelDescription struct {
	Scope        *innerFabricRepairScopeIdentifier
	RepairTaskId *uint16
	Version      int64
	RequestAbort bool
	Reserved     unsafe.Pointer
}

func (obj *innerFabricRepairCancelDescription) toGoStruct() (dst *FabricRepairCancelDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairCancelDescription{}
	dst.Scope = obj.Scope.toGoStruct()
	dst.RepairTaskId = utf16PtrToString(obj.RepairTaskId)
	dst.Version = obj.Version
	dst.RequestAbort = obj.RequestAbort
	return
}

type FabricRepairDeleteDescription struct {
	Scope        *FabricRepairScopeIdentifier
	RepairTaskId string
	Version      int64
}

func (obj *FabricRepairDeleteDescription) toInnerStruct() *innerFabricRepairDeleteDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairDeleteDescription{}
	dst.Scope = obj.Scope.toInnerStruct()
	dst.RepairTaskId = utf16PtrFromString(obj.RepairTaskId)
	dst.Version = obj.Version
	return dst
}

type innerFabricRepairDeleteDescription struct {
	Scope        *innerFabricRepairScopeIdentifier
	RepairTaskId *uint16
	Version      int64
	Reserved     unsafe.Pointer
}

func (obj *innerFabricRepairDeleteDescription) toGoStruct() (dst *FabricRepairDeleteDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairDeleteDescription{}
	dst.Scope = obj.Scope.toGoStruct()
	dst.RepairTaskId = utf16PtrToString(obj.RepairTaskId)
	dst.Version = obj.Version
	return
}

type FabricRepairApproveDescription struct {
	Scope        *FabricRepairScopeIdentifier
	RepairTaskId string
	Version      int64
}

func (obj *FabricRepairApproveDescription) toInnerStruct() *innerFabricRepairApproveDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairApproveDescription{}
	dst.Scope = obj.Scope.toInnerStruct()
	dst.RepairTaskId = utf16PtrFromString(obj.RepairTaskId)
	dst.Version = obj.Version
	return dst
}

type innerFabricRepairApproveDescription struct {
	Scope        *innerFabricRepairScopeIdentifier
	RepairTaskId *uint16
	Version      int64
	Reserved     unsafe.Pointer
}

func (obj *innerFabricRepairApproveDescription) toGoStruct() (dst *FabricRepairApproveDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairApproveDescription{}
	dst.Scope = obj.Scope.toGoStruct()
	dst.RepairTaskId = utf16PtrToString(obj.RepairTaskId)
	dst.Version = obj.Version
	return
}

type FabricRepairTaskQueryDescription struct {
	Scope          *FabricRepairScopeIdentifier
	TaskIdFilter   string
	StateFilter    uint32
	ExecutorFilter string
}

func (obj *FabricRepairTaskQueryDescription) toInnerStruct() *innerFabricRepairTaskQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricRepairTaskQueryDescription{}
	dst.Scope = obj.Scope.toInnerStruct()
	dst.TaskIdFilter = utf16PtrFromString(obj.TaskIdFilter)
	dst.StateFilter = obj.StateFilter
	dst.ExecutorFilter = utf16PtrFromString(obj.ExecutorFilter)
	return dst
}

type innerFabricRepairTaskQueryDescription struct {
	Scope          *innerFabricRepairScopeIdentifier
	TaskIdFilter   *uint16
	StateFilter    uint32
	ExecutorFilter *uint16
	Reserved       unsafe.Pointer
}

func (obj *innerFabricRepairTaskQueryDescription) toGoStruct() (dst *FabricRepairTaskQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricRepairTaskQueryDescription{}
	dst.Scope = obj.Scope.toGoStruct()
	dst.TaskIdFilter = utf16PtrToString(obj.TaskIdFilter)
	dst.StateFilter = obj.StateFilter
	dst.ExecutorFilter = utf16PtrToString(obj.ExecutorFilter)
	return
}

type FabricStoreBackupOption int32

const (
	FabricStoreBackupOptionFull             FabricStoreBackupOption = 0x0001
	FabricStoreBackupOptionIncremental      FabricStoreBackupOption = 0x0002
	FabricStoreBackupOptionTruncateLogsOnly FabricStoreBackupOption = 0x0003
)

type FabricStoreBackupInfo struct {
	BackupFolder  string
	BackupOption  FabricStoreBackupOption
	BackupChainId uuid.UUID
	BackupIndex   uint32
}

func (obj *FabricStoreBackupInfo) toInnerStruct() *innerFabricStoreBackupInfo {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStoreBackupInfo{}
	dst.BackupFolder = utf16PtrFromString(obj.BackupFolder)
	dst.BackupOption = obj.BackupOption
	ex0 := dst
	ex1 := &innerFabricStoreBackupInfoEx1{}
	ex1.BackupChainId = obj.BackupChainId
	ex1.BackupIndex = obj.BackupIndex
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricStoreBackupInfo struct {
	BackupFolder *uint16
	BackupOption FabricStoreBackupOption
	Reserved     unsafe.Pointer
}
type innerFabricStoreBackupInfoEx1 struct {
	BackupChainId uuid.UUID
	BackupIndex   uint32
	Reserved      unsafe.Pointer
}

func (obj *innerFabricStoreBackupInfo) toGoStruct() (dst *FabricStoreBackupInfo) {
	if obj == nil {
		return
	}
	dst = &FabricStoreBackupInfo{}
	dst.BackupFolder = utf16PtrToString(obj.BackupFolder)
	dst.BackupOption = obj.BackupOption
	ex0 := obj
	ex1 := (*innerFabricStoreBackupInfoEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.BackupChainId = ex1.BackupChainId
	dst.BackupIndex = ex1.BackupIndex
	return
}

type FabricDeltaNodesCheckHealthEvaluation struct {
	Description                   string
	AggregatedHealthState         FabricHealthState
	BaselineErrorCount            uint32
	BaselineTotalCount            uint32
	TotalCount                    uint32
	MaxPercentDeltaUnhealthyNodes byte
	UnhealthyEvaluations          []FabricHealthEvaluation
}

func (obj *FabricDeltaNodesCheckHealthEvaluation) toInnerStruct() *innerFabricDeltaNodesCheckHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeltaNodesCheckHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.BaselineErrorCount = obj.BaselineErrorCount
	dst.BaselineTotalCount = obj.BaselineTotalCount
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentDeltaUnhealthyNodes = obj.MaxPercentDeltaUnhealthyNodes
	lst_107 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_107.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_107.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_107
	return dst
}

type innerFabricDeltaNodesCheckHealthEvaluation struct {
	Description                   *uint16
	AggregatedHealthState         FabricHealthState
	BaselineErrorCount            uint32
	BaselineTotalCount            uint32
	TotalCount                    uint32
	MaxPercentDeltaUnhealthyNodes byte
	UnhealthyEvaluations          *innerFabricHealthEvaluationList
	Reserved                      unsafe.Pointer
}

func (obj *innerFabricDeltaNodesCheckHealthEvaluation) toGoStruct() (dst *FabricDeltaNodesCheckHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricDeltaNodesCheckHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.BaselineErrorCount = obj.BaselineErrorCount
	dst.BaselineTotalCount = obj.BaselineTotalCount
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentDeltaUnhealthyNodes = obj.MaxPercentDeltaUnhealthyNodes
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricUpgradeDomainDeltaNodesCheckHealthEvaluation struct {
	Description                                string
	AggregatedHealthState                      FabricHealthState
	UpgradeDomainName                          string
	BaselineErrorCount                         uint32
	BaselineTotalCount                         uint32
	TotalCount                                 uint32
	MaxPercentUpgradeDomainDeltaUnhealthyNodes byte
	UnhealthyEvaluations                       []FabricHealthEvaluation
}

func (obj *FabricUpgradeDomainDeltaNodesCheckHealthEvaluation) toInnerStruct() *innerFabricUpgradeDomainDeltaNodesCheckHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricUpgradeDomainDeltaNodesCheckHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UpgradeDomainName = utf16PtrFromString(obj.UpgradeDomainName)
	dst.BaselineErrorCount = obj.BaselineErrorCount
	dst.BaselineTotalCount = obj.BaselineTotalCount
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUpgradeDomainDeltaUnhealthyNodes = obj.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	lst_108 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_108.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_108.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_108
	return dst
}

type innerFabricUpgradeDomainDeltaNodesCheckHealthEvaluation struct {
	Description                                *uint16
	AggregatedHealthState                      FabricHealthState
	UpgradeDomainName                          *uint16
	BaselineErrorCount                         uint32
	BaselineTotalCount                         uint32
	TotalCount                                 uint32
	MaxPercentUpgradeDomainDeltaUnhealthyNodes byte
	UnhealthyEvaluations                       *innerFabricHealthEvaluationList
	Reserved                                   unsafe.Pointer
}

func (obj *innerFabricUpgradeDomainDeltaNodesCheckHealthEvaluation) toGoStruct() (dst *FabricUpgradeDomainDeltaNodesCheckHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricUpgradeDomainDeltaNodesCheckHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.UpgradeDomainName = utf16PtrToString(obj.UpgradeDomainName)
	dst.BaselineErrorCount = obj.BaselineErrorCount
	dst.BaselineTotalCount = obj.BaselineTotalCount
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUpgradeDomainDeltaUnhealthyNodes = obj.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	return
}

type FabricPagingStatus struct {
	ContinuationToken string
}

func (obj *FabricPagingStatus) toInnerStruct() *innerFabricPagingStatus {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPagingStatus{}
	dst.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	return dst
}

type innerFabricPagingStatus struct {
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricPagingStatus) toGoStruct() (dst *FabricPagingStatus) {
	if obj == nil {
		return
	}
	dst = &FabricPagingStatus{}
	dst.ContinuationToken = utf16PtrToString(obj.ContinuationToken)
	return
}

type FabricApplicationTypeHealthPolicyMapItem struct {
	ApplicationTypeName             string
	MaxPercentUnhealthyApplications byte
}

func (obj *FabricApplicationTypeHealthPolicyMapItem) toInnerStruct() *innerFabricApplicationTypeHealthPolicyMapItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationTypeHealthPolicyMapItem{}
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	return dst
}

type innerFabricApplicationTypeHealthPolicyMapItem struct {
	ApplicationTypeName             *uint16
	MaxPercentUnhealthyApplications byte
}

func (obj *innerFabricApplicationTypeHealthPolicyMapItem) toGoStruct() (dst *FabricApplicationTypeHealthPolicyMapItem) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationTypeHealthPolicyMapItem{}
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	return
}

type innerFabricApplicationTypeHealthPolicyMap struct {
	Count uint32
	Items *innerFabricApplicationTypeHealthPolicyMapItem
}

func (obj *innerFabricApplicationTypeHealthPolicyMap) toGoStruct() map[string]byte {
	var dst = make(map[string]byte)
	{
		var mapvar = make(map[string]byte)

		var innerlst []innerFabricApplicationTypeHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, kv := range innerlst {
			var k string
			var v byte

			k = utf16PtrToString(kv.ApplicationTypeName)
			v = kv.MaxPercentUnhealthyApplications
			mapvar[k] = v

		}

		dst = mapvar
	}
	return dst
}

type FabricApplicationTypeApplicationsHealthEvaluation struct {
	Description                     string
	AggregatedHealthState           FabricHealthState
	ApplicationTypeName             string
	UnhealthyEvaluations            []FabricHealthEvaluation
	TotalCount                      uint32
	MaxPercentUnhealthyApplications byte
}

func (obj *FabricApplicationTypeApplicationsHealthEvaluation) toInnerStruct() *innerFabricApplicationTypeApplicationsHealthEvaluation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationTypeApplicationsHealthEvaluation{}
	dst.Description = utf16PtrFromString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	lst_110 := &innerFabricHealthEvaluationList{}
	{

		var tmp []innerFabricHealthEvaluation

		for _, item := range obj.UnhealthyEvaluations {
			var tmpitem innerFabricHealthEvaluation

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_110.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_110.Items = &tmp[0]
		}

	}
	dst.UnhealthyEvaluations = lst_110
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	return dst
}

type innerFabricApplicationTypeApplicationsHealthEvaluation struct {
	Description                     *uint16
	AggregatedHealthState           FabricHealthState
	ApplicationTypeName             *uint16
	UnhealthyEvaluations            *innerFabricHealthEvaluationList
	TotalCount                      uint32
	MaxPercentUnhealthyApplications byte
	Reserved                        unsafe.Pointer
}

func (obj *innerFabricApplicationTypeApplicationsHealthEvaluation) toGoStruct() (dst *FabricApplicationTypeApplicationsHealthEvaluation) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationTypeApplicationsHealthEvaluation{}
	dst.Description = utf16PtrToString(obj.Description)
	dst.AggregatedHealthState = obj.AggregatedHealthState
	dst.ApplicationTypeName = utf16PtrToString(obj.ApplicationTypeName)
	{
		var innerlst []innerFabricHealthEvaluation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.UnhealthyEvaluations.Items), int(obj.UnhealthyEvaluations.Count))

		for _, item := range innerlst {
			var tmpitem FabricHealthEvaluation

			tmpitem = *item.toGoStruct()

			dst.UnhealthyEvaluations = append(dst.UnhealthyEvaluations, tmpitem)
		}

	}
	dst.TotalCount = obj.TotalCount
	dst.MaxPercentUnhealthyApplications = obj.MaxPercentUnhealthyApplications
	return
}

type FabricNodeHealthStateFilter struct {
	HealthStateFilter uint32
	NodeNameFilter    string
}

func (obj *FabricNodeHealthStateFilter) toInnerStruct() *innerFabricNodeHealthStateFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.NodeNameFilter = utf16PtrFromString(obj.NodeNameFilter)
	return dst
}

type innerFabricNodeHealthStateFilter struct {
	HealthStateFilter uint32
	NodeNameFilter    *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricNodeHealthStateFilter) toGoStruct() (dst *FabricNodeHealthStateFilter) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.NodeNameFilter = utf16PtrToString(obj.NodeNameFilter)
	return
}

type innerFabricNodeHealthStateFilterList struct {
	Count uint32
	Items *innerFabricNodeHealthStateFilter
}

func (obj *innerFabricNodeHealthStateFilterList) toGoStruct() []FabricNodeHealthStateFilter {
	var dst []FabricNodeHealthStateFilter
	{
		var innerlst []innerFabricNodeHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServicePackageHealthStateFilter struct {
	HealthStateFilter                uint32
	ServiceManifestNameFilter        string
	ServicePackageActivationIdFilter string
}

func (obj *FabricDeployedServicePackageHealthStateFilter) toInnerStruct() *innerFabricDeployedServicePackageHealthStateFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.ServiceManifestNameFilter = utf16PtrFromString(obj.ServiceManifestNameFilter)
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthStateFilterEx1{}
	ex1.ServicePackageActivationIdFilter = utf16PtrFromString(obj.ServicePackageActivationIdFilter)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageHealthStateFilter struct {
	HealthStateFilter         uint32
	ServiceManifestNameFilter *uint16
	Reserved                  unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthStateFilterEx1 struct {
	ServicePackageActivationIdFilter *uint16
	Reserved                         unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthStateFilter) toGoStruct() (dst *FabricDeployedServicePackageHealthStateFilter) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.ServiceManifestNameFilter = utf16PtrToString(obj.ServiceManifestNameFilter)
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthStateFilterEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationIdFilter = utf16PtrToString(ex1.ServicePackageActivationIdFilter)
	return
}

type innerFabricDeployedServicePackageHealthStateFilterList struct {
	Count uint32
	Items *innerFabricDeployedServicePackageHealthStateFilter
}

func (obj *innerFabricDeployedServicePackageHealthStateFilterList) toGoStruct() []FabricDeployedServicePackageHealthStateFilter {
	var dst []FabricDeployedServicePackageHealthStateFilter
	{
		var innerlst []innerFabricDeployedServicePackageHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedApplicationHealthStateFilter struct {
	HealthStateFilter             uint32
	NodeNameFilter                string
	DeployedServicePackageFilters []FabricDeployedServicePackageHealthStateFilter
}

func (obj *FabricDeployedApplicationHealthStateFilter) toInnerStruct() *innerFabricDeployedApplicationHealthStateFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.NodeNameFilter = utf16PtrFromString(obj.NodeNameFilter)
	lst_111 := &innerFabricDeployedServicePackageHealthStateFilterList{}
	{

		var tmp []innerFabricDeployedServicePackageHealthStateFilter

		for _, item := range obj.DeployedServicePackageFilters {
			var tmpitem innerFabricDeployedServicePackageHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_111.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_111.Items = &tmp[0]
		}

	}
	dst.DeployedServicePackageFilters = lst_111
	return dst
}

type innerFabricDeployedApplicationHealthStateFilter struct {
	HealthStateFilter             uint32
	NodeNameFilter                *uint16
	DeployedServicePackageFilters *innerFabricDeployedServicePackageHealthStateFilterList
	Reserved                      unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthStateFilter) toGoStruct() (dst *FabricDeployedApplicationHealthStateFilter) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.NodeNameFilter = utf16PtrToString(obj.NodeNameFilter)
	{
		var innerlst []innerFabricDeployedServicePackageHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DeployedServicePackageFilters.Items), int(obj.DeployedServicePackageFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.DeployedServicePackageFilters = append(dst.DeployedServicePackageFilters, tmpitem)
		}

	}
	return
}

type innerFabricDeployedApplicationHealthStateFilterList struct {
	Count uint32
	Items *innerFabricDeployedApplicationHealthStateFilter
}

func (obj *innerFabricDeployedApplicationHealthStateFilterList) toGoStruct() []FabricDeployedApplicationHealthStateFilter {
	var dst []FabricDeployedApplicationHealthStateFilter
	{
		var innerlst []innerFabricDeployedApplicationHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricReplicaHealthStateFilter struct {
	HealthStateFilter         uint32
	ReplicaOrInstanceIdFilter int64
}
type innerFabricReplicaHealthStateFilter struct {
	FabricReplicaHealthStateFilter
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaHealthStateFilter) toGoStruct() *FabricReplicaHealthStateFilter {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicaHealthStateFilter
}
func (obj *FabricReplicaHealthStateFilter) toInnerStruct() *innerFabricReplicaHealthStateFilter {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicaHealthStateFilter{*obj, nil}
}

type innerFabricReplicaHealthStateFilterList struct {
	Count uint32
	Items *innerFabricReplicaHealthStateFilter
}

func (obj *innerFabricReplicaHealthStateFilterList) toGoStruct() []FabricReplicaHealthStateFilter {
	var dst []FabricReplicaHealthStateFilter
	{
		var innerlst []innerFabricReplicaHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricReplicaHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricPartitionHealthStateFilter struct {
	HealthStateFilter uint32
	PartitionIdFilter uuid.UUID
	ReplicaFilters    []FabricReplicaHealthStateFilter
}

func (obj *FabricPartitionHealthStateFilter) toInnerStruct() *innerFabricPartitionHealthStateFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.PartitionIdFilter = obj.PartitionIdFilter
	lst_112 := &innerFabricReplicaHealthStateFilterList{}
	{

		var tmp []innerFabricReplicaHealthStateFilter

		for _, item := range obj.ReplicaFilters {
			var tmpitem innerFabricReplicaHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_112.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_112.Items = &tmp[0]
		}

	}
	dst.ReplicaFilters = lst_112
	return dst
}

type innerFabricPartitionHealthStateFilter struct {
	HealthStateFilter uint32
	PartitionIdFilter uuid.UUID
	ReplicaFilters    *innerFabricReplicaHealthStateFilterList
	Reserved          unsafe.Pointer
}

func (obj *innerFabricPartitionHealthStateFilter) toGoStruct() (dst *FabricPartitionHealthStateFilter) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.PartitionIdFilter = obj.PartitionIdFilter
	{
		var innerlst []innerFabricReplicaHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ReplicaFilters.Items), int(obj.ReplicaFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricReplicaHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.ReplicaFilters = append(dst.ReplicaFilters, tmpitem)
		}

	}
	return
}

type innerFabricPartitionHealthStateFilterList struct {
	Count uint32
	Items *innerFabricPartitionHealthStateFilter
}

func (obj *innerFabricPartitionHealthStateFilterList) toGoStruct() []FabricPartitionHealthStateFilter {
	var dst []FabricPartitionHealthStateFilter
	{
		var innerlst []innerFabricPartitionHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricPartitionHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceHealthStateFilter struct {
	HealthStateFilter uint32
	ServiceNameFilter string
	PartitionFilters  []FabricPartitionHealthStateFilter
}

func (obj *FabricServiceHealthStateFilter) toInnerStruct() *innerFabricServiceHealthStateFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.ServiceNameFilter = utf16PtrFromString(obj.ServiceNameFilter)
	lst_113 := &innerFabricPartitionHealthStateFilterList{}
	{

		var tmp []innerFabricPartitionHealthStateFilter

		for _, item := range obj.PartitionFilters {
			var tmpitem innerFabricPartitionHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_113.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_113.Items = &tmp[0]
		}

	}
	dst.PartitionFilters = lst_113
	return dst
}

type innerFabricServiceHealthStateFilter struct {
	HealthStateFilter uint32
	ServiceNameFilter *uint16
	PartitionFilters  *innerFabricPartitionHealthStateFilterList
	Reserved          unsafe.Pointer
}

func (obj *innerFabricServiceHealthStateFilter) toGoStruct() (dst *FabricServiceHealthStateFilter) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.ServiceNameFilter = utf16PtrToString(obj.ServiceNameFilter)
	{
		var innerlst []innerFabricPartitionHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.PartitionFilters.Items), int(obj.PartitionFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricPartitionHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.PartitionFilters = append(dst.PartitionFilters, tmpitem)
		}

	}
	return
}

type innerFabricServiceHealthStateFilterList struct {
	Count uint32
	Items *innerFabricServiceHealthStateFilter
}

func (obj *innerFabricServiceHealthStateFilterList) toGoStruct() []FabricServiceHealthStateFilter {
	var dst []FabricServiceHealthStateFilter
	{
		var innerlst []innerFabricServiceHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationHealthStateFilter struct {
	HealthStateFilter          uint32
	ApplicationNameFilter      string
	ServiceFilters             []FabricServiceHealthStateFilter
	DeployedApplicationFilters []FabricDeployedApplicationHealthStateFilter
	ApplicationTypeNameFilter  string
}

func (obj *FabricApplicationHealthStateFilter) toInnerStruct() *innerFabricApplicationHealthStateFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.ApplicationNameFilter = utf16PtrFromString(obj.ApplicationNameFilter)
	lst_114 := &innerFabricServiceHealthStateFilterList{}
	{

		var tmp []innerFabricServiceHealthStateFilter

		for _, item := range obj.ServiceFilters {
			var tmpitem innerFabricServiceHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_114.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_114.Items = &tmp[0]
		}

	}
	dst.ServiceFilters = lst_114
	lst_115 := &innerFabricDeployedApplicationHealthStateFilterList{}
	{

		var tmp []innerFabricDeployedApplicationHealthStateFilter

		for _, item := range obj.DeployedApplicationFilters {
			var tmpitem innerFabricDeployedApplicationHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_115.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_115.Items = &tmp[0]
		}

	}
	dst.DeployedApplicationFilters = lst_115
	ex0 := dst
	ex1 := &innerFabricApplicationHealthStateFilterEx1{}
	ex1.ApplicationTypeNameFilter = utf16PtrFromString(obj.ApplicationTypeNameFilter)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricApplicationHealthStateFilter struct {
	HealthStateFilter          uint32
	ApplicationNameFilter      *uint16
	ServiceFilters             *innerFabricServiceHealthStateFilterList
	DeployedApplicationFilters *innerFabricDeployedApplicationHealthStateFilterList
	Reserved                   unsafe.Pointer
}
type innerFabricApplicationHealthStateFilterEx1 struct {
	ApplicationTypeNameFilter *uint16
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricApplicationHealthStateFilter) toGoStruct() (dst *FabricApplicationHealthStateFilter) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthStateFilter{}
	dst.HealthStateFilter = obj.HealthStateFilter
	dst.ApplicationNameFilter = utf16PtrToString(obj.ApplicationNameFilter)
	{
		var innerlst []innerFabricServiceHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ServiceFilters.Items), int(obj.ServiceFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.ServiceFilters = append(dst.ServiceFilters, tmpitem)
		}

	}
	{
		var innerlst []innerFabricDeployedApplicationHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DeployedApplicationFilters.Items), int(obj.DeployedApplicationFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.DeployedApplicationFilters = append(dst.DeployedApplicationFilters, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricApplicationHealthStateFilterEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ApplicationTypeNameFilter = utf16PtrToString(ex1.ApplicationTypeNameFilter)
	return
}

type innerFabricApplicationHealthStateFilterList struct {
	Count uint32
	Items *innerFabricApplicationHealthStateFilter
}

func (obj *innerFabricApplicationHealthStateFilterList) toGoStruct() []FabricApplicationHealthStateFilter {
	var dst []FabricApplicationHealthStateFilter
	{
		var innerlst []innerFabricApplicationHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricClusterHealthChunkQueryDescription struct {
	ClusterHealthPolicy        *FabricClusterHealthPolicy
	ApplicationHealthPolicyMap map[string]FabricApplicationHealthPolicy
	ApplicationFilters         []FabricApplicationHealthStateFilter
	NodeFilters                []FabricNodeHealthStateFilter
}

func (obj *FabricClusterHealthChunkQueryDescription) toInnerStruct() *innerFabricClusterHealthChunkQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterHealthChunkQueryDescription{}
	dst.ClusterHealthPolicy = obj.ClusterHealthPolicy.toInnerStruct()
	{
		mapobj := &innerFabricApplicationHealthPolicyMap{}

		var tmp []innerFabricApplicationHealthPolicyMapItem

		for k, v := range obj.ApplicationHealthPolicyMap {
			kv := innerFabricApplicationHealthPolicyMapItem{}

			kv.ApplicationName = utf16PtrFromString(k)
			kv.HealthPolicy = v.toInnerStruct()

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		dst.ApplicationHealthPolicyMap = mapobj
	}
	lst_117 := &innerFabricApplicationHealthStateFilterList{}
	{

		var tmp []innerFabricApplicationHealthStateFilter

		for _, item := range obj.ApplicationFilters {
			var tmpitem innerFabricApplicationHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_117.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_117.Items = &tmp[0]
		}

	}
	dst.ApplicationFilters = lst_117
	lst_118 := &innerFabricNodeHealthStateFilterList{}
	{

		var tmp []innerFabricNodeHealthStateFilter

		for _, item := range obj.NodeFilters {
			var tmpitem innerFabricNodeHealthStateFilter

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_118.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_118.Items = &tmp[0]
		}

	}
	dst.NodeFilters = lst_118
	return dst
}

type innerFabricClusterHealthChunkQueryDescription struct {
	ClusterHealthPolicy        *innerFabricClusterHealthPolicy
	ApplicationHealthPolicyMap *innerFabricApplicationHealthPolicyMap
	ApplicationFilters         *innerFabricApplicationHealthStateFilterList
	NodeFilters                *innerFabricNodeHealthStateFilterList
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricClusterHealthChunkQueryDescription) toGoStruct() (dst *FabricClusterHealthChunkQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricClusterHealthChunkQueryDescription{}
	dst.ClusterHealthPolicy = obj.ClusterHealthPolicy.toGoStruct()
	{
		var mapvar = make(map[string]FabricApplicationHealthPolicy)

		var innerlst []innerFabricApplicationHealthPolicyMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationHealthPolicyMap.Items), int(obj.ApplicationHealthPolicyMap.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricApplicationHealthPolicy

			k = utf16PtrToString(kv.ApplicationName)
			v = kv.HealthPolicy.toGoStruct()
			mapvar[k] = *v

		}

		dst.ApplicationHealthPolicyMap = mapvar
	}
	{
		var innerlst []innerFabricApplicationHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationFilters.Items), int(obj.ApplicationFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.ApplicationFilters = append(dst.ApplicationFilters, tmpitem)
		}

	}
	{
		var innerlst []innerFabricNodeHealthStateFilter
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.NodeFilters.Items), int(obj.NodeFilters.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeHealthStateFilter

			tmpitem = *item.toGoStruct()

			dst.NodeFilters = append(dst.NodeFilters, tmpitem)
		}

	}
	return
}

type FabricNodeHealthStateChunk struct {
	NodeName    string
	HealthState FabricHealthState
}

func (obj *FabricNodeHealthStateChunk) toInnerStruct() *innerFabricNodeHealthStateChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNodeHealthStateChunk{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthState = obj.HealthState
	return dst
}

type innerFabricNodeHealthStateChunk struct {
	NodeName    *uint16
	HealthState FabricHealthState
	Reserved    unsafe.Pointer
}

func (obj *innerFabricNodeHealthStateChunk) toGoStruct() (dst *FabricNodeHealthStateChunk) {
	if obj == nil {
		return
	}
	dst = &FabricNodeHealthStateChunk{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthState = obj.HealthState
	return
}

type innerFabricNodeHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricNodeHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricNodeHealthStateChunkList) toGoStruct() []FabricNodeHealthStateChunk {
	var dst []FabricNodeHealthStateChunk
	{
		var innerlst []innerFabricNodeHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricReplicaHealthStateChunk struct {
	ReplicaOrInstanceId int64
	HealthState         FabricHealthState
}
type innerFabricReplicaHealthStateChunk struct {
	FabricReplicaHealthStateChunk
	Reserved unsafe.Pointer
}

func (obj *innerFabricReplicaHealthStateChunk) toGoStruct() *FabricReplicaHealthStateChunk {
	if obj == nil {
		return nil
	}
	return &obj.FabricReplicaHealthStateChunk
}
func (obj *FabricReplicaHealthStateChunk) toInnerStruct() *innerFabricReplicaHealthStateChunk {
	if obj == nil {
		return nil
	}
	return &innerFabricReplicaHealthStateChunk{*obj, nil}
}

type innerFabricReplicaHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricReplicaHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricReplicaHealthStateChunkList) toGoStruct() []FabricReplicaHealthStateChunk {
	var dst []FabricReplicaHealthStateChunk
	{
		var innerlst []innerFabricReplicaHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricReplicaHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricPartitionHealthStateChunk struct {
	PartitionId              uuid.UUID
	HealthState              FabricHealthState
	ReplicaHealthStateChunks []FabricReplicaHealthStateChunk
}

func (obj *FabricPartitionHealthStateChunk) toInnerStruct() *innerFabricPartitionHealthStateChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricPartitionHealthStateChunk{}
	dst.PartitionId = obj.PartitionId
	dst.HealthState = obj.HealthState
	lst_120 := &innerFabricReplicaHealthStateChunkList{}
	{

		var tmp []innerFabricReplicaHealthStateChunk

		for _, item := range obj.ReplicaHealthStateChunks {
			var tmpitem innerFabricReplicaHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_120.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_120.Items = &tmp[0]
		}

	}
	dst.ReplicaHealthStateChunks = lst_120
	return dst
}

type innerFabricPartitionHealthStateChunk struct {
	PartitionId              uuid.UUID
	HealthState              FabricHealthState
	ReplicaHealthStateChunks *innerFabricReplicaHealthStateChunkList
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricPartitionHealthStateChunk) toGoStruct() (dst *FabricPartitionHealthStateChunk) {
	if obj == nil {
		return
	}
	dst = &FabricPartitionHealthStateChunk{}
	dst.PartitionId = obj.PartitionId
	dst.HealthState = obj.HealthState
	{
		var innerlst []innerFabricReplicaHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ReplicaHealthStateChunks.Items), int(obj.ReplicaHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricReplicaHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.ReplicaHealthStateChunks = append(dst.ReplicaHealthStateChunks, tmpitem)
		}

	}
	return
}

type innerFabricPartitionHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricPartitionHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricPartitionHealthStateChunkList) toGoStruct() []FabricPartitionHealthStateChunk {
	var dst []FabricPartitionHealthStateChunk
	{
		var innerlst []innerFabricPartitionHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricPartitionHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricServiceHealthStateChunk struct {
	ServiceName                string
	HealthState                FabricHealthState
	PartitionHealthStateChunks []FabricPartitionHealthStateChunk
}

func (obj *FabricServiceHealthStateChunk) toInnerStruct() *innerFabricServiceHealthStateChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricServiceHealthStateChunk{}
	dst.ServiceName = utf16PtrFromString(obj.ServiceName)
	dst.HealthState = obj.HealthState
	lst_121 := &innerFabricPartitionHealthStateChunkList{}
	{

		var tmp []innerFabricPartitionHealthStateChunk

		for _, item := range obj.PartitionHealthStateChunks {
			var tmpitem innerFabricPartitionHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_121.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_121.Items = &tmp[0]
		}

	}
	dst.PartitionHealthStateChunks = lst_121
	return dst
}

type innerFabricServiceHealthStateChunk struct {
	ServiceName                *uint16
	HealthState                FabricHealthState
	PartitionHealthStateChunks *innerFabricPartitionHealthStateChunkList
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricServiceHealthStateChunk) toGoStruct() (dst *FabricServiceHealthStateChunk) {
	if obj == nil {
		return
	}
	dst = &FabricServiceHealthStateChunk{}
	dst.ServiceName = utf16PtrToString(obj.ServiceName)
	dst.HealthState = obj.HealthState
	{
		var innerlst []innerFabricPartitionHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.PartitionHealthStateChunks.Items), int(obj.PartitionHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricPartitionHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.PartitionHealthStateChunks = append(dst.PartitionHealthStateChunks, tmpitem)
		}

	}
	return
}

type innerFabricServiceHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricServiceHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricServiceHealthStateChunkList) toGoStruct() []FabricServiceHealthStateChunk {
	var dst []FabricServiceHealthStateChunk
	{
		var innerlst []innerFabricServiceHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedServicePackageHealthStateChunk struct {
	ServiceManifestName        string
	HealthState                FabricHealthState
	ServicePackageActivationId string
}

func (obj *FabricDeployedServicePackageHealthStateChunk) toInnerStruct() *innerFabricDeployedServicePackageHealthStateChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedServicePackageHealthStateChunk{}
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.HealthState = obj.HealthState
	ex0 := dst
	ex1 := &innerFabricDeployedServicePackageHealthStateChunkEx1{}
	ex1.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricDeployedServicePackageHealthStateChunk struct {
	ServiceManifestName *uint16
	HealthState         FabricHealthState
	Reserved            unsafe.Pointer
}
type innerFabricDeployedServicePackageHealthStateChunkEx1 struct {
	ServicePackageActivationId *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthStateChunk) toGoStruct() (dst *FabricDeployedServicePackageHealthStateChunk) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedServicePackageHealthStateChunk{}
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.HealthState = obj.HealthState
	ex0 := obj
	ex1 := (*innerFabricDeployedServicePackageHealthStateChunkEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ServicePackageActivationId = utf16PtrToString(ex1.ServicePackageActivationId)
	return
}

type innerFabricDeployedServicePackageHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricDeployedServicePackageHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricDeployedServicePackageHealthStateChunkList) toGoStruct() []FabricDeployedServicePackageHealthStateChunk {
	var dst []FabricDeployedServicePackageHealthStateChunk
	{
		var innerlst []innerFabricDeployedServicePackageHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedApplicationHealthStateChunk struct {
	NodeName                                string
	HealthState                             FabricHealthState
	DeployedServicePackageHealthStateChunks []FabricDeployedServicePackageHealthStateChunk
}

func (obj *FabricDeployedApplicationHealthStateChunk) toInnerStruct() *innerFabricDeployedApplicationHealthStateChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedApplicationHealthStateChunk{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.HealthState = obj.HealthState
	lst_122 := &innerFabricDeployedServicePackageHealthStateChunkList{}
	{

		var tmp []innerFabricDeployedServicePackageHealthStateChunk

		for _, item := range obj.DeployedServicePackageHealthStateChunks {
			var tmpitem innerFabricDeployedServicePackageHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_122.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_122.Items = &tmp[0]
		}

	}
	dst.DeployedServicePackageHealthStateChunks = lst_122
	return dst
}

type innerFabricDeployedApplicationHealthStateChunk struct {
	NodeName                                *uint16
	HealthState                             FabricHealthState
	DeployedServicePackageHealthStateChunks *innerFabricDeployedServicePackageHealthStateChunkList
	Reserved                                unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthStateChunk) toGoStruct() (dst *FabricDeployedApplicationHealthStateChunk) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedApplicationHealthStateChunk{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.HealthState = obj.HealthState
	{
		var innerlst []innerFabricDeployedServicePackageHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DeployedServicePackageHealthStateChunks.Items), int(obj.DeployedServicePackageHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.DeployedServicePackageHealthStateChunks = append(dst.DeployedServicePackageHealthStateChunks, tmpitem)
		}

	}
	return
}

type innerFabricDeployedApplicationHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricDeployedApplicationHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricDeployedApplicationHealthStateChunkList) toGoStruct() []FabricDeployedApplicationHealthStateChunk {
	var dst []FabricDeployedApplicationHealthStateChunk
	{
		var innerlst []innerFabricDeployedApplicationHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationHealthStateChunk struct {
	ApplicationName                      string
	HealthState                          FabricHealthState
	ServiceHealthStateChunks             []FabricServiceHealthStateChunk
	DeployedApplicationHealthStateChunks []FabricDeployedApplicationHealthStateChunk
	ApplicationTypeName                  string
}

func (obj *FabricApplicationHealthStateChunk) toInnerStruct() *innerFabricApplicationHealthStateChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationHealthStateChunk{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.HealthState = obj.HealthState
	lst_123 := &innerFabricServiceHealthStateChunkList{}
	{

		var tmp []innerFabricServiceHealthStateChunk

		for _, item := range obj.ServiceHealthStateChunks {
			var tmpitem innerFabricServiceHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_123.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_123.Items = &tmp[0]
		}

	}
	dst.ServiceHealthStateChunks = lst_123
	lst_124 := &innerFabricDeployedApplicationHealthStateChunkList{}
	{

		var tmp []innerFabricDeployedApplicationHealthStateChunk

		for _, item := range obj.DeployedApplicationHealthStateChunks {
			var tmpitem innerFabricDeployedApplicationHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_124.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_124.Items = &tmp[0]
		}

	}
	dst.DeployedApplicationHealthStateChunks = lst_124
	ex0 := dst
	ex1 := &innerFabricApplicationHealthStateChunkEx1{}
	ex1.ApplicationTypeName = utf16PtrFromString(obj.ApplicationTypeName)
	ex0.Reserved = unsafe.Pointer(ex1)
	return dst
}

type innerFabricApplicationHealthStateChunk struct {
	ApplicationName                      *uint16
	HealthState                          FabricHealthState
	ServiceHealthStateChunks             *innerFabricServiceHealthStateChunkList
	DeployedApplicationHealthStateChunks *innerFabricDeployedApplicationHealthStateChunkList
	Reserved                             unsafe.Pointer
}
type innerFabricApplicationHealthStateChunkEx1 struct {
	ApplicationTypeName *uint16
	Reserved            unsafe.Pointer
}

func (obj *innerFabricApplicationHealthStateChunk) toGoStruct() (dst *FabricApplicationHealthStateChunk) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationHealthStateChunk{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.HealthState = obj.HealthState
	{
		var innerlst []innerFabricServiceHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ServiceHealthStateChunks.Items), int(obj.ServiceHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricServiceHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.ServiceHealthStateChunks = append(dst.ServiceHealthStateChunks, tmpitem)
		}

	}
	{
		var innerlst []innerFabricDeployedApplicationHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.DeployedApplicationHealthStateChunks.Items), int(obj.DeployedApplicationHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.DeployedApplicationHealthStateChunks = append(dst.DeployedApplicationHealthStateChunks, tmpitem)
		}

	}
	ex0 := obj
	ex1 := (*innerFabricApplicationHealthStateChunkEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ApplicationTypeName = utf16PtrToString(ex1.ApplicationTypeName)
	return
}

type innerFabricApplicationHealthStateChunkList struct {
	Count      uint32
	Items      *innerFabricApplicationHealthStateChunk
	TotalCount uint32
	Reserved   unsafe.Pointer
}

func (obj *innerFabricApplicationHealthStateChunkList) toGoStruct() []FabricApplicationHealthStateChunk {
	var dst []FabricApplicationHealthStateChunk
	{
		var innerlst []innerFabricApplicationHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricClusterHealthChunk struct {
	HealthState                  FabricHealthState
	NodeHealthStateChunks        []FabricNodeHealthStateChunk
	ApplicationHealthStateChunks []FabricApplicationHealthStateChunk
}

func (obj *FabricClusterHealthChunk) toInnerStruct() *innerFabricClusterHealthChunk {
	if obj == nil {
		return nil
	}
	dst := &innerFabricClusterHealthChunk{}
	dst.HealthState = obj.HealthState
	lst_125 := &innerFabricNodeHealthStateChunkList{}
	{

		var tmp []innerFabricNodeHealthStateChunk

		for _, item := range obj.NodeHealthStateChunks {
			var tmpitem innerFabricNodeHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_125.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_125.Items = &tmp[0]
		}

	}
	dst.NodeHealthStateChunks = lst_125
	lst_126 := &innerFabricApplicationHealthStateChunkList{}
	{

		var tmp []innerFabricApplicationHealthStateChunk

		for _, item := range obj.ApplicationHealthStateChunks {
			var tmpitem innerFabricApplicationHealthStateChunk

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_126.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_126.Items = &tmp[0]
		}

	}
	dst.ApplicationHealthStateChunks = lst_126
	return dst
}

type innerFabricClusterHealthChunk struct {
	HealthState                  FabricHealthState
	NodeHealthStateChunks        *innerFabricNodeHealthStateChunkList
	ApplicationHealthStateChunks *innerFabricApplicationHealthStateChunkList
	Reserved                     unsafe.Pointer
}

func (obj *innerFabricClusterHealthChunk) toGoStruct() (dst *FabricClusterHealthChunk) {
	if obj == nil {
		return
	}
	dst = &FabricClusterHealthChunk{}
	dst.HealthState = obj.HealthState
	{
		var innerlst []innerFabricNodeHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.NodeHealthStateChunks.Items), int(obj.NodeHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricNodeHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.NodeHealthStateChunks = append(dst.NodeHealthStateChunks, tmpitem)
		}

	}
	{
		var innerlst []innerFabricApplicationHealthStateChunk
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationHealthStateChunks.Items), int(obj.ApplicationHealthStateChunks.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationHealthStateChunk

			tmpitem = *item.toGoStruct()

			dst.ApplicationHealthStateChunks = append(dst.ApplicationHealthStateChunks, tmpitem)
		}

	}
	return
}

type FabricEventContextMapItem struct {
	Key   string
	Value string
}

func (obj *FabricEventContextMapItem) toInnerStruct() *innerFabricEventContextMapItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricEventContextMapItem{}
	dst.Key = utf16PtrFromString(obj.Key)
	dst.Value = utf16PtrFromString(obj.Value)
	return dst
}

type innerFabricEventContextMapItem struct {
	Key   *uint16
	Value *uint16
}

func (obj *innerFabricEventContextMapItem) toGoStruct() (dst *FabricEventContextMapItem) {
	if obj == nil {
		return
	}
	dst = &FabricEventContextMapItem{}
	dst.Key = utf16PtrToString(obj.Key)
	dst.Value = utf16PtrToString(obj.Value)
	return
}

type innerFabricEventContextMap struct {
	Count uint32
	Items *innerFabricEventContextMapItem
}

func (obj *innerFabricEventContextMap) toGoStruct() map[string]string {
	var dst = make(map[string]string)
	{
		var mapvar = make(map[string]string)

		var innerlst []innerFabricEventContextMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, kv := range innerlst {
			var k string
			var v string

			k = utf16PtrToString(kv.Key)
			v = utf16PtrToString(kv.Value)
			mapvar[k] = v

		}

		dst = mapvar
	}
	return dst
}

type FabricChaosParameters struct {
	MaxClusterStabilizationTimeoutInSeconds uint32
	MaxConcurrentFaults                     uint32
	EnableMoveReplicaFaults                 bool
	TimeToRunInSeconds                      uint64
	WaitTimeBetweenIterationsInSeconds      uint32
	WaitTimeBetweenFaultsInSeconds          uint32
	Context                                 map[string]string
	ClusterHealthPolicy                     *FabricClusterHealthPolicy
	ChaosTargetFilter                       *FabricChaosTargetFilter
}

func (obj *FabricChaosParameters) toInnerStruct() *innerFabricChaosParameters {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosParameters{}
	dst.MaxClusterStabilizationTimeoutInSeconds = obj.MaxClusterStabilizationTimeoutInSeconds
	dst.MaxConcurrentFaults = obj.MaxConcurrentFaults
	dst.EnableMoveReplicaFaults = obj.EnableMoveReplicaFaults
	dst.TimeToRunInSeconds = obj.TimeToRunInSeconds
	dst.WaitTimeBetweenIterationsInSeconds = obj.WaitTimeBetweenIterationsInSeconds
	dst.WaitTimeBetweenFaultsInSeconds = obj.WaitTimeBetweenFaultsInSeconds
	{
		mapobj := &innerFabricEventContextMap{}

		var tmp []innerFabricEventContextMapItem

		for k, v := range obj.Context {
			kv := innerFabricEventContextMapItem{}

			kv.Key = utf16PtrFromString(k)
			kv.Value = utf16PtrFromString(v)

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		dst.Context = mapobj
	}
	ex0 := dst
	ex1 := &innerFabricChaosParametersEx1{}
	ex1.ClusterHealthPolicy = obj.ClusterHealthPolicy.toInnerStruct()
	ex0.Reserved = unsafe.Pointer(ex1)
	ex2 := &innerFabricChaosParametersEx2{}
	ex2.ChaosTargetFilter = obj.ChaosTargetFilter.toInnerStruct()
	ex1.Reserved = unsafe.Pointer(ex2)
	return dst
}

type innerFabricChaosParameters struct {
	MaxClusterStabilizationTimeoutInSeconds uint32
	MaxConcurrentFaults                     uint32
	EnableMoveReplicaFaults                 bool
	TimeToRunInSeconds                      uint64
	WaitTimeBetweenIterationsInSeconds      uint32
	WaitTimeBetweenFaultsInSeconds          uint32
	Context                                 *innerFabricEventContextMap
	Reserved                                unsafe.Pointer
}
type innerFabricChaosParametersEx1 struct {
	ClusterHealthPolicy *innerFabricClusterHealthPolicy
	Reserved            unsafe.Pointer
}
type innerFabricChaosParametersEx2 struct {
	ChaosTargetFilter *innerFabricChaosTargetFilter
	Reserved          unsafe.Pointer
}

func (obj *innerFabricChaosParameters) toGoStruct() (dst *FabricChaosParameters) {
	if obj == nil {
		return
	}
	dst = &FabricChaosParameters{}
	dst.MaxClusterStabilizationTimeoutInSeconds = obj.MaxClusterStabilizationTimeoutInSeconds
	dst.MaxConcurrentFaults = obj.MaxConcurrentFaults
	dst.EnableMoveReplicaFaults = obj.EnableMoveReplicaFaults
	dst.TimeToRunInSeconds = obj.TimeToRunInSeconds
	dst.WaitTimeBetweenIterationsInSeconds = obj.WaitTimeBetweenIterationsInSeconds
	dst.WaitTimeBetweenFaultsInSeconds = obj.WaitTimeBetweenFaultsInSeconds
	{
		var mapvar = make(map[string]string)

		var innerlst []innerFabricEventContextMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Context.Items), int(obj.Context.Count))

		for _, kv := range innerlst {
			var k string
			var v string

			k = utf16PtrToString(kv.Key)
			v = utf16PtrToString(kv.Value)
			mapvar[k] = v

		}

		dst.Context = mapvar
	}
	ex0 := obj
	ex1 := (*innerFabricChaosParametersEx1)(ex0.Reserved)
	if ex1 == nil {
		return
	}
	dst.ClusterHealthPolicy = ex1.ClusterHealthPolicy.toGoStruct()
	ex2 := (*innerFabricChaosParametersEx2)(ex1.Reserved)
	if ex2 == nil {
		return
	}
	dst.ChaosTargetFilter = ex2.ChaosTargetFilter.toGoStruct()
	return
}

type FabricChaosTargetFilter struct {
	NodeTypeInclusionList    []string
	ApplicationInclusionList []string
}

func (obj *FabricChaosTargetFilter) toInnerStruct() *innerFabricChaosTargetFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosTargetFilter{}
	lst_130 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.NodeTypeInclusionList {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_130.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_130.Items = &tmp[0]
		}

	}
	dst.NodeTypeInclusionList = lst_130
	lst_131 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.ApplicationInclusionList {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_131.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_131.Items = &tmp[0]
		}

	}
	dst.ApplicationInclusionList = lst_131
	return dst
}

type innerFabricChaosTargetFilter struct {
	NodeTypeInclusionList    *innerFabricStringList
	ApplicationInclusionList *innerFabricStringList
	Reserved                 unsafe.Pointer
}

func (obj *innerFabricChaosTargetFilter) toGoStruct() (dst *FabricChaosTargetFilter) {
	if obj == nil {
		return
	}
	dst = &FabricChaosTargetFilter{}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.NodeTypeInclusionList.Items), int(obj.NodeTypeInclusionList.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.NodeTypeInclusionList = append(dst.NodeTypeInclusionList, tmpitem)
		}

	}
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ApplicationInclusionList.Items), int(obj.ApplicationInclusionList.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.ApplicationInclusionList = append(dst.ApplicationInclusionList, tmpitem)
		}

	}
	return
}

type FabricStartChaosDescription struct {
	ChaosParameters *FabricChaosParameters
}
type innerFabricStartChaosDescription struct {
	FabricStartChaosDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricStartChaosDescription) toGoStruct() *FabricStartChaosDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricStartChaosDescription
}
func (obj *FabricStartChaosDescription) toInnerStruct() *innerFabricStartChaosDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricStartChaosDescription{*obj, nil}
}

type FabricChaosEventsSegmentFilter struct {
	StartTimeUtc time.Time
	EndTimeUtc   time.Time
}

func (obj *FabricChaosEventsSegmentFilter) toInnerStruct() *innerFabricChaosEventsSegmentFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosEventsSegmentFilter{}
	dst.StartTimeUtc = timeToFiletime(obj.StartTimeUtc)
	dst.EndTimeUtc = timeToFiletime(obj.EndTimeUtc)
	return dst
}

type innerFabricChaosEventsSegmentFilter struct {
	StartTimeUtc filetime
	EndTimeUtc   filetime
	Reserved     unsafe.Pointer
}

func (obj *innerFabricChaosEventsSegmentFilter) toGoStruct() (dst *FabricChaosEventsSegmentFilter) {
	if obj == nil {
		return
	}
	dst = &FabricChaosEventsSegmentFilter{}
	dst.StartTimeUtc = obj.StartTimeUtc.ToTime()
	dst.EndTimeUtc = obj.EndTimeUtc.ToTime()
	return
}

type FabricChaosEventsSegmentDescription struct {
	Filter            *FabricChaosEventsSegmentFilter
	PagingDescription *FabricQueryPagingDescription
}
type innerFabricChaosEventsSegmentDescription struct {
	FabricChaosEventsSegmentDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosEventsSegmentDescription) toGoStruct() *FabricChaosEventsSegmentDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosEventsSegmentDescription
}
func (obj *FabricChaosEventsSegmentDescription) toInnerStruct() *innerFabricChaosEventsSegmentDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosEventsSegmentDescription{*obj, nil}
}

type FabricChaosReportFilter struct {
	StartTimeUtc time.Time
	EndTimeUtc   time.Time
}

func (obj *FabricChaosReportFilter) toInnerStruct() *innerFabricChaosReportFilter {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosReportFilter{}
	dst.StartTimeUtc = timeToFiletime(obj.StartTimeUtc)
	dst.EndTimeUtc = timeToFiletime(obj.EndTimeUtc)
	return dst
}

type innerFabricChaosReportFilter struct {
	StartTimeUtc filetime
	EndTimeUtc   filetime
	Reserved     unsafe.Pointer
}

func (obj *innerFabricChaosReportFilter) toGoStruct() (dst *FabricChaosReportFilter) {
	if obj == nil {
		return
	}
	dst = &FabricChaosReportFilter{}
	dst.StartTimeUtc = obj.StartTimeUtc.ToTime()
	dst.EndTimeUtc = obj.EndTimeUtc.ToTime()
	return
}

type FabricGetChaosReportDescription struct {
	Filter            *FabricChaosReportFilter
	ContinuationToken string
}

func (obj *FabricGetChaosReportDescription) toInnerStruct() *innerFabricGetChaosReportDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricGetChaosReportDescription{}
	dst.Filter = obj.Filter.toInnerStruct()
	dst.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	return dst
}

type innerFabricGetChaosReportDescription struct {
	Filter            *innerFabricChaosReportFilter
	ContinuationToken *uint16
	Reserved          unsafe.Pointer
}

func (obj *innerFabricGetChaosReportDescription) toGoStruct() (dst *FabricGetChaosReportDescription) {
	if obj == nil {
		return
	}
	dst = &FabricGetChaosReportDescription{}
	dst.Filter = obj.Filter.toGoStruct()
	dst.ContinuationToken = utf16PtrToString(obj.ContinuationToken)
	return
}

type FabricChaosEvent struct {
	Kind  FabricChaosEventKind
	Value interface{}
}

func (obj *FabricChaosEvent) toInnerStruct() *innerFabricChaosEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosEvent{}
	dst.Kind = obj.Kind
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricChaosEvent struct {
	Kind  FabricChaosEventKind
	Value unsafe.Pointer
}

func (obj *innerFabricChaosEvent) toGoStruct() (dst *FabricChaosEvent) {
	if obj == nil {
		return
	}
	dst = &FabricChaosEvent{}
	dst.Kind = obj.Kind
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricStartedEvent struct {
	TimeStampUtc    time.Time
	ChaosParameters *FabricChaosParameters
}

func (obj *FabricStartedEvent) toInnerStruct() *innerFabricStartedEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStartedEvent{}
	dst.TimeStampUtc = timeToFiletime(obj.TimeStampUtc)
	dst.ChaosParameters = obj.ChaosParameters.toInnerStruct()
	return dst
}

type innerFabricStartedEvent struct {
	TimeStampUtc    filetime
	ChaosParameters *innerFabricChaosParameters
	Reserved        unsafe.Pointer
}

func (obj *innerFabricStartedEvent) toGoStruct() (dst *FabricStartedEvent) {
	if obj == nil {
		return
	}
	dst = &FabricStartedEvent{}
	dst.TimeStampUtc = obj.TimeStampUtc.ToTime()
	dst.ChaosParameters = obj.ChaosParameters.toGoStruct()
	return
}

type FabricExecutingFaultsEvent struct {
	TimeStampUtc time.Time
	Faults       []string
}

func (obj *FabricExecutingFaultsEvent) toInnerStruct() *innerFabricExecutingFaultsEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricExecutingFaultsEvent{}
	dst.TimeStampUtc = timeToFiletime(obj.TimeStampUtc)
	lst_132 := &innerFabricStringList{}
	{

		var tmp []*uint16

		for _, item := range obj.Faults {
			var tmpitem *uint16

			tmpitem = utf16PtrFromString(item)

			tmp = append(tmp, tmpitem)
		}

		lst_132.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_132.Items = &tmp[0]
		}

	}
	dst.Faults = lst_132
	return dst
}

type innerFabricExecutingFaultsEvent struct {
	TimeStampUtc filetime
	Faults       *innerFabricStringList
	Reserved     unsafe.Pointer
}

func (obj *innerFabricExecutingFaultsEvent) toGoStruct() (dst *FabricExecutingFaultsEvent) {
	if obj == nil {
		return
	}
	dst = &FabricExecutingFaultsEvent{}
	dst.TimeStampUtc = obj.TimeStampUtc.ToTime()
	{
		var innerlst []*uint16
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Faults.Items), int(obj.Faults.Count))

		for _, item := range innerlst {
			var tmpitem string

			tmpitem = utf16PtrToString(item)

			dst.Faults = append(dst.Faults, tmpitem)
		}

	}
	return
}

type FabricWaitingEvent struct {
	TimeStampUtc time.Time
	Reason       string
}

func (obj *FabricWaitingEvent) toInnerStruct() *innerFabricWaitingEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricWaitingEvent{}
	dst.TimeStampUtc = timeToFiletime(obj.TimeStampUtc)
	dst.Reason = utf16PtrFromString(obj.Reason)
	return dst
}

type innerFabricWaitingEvent struct {
	TimeStampUtc filetime
	Reason       *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricWaitingEvent) toGoStruct() (dst *FabricWaitingEvent) {
	if obj == nil {
		return
	}
	dst = &FabricWaitingEvent{}
	dst.TimeStampUtc = obj.TimeStampUtc.ToTime()
	dst.Reason = utf16PtrToString(obj.Reason)
	return
}

type FabricValidationFailedEvent struct {
	TimeStampUtc time.Time
	Reason       string
}

func (obj *FabricValidationFailedEvent) toInnerStruct() *innerFabricValidationFailedEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricValidationFailedEvent{}
	dst.TimeStampUtc = timeToFiletime(obj.TimeStampUtc)
	dst.Reason = utf16PtrFromString(obj.Reason)
	return dst
}

type innerFabricValidationFailedEvent struct {
	TimeStampUtc filetime
	Reason       *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricValidationFailedEvent) toGoStruct() (dst *FabricValidationFailedEvent) {
	if obj == nil {
		return
	}
	dst = &FabricValidationFailedEvent{}
	dst.TimeStampUtc = obj.TimeStampUtc.ToTime()
	dst.Reason = utf16PtrToString(obj.Reason)
	return
}

type FabricTestErrorEvent struct {
	TimeStampUtc time.Time
	Reason       string
}

func (obj *FabricTestErrorEvent) toInnerStruct() *innerFabricTestErrorEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricTestErrorEvent{}
	dst.TimeStampUtc = timeToFiletime(obj.TimeStampUtc)
	dst.Reason = utf16PtrFromString(obj.Reason)
	return dst
}

type innerFabricTestErrorEvent struct {
	TimeStampUtc filetime
	Reason       *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricTestErrorEvent) toGoStruct() (dst *FabricTestErrorEvent) {
	if obj == nil {
		return
	}
	dst = &FabricTestErrorEvent{}
	dst.TimeStampUtc = obj.TimeStampUtc.ToTime()
	dst.Reason = utf16PtrToString(obj.Reason)
	return
}

type FabricStoppedEvent struct {
	TimeStampUtc time.Time
	Reason       string
}

func (obj *FabricStoppedEvent) toInnerStruct() *innerFabricStoppedEvent {
	if obj == nil {
		return nil
	}
	dst := &innerFabricStoppedEvent{}
	dst.TimeStampUtc = timeToFiletime(obj.TimeStampUtc)
	dst.Reason = utf16PtrFromString(obj.Reason)
	return dst
}

type innerFabricStoppedEvent struct {
	TimeStampUtc filetime
	Reason       *uint16
	Reserved     unsafe.Pointer
}

func (obj *innerFabricStoppedEvent) toGoStruct() (dst *FabricStoppedEvent) {
	if obj == nil {
		return
	}
	dst = &FabricStoppedEvent{}
	dst.TimeStampUtc = obj.TimeStampUtc.ToTime()
	dst.Reason = utf16PtrToString(obj.Reason)
	return
}

type innerFabricChaosEventList struct {
	Count uint32
	Items *innerFabricChaosEvent
}

func (obj *innerFabricChaosEventList) toGoStruct() []FabricChaosEvent {
	var dst []FabricChaosEvent
	{
		var innerlst []innerFabricChaosEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosEvent

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricChaosReport struct {
	ChaosParameters   *FabricChaosParameters
	Status            FabricChaosStatus
	ContinuationToken string
	History           []FabricChaosEvent
}

func (obj *FabricChaosReport) toInnerStruct() *innerFabricChaosReport {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosReport{}
	dst.ChaosParameters = obj.ChaosParameters.toInnerStruct()
	dst.Status = obj.Status
	dst.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	lst_133 := &innerFabricChaosEventList{}
	{

		var tmp []innerFabricChaosEvent

		for _, item := range obj.History {
			var tmpitem innerFabricChaosEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_133.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_133.Items = &tmp[0]
		}

	}
	dst.History = lst_133
	return dst
}

type innerFabricChaosReport struct {
	ChaosParameters   *innerFabricChaosParameters
	Status            FabricChaosStatus
	ContinuationToken *uint16
	History           *innerFabricChaosEventList
	Reserved          unsafe.Pointer
}

func (obj *innerFabricChaosReport) toGoStruct() (dst *FabricChaosReport) {
	if obj == nil {
		return
	}
	dst = &FabricChaosReport{}
	dst.ChaosParameters = obj.ChaosParameters.toGoStruct()
	dst.Status = obj.Status
	dst.ContinuationToken = utf16PtrToString(obj.ContinuationToken)
	{
		var innerlst []innerFabricChaosEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.History.Items), int(obj.History.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosEvent

			tmpitem = *item.toGoStruct()

			dst.History = append(dst.History, tmpitem)
		}

	}
	return
}

type FabricChaosEventsSegment struct {
	ContinuationToken string
	History           []FabricChaosEvent
}

func (obj *FabricChaosEventsSegment) toInnerStruct() *innerFabricChaosEventsSegment {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosEventsSegment{}
	dst.ContinuationToken = utf16PtrFromString(obj.ContinuationToken)
	lst_134 := &innerFabricChaosEventList{}
	{

		var tmp []innerFabricChaosEvent

		for _, item := range obj.History {
			var tmpitem innerFabricChaosEvent

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_134.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_134.Items = &tmp[0]
		}

	}
	dst.History = lst_134
	return dst
}

type innerFabricChaosEventsSegment struct {
	ContinuationToken *uint16
	History           *innerFabricChaosEventList
	Reserved          unsafe.Pointer
}

func (obj *innerFabricChaosEventsSegment) toGoStruct() (dst *FabricChaosEventsSegment) {
	if obj == nil {
		return
	}
	dst = &FabricChaosEventsSegment{}
	dst.ContinuationToken = utf16PtrToString(obj.ContinuationToken)
	{
		var innerlst []innerFabricChaosEvent
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.History.Items), int(obj.History.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosEvent

			tmpitem = *item.toGoStruct()

			dst.History = append(dst.History, tmpitem)
		}

	}
	return
}

type FabricChaosDescription struct {
	ChaosParameters *FabricChaosParameters
	Status          FabricChaosStatus
	ScheduleStatus  FabricChaosScheduleStatus
}
type innerFabricChaosDescription struct {
	FabricChaosDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosDescription) toGoStruct() *FabricChaosDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosDescription
}
func (obj *FabricChaosDescription) toInnerStruct() *innerFabricChaosDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosDescription{*obj, nil}
}

type FabricChaosScheduleTimeUtc struct {
	Hour   uint32
	Minute uint32
}
type innerFabricChaosScheduleTimeUtc struct {
	FabricChaosScheduleTimeUtc
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosScheduleTimeUtc) toGoStruct() *FabricChaosScheduleTimeUtc {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosScheduleTimeUtc
}
func (obj *FabricChaosScheduleTimeUtc) toInnerStruct() *innerFabricChaosScheduleTimeUtc {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosScheduleTimeUtc{*obj, nil}
}

type FabricChaosScheduleTimeRangeUtc struct {
	StartTime *FabricChaosScheduleTimeUtc
	EndTime   *FabricChaosScheduleTimeUtc
}
type innerFabricChaosScheduleTimeRangeUtc struct {
	FabricChaosScheduleTimeRangeUtc
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosScheduleTimeRangeUtc) toGoStruct() *FabricChaosScheduleTimeRangeUtc {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosScheduleTimeRangeUtc
}
func (obj *FabricChaosScheduleTimeRangeUtc) toInnerStruct() *innerFabricChaosScheduleTimeRangeUtc {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosScheduleTimeRangeUtc{*obj, nil}
}

type innerFabricChaosScheduleTimeRangeUtcList struct {
	Count uint32
	Items *innerFabricChaosScheduleTimeRangeUtc
}

func (obj *innerFabricChaosScheduleTimeRangeUtcList) toGoStruct() []FabricChaosScheduleTimeRangeUtc {
	var dst []FabricChaosScheduleTimeRangeUtc
	{
		var innerlst []innerFabricChaosScheduleTimeRangeUtc
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosScheduleTimeRangeUtc

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricChaosScheduleJobActiveDays struct {
	Sunday    bool
	Monday    bool
	Tuesday   bool
	Wednesday bool
	Thursday  bool
	Friday    bool
	Saturday  bool
}
type innerFabricChaosScheduleJobActiveDays struct {
	FabricChaosScheduleJobActiveDays
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosScheduleJobActiveDays) toGoStruct() *FabricChaosScheduleJobActiveDays {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosScheduleJobActiveDays
}
func (obj *FabricChaosScheduleJobActiveDays) toInnerStruct() *innerFabricChaosScheduleJobActiveDays {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosScheduleJobActiveDays{*obj, nil}
}

type FabricChaosScheduleJob struct {
	ChaosParameters string
	Days            *FabricChaosScheduleJobActiveDays
	Times           []FabricChaosScheduleTimeRangeUtc
}

func (obj *FabricChaosScheduleJob) toInnerStruct() *innerFabricChaosScheduleJob {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosScheduleJob{}
	dst.ChaosParameters = utf16PtrFromString(obj.ChaosParameters)
	dst.Days = obj.Days.toInnerStruct()
	lst_135 := &innerFabricChaosScheduleTimeRangeUtcList{}
	{

		var tmp []innerFabricChaosScheduleTimeRangeUtc

		for _, item := range obj.Times {
			var tmpitem innerFabricChaosScheduleTimeRangeUtc

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_135.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_135.Items = &tmp[0]
		}

	}
	dst.Times = lst_135
	return dst
}

type innerFabricChaosScheduleJob struct {
	ChaosParameters *uint16
	Days            *innerFabricChaosScheduleJobActiveDays
	Times           *innerFabricChaosScheduleTimeRangeUtcList
	Reserved        unsafe.Pointer
}

func (obj *innerFabricChaosScheduleJob) toGoStruct() (dst *FabricChaosScheduleJob) {
	if obj == nil {
		return
	}
	dst = &FabricChaosScheduleJob{}
	dst.ChaosParameters = utf16PtrToString(obj.ChaosParameters)
	dst.Days = obj.Days.toGoStruct()
	{
		var innerlst []innerFabricChaosScheduleTimeRangeUtc
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Times.Items), int(obj.Times.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosScheduleTimeRangeUtc

			tmpitem = *item.toGoStruct()

			dst.Times = append(dst.Times, tmpitem)
		}

	}
	return
}

type innerFabricChaosScheduleJobList struct {
	Count uint32
	Items *innerFabricChaosScheduleJob
}

func (obj *innerFabricChaosScheduleJobList) toGoStruct() []FabricChaosScheduleJob {
	var dst []FabricChaosScheduleJob
	{
		var innerlst []innerFabricChaosScheduleJob
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosScheduleJob

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricChaosScheduleChaosParametersMapItem struct {
	Name       string
	Parameters *FabricChaosParameters
}

func (obj *FabricChaosScheduleChaosParametersMapItem) toInnerStruct() *innerFabricChaosScheduleChaosParametersMapItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosScheduleChaosParametersMapItem{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Parameters = obj.Parameters.toInnerStruct()
	return dst
}

type innerFabricChaosScheduleChaosParametersMapItem struct {
	Name       *uint16
	Parameters *innerFabricChaosParameters
}

func (obj *innerFabricChaosScheduleChaosParametersMapItem) toGoStruct() (dst *FabricChaosScheduleChaosParametersMapItem) {
	if obj == nil {
		return
	}
	dst = &FabricChaosScheduleChaosParametersMapItem{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Parameters = obj.Parameters.toGoStruct()
	return
}

type innerFabricChaosScheduleChaosParametersMap struct {
	Count uint32
	Items *innerFabricChaosScheduleChaosParametersMapItem
}

func (obj *innerFabricChaosScheduleChaosParametersMap) toGoStruct() map[string]FabricChaosParameters {
	var dst = make(map[string]FabricChaosParameters)
	{
		var mapvar = make(map[string]FabricChaosParameters)

		var innerlst []innerFabricChaosScheduleChaosParametersMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricChaosParameters

			k = utf16PtrToString(kv.Name)
			v = kv.Parameters.toGoStruct()
			mapvar[k] = *v

		}

		dst = mapvar
	}
	return dst
}

type FabricChaosSchedule struct {
	StartDate          time.Time
	ExpiryDate         time.Time
	ChaosParametersMap map[string]FabricChaosParameters
	Jobs               []FabricChaosScheduleJob
}

func (obj *FabricChaosSchedule) toInnerStruct() *innerFabricChaosSchedule {
	if obj == nil {
		return nil
	}
	dst := &innerFabricChaosSchedule{}
	dst.StartDate = timeToFiletime(obj.StartDate)
	dst.ExpiryDate = timeToFiletime(obj.ExpiryDate)
	{
		mapobj := &innerFabricChaosScheduleChaosParametersMap{}

		var tmp []innerFabricChaosScheduleChaosParametersMapItem

		for k, v := range obj.ChaosParametersMap {
			kv := innerFabricChaosScheduleChaosParametersMapItem{}

			kv.Name = utf16PtrFromString(k)
			kv.Parameters = v.toInnerStruct()

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		dst.ChaosParametersMap = mapobj
	}
	lst_138 := &innerFabricChaosScheduleJobList{}
	{

		var tmp []innerFabricChaosScheduleJob

		for _, item := range obj.Jobs {
			var tmpitem innerFabricChaosScheduleJob

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst_138.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst_138.Items = &tmp[0]
		}

	}
	dst.Jobs = lst_138
	return dst
}

type innerFabricChaosSchedule struct {
	StartDate          filetime
	ExpiryDate         filetime
	ChaosParametersMap *innerFabricChaosScheduleChaosParametersMap
	Jobs               *innerFabricChaosScheduleJobList
	Reserved           unsafe.Pointer
}

func (obj *innerFabricChaosSchedule) toGoStruct() (dst *FabricChaosSchedule) {
	if obj == nil {
		return
	}
	dst = &FabricChaosSchedule{}
	dst.StartDate = obj.StartDate.ToTime()
	dst.ExpiryDate = obj.ExpiryDate.ToTime()
	{
		var mapvar = make(map[string]FabricChaosParameters)

		var innerlst []innerFabricChaosScheduleChaosParametersMapItem

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.ChaosParametersMap.Items), int(obj.ChaosParametersMap.Count))

		for _, kv := range innerlst {
			var k string
			var v *FabricChaosParameters

			k = utf16PtrToString(kv.Name)
			v = kv.Parameters.toGoStruct()
			mapvar[k] = *v

		}

		dst.ChaosParametersMap = mapvar
	}
	{
		var innerlst []innerFabricChaosScheduleJob
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Jobs.Items), int(obj.Jobs.Count))

		for _, item := range innerlst {
			var tmpitem FabricChaosScheduleJob

			tmpitem = *item.toGoStruct()

			dst.Jobs = append(dst.Jobs, tmpitem)
		}

	}
	return
}

type FabricChaosScheduleDescription struct {
	Version  uint32
	Schedule *FabricChaosSchedule
}
type innerFabricChaosScheduleDescription struct {
	FabricChaosScheduleDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosScheduleDescription) toGoStruct() *FabricChaosScheduleDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosScheduleDescription
}
func (obj *FabricChaosScheduleDescription) toInnerStruct() *innerFabricChaosScheduleDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosScheduleDescription{*obj, nil}
}

type FabricChaosServiceScheduleDescription struct {
	ChaosScheduleDescription *FabricChaosScheduleDescription
}
type innerFabricChaosServiceScheduleDescription struct {
	FabricChaosServiceScheduleDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricChaosServiceScheduleDescription) toGoStruct() *FabricChaosServiceScheduleDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricChaosServiceScheduleDescription
}
func (obj *FabricChaosServiceScheduleDescription) toInnerStruct() *innerFabricChaosServiceScheduleDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricChaosServiceScheduleDescription{*obj, nil}
}

type FabricSecret struct {
	Name        string
	Version     string
	Value       string
	Kind        string
	ContentType string
}

func (obj *FabricSecret) toInnerStruct() *innerFabricSecret {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSecret{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Version = utf16PtrFromString(obj.Version)
	dst.Value = utf16PtrFromString(obj.Value)
	dst.Kind = utf16PtrFromString(obj.Kind)
	dst.ContentType = utf16PtrFromString(obj.ContentType)
	return dst
}

type innerFabricSecret struct {
	Name        *uint16
	Version     *uint16
	Value       *uint16
	Kind        *uint16
	ContentType *uint16
}

func (obj *innerFabricSecret) toGoStruct() (dst *FabricSecret) {
	if obj == nil {
		return
	}
	dst = &FabricSecret{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Version = utf16PtrToString(obj.Version)
	dst.Value = utf16PtrToString(obj.Value)
	dst.Kind = utf16PtrToString(obj.Kind)
	dst.ContentType = utf16PtrToString(obj.ContentType)
	return
}

type innerFabricSecretList struct {
	Count uint32
	Items *innerFabricSecret
}

func (obj *innerFabricSecretList) toGoStruct() []FabricSecret {
	var dst []FabricSecret
	{
		var innerlst []innerFabricSecret
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricSecret

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricSecretReference struct {
	Name    string
	Version string
}

func (obj *FabricSecretReference) toInnerStruct() *innerFabricSecretReference {
	if obj == nil {
		return nil
	}
	dst := &innerFabricSecretReference{}
	dst.Name = utf16PtrFromString(obj.Name)
	dst.Version = utf16PtrFromString(obj.Version)
	return dst
}

type innerFabricSecretReference struct {
	Name    *uint16
	Version *uint16
}

func (obj *innerFabricSecretReference) toGoStruct() (dst *FabricSecretReference) {
	if obj == nil {
		return
	}
	dst = &FabricSecretReference{}
	dst.Name = utf16PtrToString(obj.Name)
	dst.Version = utf16PtrToString(obj.Version)
	return
}

type innerFabricSecretReferenceList struct {
	Count uint32
	Items *innerFabricSecretReference
}

func (obj *innerFabricSecretReferenceList) toGoStruct() []FabricSecretReference {
	var dst []FabricSecretReference
	{
		var innerlst []innerFabricSecretReference
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricSecretReference

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricCodePackageEventType int32

const (
	FabricCodePackageEventTypeInvalid     FabricCodePackageEventType = 0x0000
	FabricCodePackageEventTypeStartFailed FabricCodePackageEventType = 0x0001
	FabricCodePackageEventTypeStarted     FabricCodePackageEventType = 0x0002
	FabricCodePackageEventTypeReady       FabricCodePackageEventType = 0x0003
	FabricCodePackageEventTypeHealth      FabricCodePackageEventType = 0x0004
	FabricCodePackageEventTypeStopped     FabricCodePackageEventType = 0x0005
	FabricCodePackageEventTypeTerminated  FabricCodePackageEventType = 0x0006
)

type FabricCodePackageEventDescription struct {
	CodePackageName   string
	IsSetupEntryPoint bool
	IsContainerHost   bool
	EventType         FabricCodePackageEventType
	TimeStampInTicks  int64
	SequenceNumber    int64
	Properties        map[string]string
}

func (obj *FabricCodePackageEventDescription) toInnerStruct() *innerFabricCodePackageEventDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricCodePackageEventDescription{}
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.IsSetupEntryPoint = obj.IsSetupEntryPoint
	dst.IsContainerHost = obj.IsContainerHost
	dst.EventType = obj.EventType
	dst.TimeStampInTicks = obj.TimeStampInTicks
	dst.SequenceNumber = obj.SequenceNumber
	{
		mapobj := &innerFabricStringMap{}

		var tmp []innerFabricApplicationParameter

		for k, v := range obj.Properties {
			kv := innerFabricApplicationParameter{}

			kv.Name = utf16PtrFromString(k)
			kv.Value = utf16PtrFromString(v)

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		dst.Properties = mapobj
	}
	return dst
}

type innerFabricCodePackageEventDescription struct {
	CodePackageName   *uint16
	IsSetupEntryPoint bool
	IsContainerHost   bool
	EventType         FabricCodePackageEventType
	TimeStampInTicks  int64
	SequenceNumber    int64
	Properties        *innerFabricStringMap
	Reserved          unsafe.Pointer
}

func (obj *innerFabricCodePackageEventDescription) toGoStruct() (dst *FabricCodePackageEventDescription) {
	if obj == nil {
		return
	}
	dst = &FabricCodePackageEventDescription{}
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.IsSetupEntryPoint = obj.IsSetupEntryPoint
	dst.IsContainerHost = obj.IsContainerHost
	dst.EventType = obj.EventType
	dst.TimeStampInTicks = obj.TimeStampInTicks
	dst.SequenceNumber = obj.SequenceNumber
	{
		var mapvar = make(map[string]string)

		var innerlst []innerFabricApplicationParameter

		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Properties.Items), int(obj.Properties.Count))

		for _, kv := range innerlst {
			var k string
			var v string

			k = utf16PtrToString(kv.Name)
			v = utf16PtrToString(kv.Value)
			mapvar[k] = v

		}

		dst.Properties = mapvar
	}
	return
}

type FabricNetworkDescription struct {
	NetworkType FabricNetworkType
	Value       interface{}
}

func (obj *FabricNetworkDescription) toInnerStruct() *innerFabricNetworkDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkDescription{}
	dst.NetworkType = obj.NetworkType
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricNetworkDescription struct {
	NetworkType FabricNetworkType
	Value       unsafe.Pointer
}

func (obj *innerFabricNetworkDescription) toGoStruct() (dst *FabricNetworkDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkDescription{}
	dst.NetworkType = obj.NetworkType
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricLocalNetworkConfigurationDescription struct {
	NetworkAddressPrefix string
}

func (obj *FabricLocalNetworkConfigurationDescription) toInnerStruct() *innerFabricLocalNetworkConfigurationDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricLocalNetworkConfigurationDescription{}
	dst.NetworkAddressPrefix = utf16PtrFromString(obj.NetworkAddressPrefix)
	return dst
}

type innerFabricLocalNetworkConfigurationDescription struct {
	NetworkAddressPrefix *uint16
	Reserved             unsafe.Pointer
}

func (obj *innerFabricLocalNetworkConfigurationDescription) toGoStruct() (dst *FabricLocalNetworkConfigurationDescription) {
	if obj == nil {
		return
	}
	dst = &FabricLocalNetworkConfigurationDescription{}
	dst.NetworkAddressPrefix = utf16PtrToString(obj.NetworkAddressPrefix)
	return
}

type FabricLocalNetworkDescription struct {
	NetworkConfiguration *FabricLocalNetworkConfigurationDescription
}
type innerFabricLocalNetworkDescription struct {
	FabricLocalNetworkDescription
	Reserved unsafe.Pointer
}

func (obj *innerFabricLocalNetworkDescription) toGoStruct() *FabricLocalNetworkDescription {
	if obj == nil {
		return nil
	}
	return &obj.FabricLocalNetworkDescription
}
func (obj *FabricLocalNetworkDescription) toInnerStruct() *innerFabricLocalNetworkDescription {
	if obj == nil {
		return nil
	}
	return &innerFabricLocalNetworkDescription{*obj, nil}
}

type FabricDeleteNetworkDescription struct {
	NetworkName string
}

func (obj *FabricDeleteNetworkDescription) toInnerStruct() *innerFabricDeleteNetworkDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeleteNetworkDescription{}
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	return dst
}

type innerFabricDeleteNetworkDescription struct {
	NetworkName *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricDeleteNetworkDescription) toGoStruct() (dst *FabricDeleteNetworkDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeleteNetworkDescription{}
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	return
}

type FabricNetworkInformation struct {
	NetworkType FabricNetworkType
	Value       interface{}
}

func (obj *FabricNetworkInformation) toInnerStruct() *innerFabricNetworkInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkInformation{}
	dst.NetworkType = obj.NetworkType
	dst.Value = toUnsafePointer(obj.Value)
	return dst
}

type innerFabricNetworkInformation struct {
	NetworkType FabricNetworkType
	Value       unsafe.Pointer
}

func (obj *innerFabricNetworkInformation) toGoStruct() (dst *FabricNetworkInformation) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkInformation{}
	dst.NetworkType = obj.NetworkType
	dst.Value = fromUnsafePointer(obj.Value)
	return
}

type FabricNetworkQueryDescription struct {
	NetworkNameFilter   string
	NetworkStatusFilter uint32
	PagingDescription   *FabricQueryPagingDescription
}

func (obj *FabricNetworkQueryDescription) toInnerStruct() *innerFabricNetworkQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkQueryDescription{}
	dst.NetworkNameFilter = utf16PtrFromString(obj.NetworkNameFilter)
	dst.NetworkStatusFilter = obj.NetworkStatusFilter
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricNetworkQueryDescription struct {
	NetworkNameFilter   *uint16
	NetworkStatusFilter uint32
	PagingDescription   *innerFabricQueryPagingDescription
	Reserved            unsafe.Pointer
}

func (obj *innerFabricNetworkQueryDescription) toGoStruct() (dst *FabricNetworkQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkQueryDescription{}
	dst.NetworkNameFilter = utf16PtrToString(obj.NetworkNameFilter)
	dst.NetworkStatusFilter = obj.NetworkStatusFilter
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricLocalNetworkInformation struct {
	NetworkName          string
	NetworkConfiguration *FabricLocalNetworkConfigurationDescription
	NetworkStatus        FabricNetworkStatus
}

func (obj *FabricLocalNetworkInformation) toInnerStruct() *innerFabricLocalNetworkInformation {
	if obj == nil {
		return nil
	}
	dst := &innerFabricLocalNetworkInformation{}
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	dst.NetworkConfiguration = obj.NetworkConfiguration.toInnerStruct()
	dst.NetworkStatus = obj.NetworkStatus
	return dst
}

type innerFabricLocalNetworkInformation struct {
	NetworkName          *uint16
	NetworkConfiguration *innerFabricLocalNetworkConfigurationDescription
	NetworkStatus        FabricNetworkStatus
	Reserved             unsafe.Pointer
}

func (obj *innerFabricLocalNetworkInformation) toGoStruct() (dst *FabricLocalNetworkInformation) {
	if obj == nil {
		return
	}
	dst = &FabricLocalNetworkInformation{}
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	dst.NetworkConfiguration = obj.NetworkConfiguration.toGoStruct()
	dst.NetworkStatus = obj.NetworkStatus
	return
}

type innerFabricNetworkQueryResultList struct {
	Count uint32
	Items *innerFabricNetworkInformation
}

func (obj *innerFabricNetworkQueryResultList) toGoStruct() []FabricNetworkInformation {
	var dst []FabricNetworkInformation
	{
		var innerlst []innerFabricNetworkInformation
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNetworkInformation

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricNetworkApplicationQueryDescription struct {
	NetworkName           string
	ApplicationNameFilter string
	PagingDescription     *FabricQueryPagingDescription
}

func (obj *FabricNetworkApplicationQueryDescription) toInnerStruct() *innerFabricNetworkApplicationQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkApplicationQueryDescription{}
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	dst.ApplicationNameFilter = utf16PtrFromString(obj.ApplicationNameFilter)
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricNetworkApplicationQueryDescription struct {
	NetworkName           *uint16
	ApplicationNameFilter *uint16
	PagingDescription     *innerFabricQueryPagingDescription
	Reserved              unsafe.Pointer
}

func (obj *innerFabricNetworkApplicationQueryDescription) toGoStruct() (dst *FabricNetworkApplicationQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkApplicationQueryDescription{}
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	dst.ApplicationNameFilter = utf16PtrToString(obj.ApplicationNameFilter)
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricNetworkApplicationQueryResultItem struct {
	ApplicationName string
}

func (obj *FabricNetworkApplicationQueryResultItem) toInnerStruct() *innerFabricNetworkApplicationQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkApplicationQueryResultItem{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	return dst
}

type innerFabricNetworkApplicationQueryResultItem struct {
	ApplicationName *uint16
	Reserved        unsafe.Pointer
}

func (obj *innerFabricNetworkApplicationQueryResultItem) toGoStruct() (dst *FabricNetworkApplicationQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkApplicationQueryResultItem{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	return
}

type innerFabricNetworkApplicationQueryResultList struct {
	Count uint32
	Items *innerFabricNetworkApplicationQueryResultItem
}

func (obj *innerFabricNetworkApplicationQueryResultList) toGoStruct() []FabricNetworkApplicationQueryResultItem {
	var dst []FabricNetworkApplicationQueryResultItem
	{
		var innerlst []innerFabricNetworkApplicationQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNetworkApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricNetworkNodeQueryDescription struct {
	NetworkName       string
	NodeNameFilter    string
	PagingDescription *FabricQueryPagingDescription
}

func (obj *FabricNetworkNodeQueryDescription) toInnerStruct() *innerFabricNetworkNodeQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkNodeQueryDescription{}
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	dst.NodeNameFilter = utf16PtrFromString(obj.NodeNameFilter)
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricNetworkNodeQueryDescription struct {
	NetworkName       *uint16
	NodeNameFilter    *uint16
	PagingDescription *innerFabricQueryPagingDescription
	Reserved          unsafe.Pointer
}

func (obj *innerFabricNetworkNodeQueryDescription) toGoStruct() (dst *FabricNetworkNodeQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkNodeQueryDescription{}
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	dst.NodeNameFilter = utf16PtrToString(obj.NodeNameFilter)
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricNetworkNodeQueryResultItem struct {
	NodeName string
}

func (obj *FabricNetworkNodeQueryResultItem) toInnerStruct() *innerFabricNetworkNodeQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricNetworkNodeQueryResultItem{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	return dst
}

type innerFabricNetworkNodeQueryResultItem struct {
	NodeName *uint16
	Reserved unsafe.Pointer
}

func (obj *innerFabricNetworkNodeQueryResultItem) toGoStruct() (dst *FabricNetworkNodeQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricNetworkNodeQueryResultItem{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	return
}

type innerFabricNetworkNodeQueryResultList struct {
	Count uint32
	Items *innerFabricNetworkNodeQueryResultItem
}

func (obj *innerFabricNetworkNodeQueryResultList) toGoStruct() []FabricNetworkNodeQueryResultItem {
	var dst []FabricNetworkNodeQueryResultItem
	{
		var innerlst []innerFabricNetworkNodeQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricNetworkNodeQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricApplicationNetworkQueryDescription struct {
	ApplicationName   string
	PagingDescription *FabricQueryPagingDescription
}

func (obj *FabricApplicationNetworkQueryDescription) toInnerStruct() *innerFabricApplicationNetworkQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationNetworkQueryDescription{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricApplicationNetworkQueryDescription struct {
	ApplicationName   *uint16
	PagingDescription *innerFabricQueryPagingDescription
	Reserved          unsafe.Pointer
}

func (obj *innerFabricApplicationNetworkQueryDescription) toGoStruct() (dst *FabricApplicationNetworkQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationNetworkQueryDescription{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricApplicationNetworkQueryResultItem struct {
	NetworkName string
}

func (obj *FabricApplicationNetworkQueryResultItem) toInnerStruct() *innerFabricApplicationNetworkQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricApplicationNetworkQueryResultItem{}
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	return dst
}

type innerFabricApplicationNetworkQueryResultItem struct {
	NetworkName *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricApplicationNetworkQueryResultItem) toGoStruct() (dst *FabricApplicationNetworkQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricApplicationNetworkQueryResultItem{}
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	return
}

type innerFabricApplicationNetworkQueryResultList struct {
	Count uint32
	Items *innerFabricApplicationNetworkQueryResultItem
}

func (obj *innerFabricApplicationNetworkQueryResultList) toGoStruct() []FabricApplicationNetworkQueryResultItem {
	var dst []FabricApplicationNetworkQueryResultItem
	{
		var innerlst []innerFabricApplicationNetworkQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricApplicationNetworkQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedNetworkQueryDescription struct {
	NodeName          string
	PagingDescription *FabricQueryPagingDescription
}

func (obj *FabricDeployedNetworkQueryDescription) toInnerStruct() *innerFabricDeployedNetworkQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedNetworkQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricDeployedNetworkQueryDescription struct {
	NodeName          *uint16
	PagingDescription *innerFabricQueryPagingDescription
	Reserved          unsafe.Pointer
}

func (obj *innerFabricDeployedNetworkQueryDescription) toGoStruct() (dst *FabricDeployedNetworkQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedNetworkQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricDeployedNetworkQueryResultItem struct {
	NetworkName string
}

func (obj *FabricDeployedNetworkQueryResultItem) toInnerStruct() *innerFabricDeployedNetworkQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedNetworkQueryResultItem{}
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	return dst
}

type innerFabricDeployedNetworkQueryResultItem struct {
	NetworkName *uint16
	Reserved    unsafe.Pointer
}

func (obj *innerFabricDeployedNetworkQueryResultItem) toGoStruct() (dst *FabricDeployedNetworkQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedNetworkQueryResultItem{}
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	return
}

type innerFabricDeployedNetworkQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedNetworkQueryResultItem
}

func (obj *innerFabricDeployedNetworkQueryResultList) toGoStruct() []FabricDeployedNetworkQueryResultItem {
	var dst []FabricDeployedNetworkQueryResultItem
	{
		var innerlst []innerFabricDeployedNetworkQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedNetworkQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}

type FabricDeployedNetworkCodePackageQueryDescription struct {
	NodeName                  string
	NetworkName               string
	ApplicationNameFilter     string
	ServiceManifestNameFilter string
	CodePackageNameFilter     string
	PagingDescription         *FabricQueryPagingDescription
}

func (obj *FabricDeployedNetworkCodePackageQueryDescription) toInnerStruct() *innerFabricDeployedNetworkCodePackageQueryDescription {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedNetworkCodePackageQueryDescription{}
	dst.NodeName = utf16PtrFromString(obj.NodeName)
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	dst.ApplicationNameFilter = utf16PtrFromString(obj.ApplicationNameFilter)
	dst.ServiceManifestNameFilter = utf16PtrFromString(obj.ServiceManifestNameFilter)
	dst.CodePackageNameFilter = utf16PtrFromString(obj.CodePackageNameFilter)
	dst.PagingDescription = obj.PagingDescription.toInnerStruct()
	return dst
}

type innerFabricDeployedNetworkCodePackageQueryDescription struct {
	NodeName                  *uint16
	NetworkName               *uint16
	ApplicationNameFilter     *uint16
	ServiceManifestNameFilter *uint16
	CodePackageNameFilter     *uint16
	PagingDescription         *innerFabricQueryPagingDescription
	Reserved                  unsafe.Pointer
}

func (obj *innerFabricDeployedNetworkCodePackageQueryDescription) toGoStruct() (dst *FabricDeployedNetworkCodePackageQueryDescription) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedNetworkCodePackageQueryDescription{}
	dst.NodeName = utf16PtrToString(obj.NodeName)
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	dst.ApplicationNameFilter = utf16PtrToString(obj.ApplicationNameFilter)
	dst.ServiceManifestNameFilter = utf16PtrToString(obj.ServiceManifestNameFilter)
	dst.CodePackageNameFilter = utf16PtrToString(obj.CodePackageNameFilter)
	dst.PagingDescription = obj.PagingDescription.toGoStruct()
	return
}

type FabricDeployedNetworkCodePackageQueryResultItem struct {
	ApplicationName            string
	NetworkName                string
	CodePackageName            string
	CodePackageVersion         string
	ServiceManifestName        string
	ServicePackageActivationId string
	ContainerAddress           string
	ContainerId                string
}

func (obj *FabricDeployedNetworkCodePackageQueryResultItem) toInnerStruct() *innerFabricDeployedNetworkCodePackageQueryResultItem {
	if obj == nil {
		return nil
	}
	dst := &innerFabricDeployedNetworkCodePackageQueryResultItem{}
	dst.ApplicationName = utf16PtrFromString(obj.ApplicationName)
	dst.NetworkName = utf16PtrFromString(obj.NetworkName)
	dst.CodePackageName = utf16PtrFromString(obj.CodePackageName)
	dst.CodePackageVersion = utf16PtrFromString(obj.CodePackageVersion)
	dst.ServiceManifestName = utf16PtrFromString(obj.ServiceManifestName)
	dst.ServicePackageActivationId = utf16PtrFromString(obj.ServicePackageActivationId)
	dst.ContainerAddress = utf16PtrFromString(obj.ContainerAddress)
	dst.ContainerId = utf16PtrFromString(obj.ContainerId)
	return dst
}

type innerFabricDeployedNetworkCodePackageQueryResultItem struct {
	ApplicationName            *uint16
	NetworkName                *uint16
	CodePackageName            *uint16
	CodePackageVersion         *uint16
	ServiceManifestName        *uint16
	ServicePackageActivationId *uint16
	ContainerAddress           *uint16
	ContainerId                *uint16
	Reserved                   unsafe.Pointer
}

func (obj *innerFabricDeployedNetworkCodePackageQueryResultItem) toGoStruct() (dst *FabricDeployedNetworkCodePackageQueryResultItem) {
	if obj == nil {
		return
	}
	dst = &FabricDeployedNetworkCodePackageQueryResultItem{}
	dst.ApplicationName = utf16PtrToString(obj.ApplicationName)
	dst.NetworkName = utf16PtrToString(obj.NetworkName)
	dst.CodePackageName = utf16PtrToString(obj.CodePackageName)
	dst.CodePackageVersion = utf16PtrToString(obj.CodePackageVersion)
	dst.ServiceManifestName = utf16PtrToString(obj.ServiceManifestName)
	dst.ServicePackageActivationId = utf16PtrToString(obj.ServicePackageActivationId)
	dst.ContainerAddress = utf16PtrToString(obj.ContainerAddress)
	dst.ContainerId = utf16PtrToString(obj.ContainerId)
	return
}

type innerFabricDeployedNetworkCodePackageQueryResultList struct {
	Count uint32
	Items *innerFabricDeployedNetworkCodePackageQueryResultItem
}

func (obj *innerFabricDeployedNetworkCodePackageQueryResultList) toGoStruct() []FabricDeployedNetworkCodePackageQueryResultItem {
	var dst []FabricDeployedNetworkCodePackageQueryResultItem
	{
		var innerlst []innerFabricDeployedNetworkCodePackageQueryResultItem
		sliceCast(unsafe.Pointer(&innerlst), unsafe.Pointer(obj.Items), int(obj.Count))

		for _, item := range innerlst {
			var tmpitem FabricDeployedNetworkCodePackageQueryResultItem

			tmpitem = *item.toGoStruct()

			dst = append(dst, tmpitem)
		}

	}
	return dst
}
