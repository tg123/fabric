// Code generated by "go run github.com/tg123/fabric/mkidl"; DO NOT EDIT.
package fabric

import (
	"context"
	"github.com/go-ole/go-ole"
	"golang.org/x/sys/windows"
	"reflect"
	"syscall"
	"time"
	"unsafe"
)

func (c *FabricClient) CreateFabricRuntime() (*ComFabricRuntime, error) {
	var com *ComFabricRuntime
	err := c.createComObject("{cc53af8e-74cd-11df-ac3e-0024811e3892}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

type ComFabricRuntime struct {
	ole.IUnknown
}

type comFabricRuntimeVtbl struct {
	ole.IUnknownVtbl
	BeginRegisterStatelessServiceFactory uintptr
	EndRegisterStatelessServiceFactory   uintptr
	RegisterStatelessServiceFactory      uintptr
	BeginRegisterStatefulServiceFactory  uintptr
	EndRegisterStatefulServiceFactory    uintptr
	RegisterStatefulServiceFactory       uintptr
	CreateServiceGroupFactoryBuilder     uintptr
	BeginRegisterServiceGroupFactory     uintptr
	EndRegisterServiceGroupFactory       uintptr
	RegisterServiceGroupFactory          uintptr
}

func (v *ComFabricRuntime) vtable() *comFabricRuntimeVtbl {
	return (*comFabricRuntimeVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricRuntime) beginRegisterStatelessServiceFactory(
	serviceTypeName string,
	factory *ComFabricStatelessServiceFactory,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_1, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_0 = s_1

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRegisterStatelessServiceFactory,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRuntime) RegisterStatelessServiceFactory(
	serviceTypeName string,
	factory *ComFabricStatelessServiceFactory,
) (err error) {
	var p_0 *uint16
	s_2, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_0 = s_2

	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterStatelessServiceFactory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRuntime) beginRegisterStatefulServiceFactory(
	serviceTypeName string,
	factory *ComFabricStatefulServiceFactory,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_3, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_0 = s_3

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRegisterStatefulServiceFactory,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRuntime) RegisterStatefulServiceFactory(
	serviceTypeName string,
	factory *ComFabricStatefulServiceFactory,
) (err error) {
	var p_0 *uint16
	s_4, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_0 = s_4

	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterStatefulServiceFactory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRuntime) CreateServiceGroupFactoryBuilder() (builder *ComFabricServiceGroupFactoryBuilder, err error) {
	var p_0 *ComFabricServiceGroupFactoryBuilder
	defer func() {
		builder = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().CreateServiceGroupFactoryBuilder,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRuntime) beginRegisterServiceGroupFactory(
	groupServiceType string,
	factory *ComFabricServiceGroupFactory,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_5, _ := windows.UTF16PtrFromString(groupServiceType)
	p_0 = s_5

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRegisterServiceGroupFactory,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRuntime) RegisterServiceGroupFactory(
	groupServiceType string,
	factory *ComFabricServiceGroupFactory,
) (err error) {
	var p_0 *uint16
	s_6, _ := windows.UTF16PtrFromString(groupServiceType)
	p_0 = s_6

	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterServiceGroupFactory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatelessServiceFactory struct {
	ole.IUnknown
}

type comFabricStatelessServiceFactoryVtbl struct {
	ole.IUnknownVtbl
	CreateInstance uintptr
}

func (v *ComFabricStatelessServiceFactory) vtable() *comFabricStatelessServiceFactoryVtbl {
	return (*comFabricStatelessServiceFactoryVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatelessServiceFactory) CreateInstance(
	serviceTypeName string,
	serviceName string,
	initializationDataLength uint32,
	initializationData *byte,
	partitionId windows.GUID,
	instanceId int64,
) (serviceInstance *ComFabricStatelessServiceInstance, err error) {
	var p_0 *uint16
	s_7, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_0 = s_7

	var p_1 *uint16
	s_8, _ := windows.UTF16PtrFromString(serviceName)
	p_1 = s_8

	var p_6 *ComFabricStatelessServiceInstance
	defer func() {
		serviceInstance = p_6
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().CreateInstance,
		8,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(initializationDataLength),
		uintptr(unsafe.Pointer(initializationData)),
		uintptr(unsafe.Pointer(&partitionId)),
		uintptr(instanceId),
		uintptr(unsafe.Pointer(&p_6)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatelessServiceInstance struct {
	ole.IUnknown
}

type comFabricStatelessServiceInstanceVtbl struct {
	ole.IUnknownVtbl
	BeginOpen  uintptr
	EndOpen    uintptr
	BeginClose uintptr
	EndClose   uintptr
	Abort      uintptr
}

func (v *ComFabricStatelessServiceInstance) vtable() *comFabricStatelessServiceInstanceVtbl {
	return (*comFabricStatelessServiceInstanceVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatelessServiceInstance) beginOpen(
	partition *ComFabricStatelessServicePartition,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginOpen,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(partition)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServiceInstance) beginClose(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginClose,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServiceInstance) endClose(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndClose,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServiceInstance) Abort() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().Abort,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricStatelessServiceInstance) Close(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endClose(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginClose(
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricStatelessServicePartition struct {
	ole.IUnknown
}

type comFabricStatelessServicePartitionVtbl struct {
	ole.IUnknownVtbl
	GetPartitionInfo uintptr
	ReportLoad       uintptr
	ReportFault      uintptr
}

func (v *ComFabricStatelessServicePartition) vtable() *comFabricStatelessServicePartitionVtbl {
	return (*comFabricStatelessServicePartitionVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatelessServicePartition) GetPartitionInfo() (bufferedValue *FabricServicePartitionInformation, err error) {
	var p_0 *innerFabricServicePartitionInformation
	defer func() {
		bufferedValue = p_0.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetPartitionInfo,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServicePartition) ReportLoad(
	metricCount uint32,
	metrics *FabricLoadMetric,
) (err error) {
	var p_1 *innerFabricLoadMetric
	p_1 = metrics.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportLoad,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(metricCount),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServicePartition) ReportFault(
	faultType FabricFaultType,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportFault,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(faultType),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatelessServicePartition1 struct {
	ComFabricStatelessServicePartition
}

type comFabricStatelessServicePartition1Vtbl struct {
	comFabricStatelessServicePartitionVtbl
	ReportMoveCost uintptr
}

func (v *ComFabricStatelessServicePartition1) vtable() *comFabricStatelessServicePartition1Vtbl {
	return (*comFabricStatelessServicePartition1Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatelessServicePartition1) ReportMoveCost(
	moveCost FabricMoveCost,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportMoveCost,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(moveCost),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatelessServicePartition2 struct {
	ComFabricStatelessServicePartition1
}

type comFabricStatelessServicePartition2Vtbl struct {
	comFabricStatelessServicePartition1Vtbl
	ReportInstanceHealth  uintptr
	ReportPartitionHealth uintptr
}

func (v *ComFabricStatelessServicePartition2) vtable() *comFabricStatelessServicePartition2Vtbl {
	return (*comFabricStatelessServicePartition2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatelessServicePartition2) ReportInstanceHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportInstanceHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServicePartition2) ReportPartitionHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportPartitionHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatelessServicePartition3 struct {
	ComFabricStatelessServicePartition2
}

type comFabricStatelessServicePartition3Vtbl struct {
	comFabricStatelessServicePartition2Vtbl
	ReportInstanceHealth2  uintptr
	ReportPartitionHealth2 uintptr
}

func (v *ComFabricStatelessServicePartition3) vtable() *comFabricStatelessServicePartition3Vtbl {
	return (*comFabricStatelessServicePartition3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatelessServicePartition3) ReportInstanceHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportInstanceHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatelessServicePartition3) ReportPartitionHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportPartitionHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatefulServiceFactory struct {
	ole.IUnknown
}

type comFabricStatefulServiceFactoryVtbl struct {
	ole.IUnknownVtbl
	CreateReplica uintptr
}

func (v *ComFabricStatefulServiceFactory) vtable() *comFabricStatefulServiceFactoryVtbl {
	return (*comFabricStatefulServiceFactoryVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatefulServiceFactory) CreateReplica(
	serviceTypeName string,
	serviceName string,
	initializationDataLength uint32,
	initializationData *byte,
	partitionId windows.GUID,
	replicaId int64,
) (serviceReplica *ComFabricStatefulServiceReplica, err error) {
	var p_0 *uint16
	s_9, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_0 = s_9

	var p_1 *uint16
	s_10, _ := windows.UTF16PtrFromString(serviceName)
	p_1 = s_10

	var p_6 *ComFabricStatefulServiceReplica
	defer func() {
		serviceReplica = p_6
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().CreateReplica,
		8,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(initializationDataLength),
		uintptr(unsafe.Pointer(initializationData)),
		uintptr(unsafe.Pointer(&partitionId)),
		uintptr(replicaId),
		uintptr(unsafe.Pointer(&p_6)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatefulServiceReplica struct {
	ole.IUnknown
}

type comFabricStatefulServiceReplicaVtbl struct {
	ole.IUnknownVtbl
	BeginOpen       uintptr
	EndOpen         uintptr
	BeginChangeRole uintptr
	EndChangeRole   uintptr
	BeginClose      uintptr
	EndClose        uintptr
	Abort           uintptr
}

func (v *ComFabricStatefulServiceReplica) vtable() *comFabricStatefulServiceReplicaVtbl {
	return (*comFabricStatefulServiceReplicaVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatefulServiceReplica) beginOpen(
	openMode FabricReplicaOpenMode,
	partition *ComFabricStatefulServicePartition,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginOpen,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(openMode),
		uintptr(unsafe.Pointer(partition)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServiceReplica) beginChangeRole(
	newRole FabricReplicaRole,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginChangeRole,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(newRole),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServiceReplica) endChangeRole(
	context *comIFabricAsyncOperationContext,
) (serviceAddress *ComFabricStringResult, err error) {
	var p_1 *ComFabricStringResult
	defer func() {
		serviceAddress = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndChangeRole,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServiceReplica) beginClose(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginClose,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServiceReplica) endClose(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndClose,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServiceReplica) Abort() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().Abort,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricStatefulServiceReplica) ChangeRole(
	ctx context.Context,
	newRole FabricReplicaRole,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endChangeRole(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginChangeRole(
		newRole,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricStatefulServiceReplica) Close(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endClose(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginClose(
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricStatefulServicePartition struct {
	ole.IUnknown
}

type comFabricStatefulServicePartitionVtbl struct {
	ole.IUnknownVtbl
	GetPartitionInfo uintptr
	GetReadStatus    uintptr
	GetWriteStatus   uintptr
	CreateReplicator uintptr
	ReportLoad       uintptr
	ReportFault      uintptr
}

func (v *ComFabricStatefulServicePartition) vtable() *comFabricStatefulServicePartitionVtbl {
	return (*comFabricStatefulServicePartitionVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatefulServicePartition) GetPartitionInfo() (bufferedValue *FabricServicePartitionInformation, err error) {
	var p_0 *innerFabricServicePartitionInformation
	defer func() {
		bufferedValue = p_0.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetPartitionInfo,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition) GetReadStatus() (readStatus FabricServicePartitionAccessStatus, err error) {
	var p_0 FabricServicePartitionAccessStatus
	defer func() {
		readStatus = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetReadStatus,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition) GetWriteStatus() (writeStatus FabricServicePartitionAccessStatus, err error) {
	var p_0 FabricServicePartitionAccessStatus
	defer func() {
		writeStatus = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetWriteStatus,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition) CreateReplicator(
	stateProvider *ComFabricStateProvider,
	replicatorSettings *FabricReplicatorSettings,
) (replicator *ComFabricReplicator, stateReplicator *ComFabricStateReplicator, err error) {
	var p_1 *innerFabricReplicatorSettings
	p_1 = replicatorSettings.toInnerStruct()
	var p_2 *ComFabricReplicator
	defer func() {
		replicator = p_2
	}()
	var p_3 *ComFabricStateReplicator
	defer func() {
		stateReplicator = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().CreateReplicator,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(stateProvider)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition) ReportLoad(
	metricCount uint32,
	metrics *FabricLoadMetric,
) (err error) {
	var p_1 *innerFabricLoadMetric
	p_1 = metrics.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportLoad,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(metricCount),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition) ReportFault(
	faultType FabricFaultType,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportFault,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(faultType),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatefulServicePartition1 struct {
	ComFabricStatefulServicePartition
}

type comFabricStatefulServicePartition1Vtbl struct {
	comFabricStatefulServicePartitionVtbl
	ReportMoveCost uintptr
}

func (v *ComFabricStatefulServicePartition1) vtable() *comFabricStatefulServicePartition1Vtbl {
	return (*comFabricStatefulServicePartition1Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatefulServicePartition1) ReportMoveCost(
	moveCost FabricMoveCost,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportMoveCost,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(moveCost),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatefulServicePartition2 struct {
	ComFabricStatefulServicePartition1
}

type comFabricStatefulServicePartition2Vtbl struct {
	comFabricStatefulServicePartition1Vtbl
	ReportReplicaHealth   uintptr
	ReportPartitionHealth uintptr
}

func (v *ComFabricStatefulServicePartition2) vtable() *comFabricStatefulServicePartition2Vtbl {
	return (*comFabricStatefulServicePartition2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatefulServicePartition2) ReportReplicaHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportReplicaHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition2) ReportPartitionHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportPartitionHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStatefulServicePartition3 struct {
	ComFabricStatefulServicePartition2
}

type comFabricStatefulServicePartition3Vtbl struct {
	comFabricStatefulServicePartition2Vtbl
	ReportReplicaHealth2   uintptr
	ReportPartitionHealth2 uintptr
}

func (v *ComFabricStatefulServicePartition3) vtable() *comFabricStatefulServicePartition3Vtbl {
	return (*comFabricStatefulServicePartition3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStatefulServicePartition3) ReportReplicaHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportReplicaHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStatefulServicePartition3) ReportPartitionHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportPartitionHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStateReplicator struct {
	ole.IUnknown
}

type comFabricStateReplicatorVtbl struct {
	ole.IUnknownVtbl
	BeginReplicate           uintptr
	EndReplicate             uintptr
	GetReplicationStream     uintptr
	GetCopyStream            uintptr
	UpdateReplicatorSettings uintptr
}

func (v *ComFabricStateReplicator) vtable() *comFabricStateReplicatorVtbl {
	return (*comFabricStateReplicatorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStateReplicator) beginReplicate(
	operationData *ComFabricOperationData,
	callback *comIFabricAsyncOperationCallback,
) (sequenceNumber int64, context *comIFabricAsyncOperationContext, err error) {
	var p_2 int64
	defer func() {
		sequenceNumber = p_2
	}()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginReplicate,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(operationData)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateReplicator) endReplicate(
	context *comIFabricAsyncOperationContext,
) (sequenceNumber int64, err error) {
	var p_1 int64
	defer func() {
		sequenceNumber = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndReplicate,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateReplicator) GetReplicationStream() (stream *ComFabricOperationStream, err error) {
	var p_0 *ComFabricOperationStream
	defer func() {
		stream = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetReplicationStream,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateReplicator) GetCopyStream() (stream *ComFabricOperationStream, err error) {
	var p_0 *ComFabricOperationStream
	defer func() {
		stream = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCopyStream,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateReplicator) UpdateReplicatorSettings(
	replicatorSettings *FabricReplicatorSettings,
) (err error) {
	var p_0 *innerFabricReplicatorSettings
	p_0 = replicatorSettings.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().UpdateReplicatorSettings,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateReplicator) Replicate(
	ctx context.Context,
	operationData *ComFabricOperationData,
	sequenceNumber *int64,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endReplicate(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	_, sfctx, err := v.beginReplicate(
		operationData,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricStateReplicator2 struct {
	ComFabricStateReplicator
}

type comFabricStateReplicator2Vtbl struct {
	comFabricStateReplicatorVtbl
	GetReplicatorSettings uintptr
}

func (v *ComFabricStateReplicator2) vtable() *comFabricStateReplicator2Vtbl {
	return (*comFabricStateReplicator2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStateReplicator2) GetReplicatorSettings() (replicatorSettings *ComFabricReplicatorSettingsResult, err error) {
	var p_0 *ComFabricReplicatorSettingsResult
	defer func() {
		replicatorSettings = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetReplicatorSettings,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricStateProvider struct {
	ole.IUnknown
}

type comFabricStateProviderVtbl struct {
	ole.IUnknownVtbl
	BeginUpdateEpoch               uintptr
	EndUpdateEpoch                 uintptr
	GetLastCommittedSequenceNumber uintptr
	BeginOnDataLoss                uintptr
	EndOnDataLoss                  uintptr
	GetCopyContext                 uintptr
	GetCopyState                   uintptr
}

func (v *ComFabricStateProvider) vtable() *comFabricStateProviderVtbl {
	return (*comFabricStateProviderVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStateProvider) beginUpdateEpoch(
	epoch *FabricEpoch,
	previousEpochLastSequenceNumber int64,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricEpoch
	p_0 = epoch.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateEpoch,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(previousEpochLastSequenceNumber),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) endUpdateEpoch(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateEpoch,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) GetLastCommittedSequenceNumber() (sequenceNumber int64, err error) {
	var p_0 int64
	defer func() {
		sequenceNumber = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetLastCommittedSequenceNumber,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) beginOnDataLoss(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginOnDataLoss,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) endOnDataLoss(
	context *comIFabricAsyncOperationContext,
) (isStateChanged bool, err error) {
	var p_1 bool
	defer func() {
		isStateChanged = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndOnDataLoss,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) GetCopyContext() (copyContextStream *ComFabricOperationDataStream, err error) {
	var p_0 *ComFabricOperationDataStream
	defer func() {
		copyContextStream = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCopyContext,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) GetCopyState(
	uptoSequenceNumber int64,
	copyContextStream *ComFabricOperationDataStream,
) (copyStateStream *ComFabricOperationDataStream, err error) {
	var p_2 *ComFabricOperationDataStream
	defer func() {
		copyStateStream = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().GetCopyState,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(uptoSequenceNumber),
		uintptr(unsafe.Pointer(copyContextStream)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStateProvider) UpdateEpoch(
	ctx context.Context,
	epoch *FabricEpoch,
	previousEpochLastSequenceNumber int64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateEpoch(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateEpoch(
		epoch,
		previousEpochLastSequenceNumber,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricStateProvider) OnDataLoss(
	ctx context.Context,
) (result_0 bool, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endOnDataLoss(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginOnDataLoss(
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricOperation struct {
	ole.IUnknown
}

type comFabricOperationVtbl struct {
	ole.IUnknownVtbl
	get_Metadata uintptr
	GetData      uintptr
	Acknowledge  uintptr
}

func (v *ComFabricOperation) vtable() *comFabricOperationVtbl {
	return (*comFabricOperationVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricOperation) GetMetadata() (rt *FabricOperationMetadata, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Metadata,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricOperationMetadata)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricOperation) GetData() (count uint32, buffers *FabricOperationDataBuffer, err error) {
	var p_0 uint32
	defer func() {
		count = p_0
	}()
	var p_1 *innerFabricOperationDataBuffer
	defer func() {
		buffers = p_1.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetData,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricOperation) Acknowledge() (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().Acknowledge,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricOperationData struct {
	ole.IUnknown
}

type comFabricOperationDataVtbl struct {
	ole.IUnknownVtbl
	GetData uintptr
}

func (v *ComFabricOperationData) vtable() *comFabricOperationDataVtbl {
	return (*comFabricOperationDataVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricOperationData) GetData() (count uint32, buffers *FabricOperationDataBuffer, err error) {
	var p_0 uint32
	defer func() {
		count = p_0
	}()
	var p_1 *innerFabricOperationDataBuffer
	defer func() {
		buffers = p_1.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetData,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricOperationStream struct {
	ole.IUnknown
}

type comFabricOperationStreamVtbl struct {
	ole.IUnknownVtbl
	BeginGetOperation uintptr
	EndGetOperation   uintptr
}

func (v *ComFabricOperationStream) vtable() *comFabricOperationStreamVtbl {
	return (*comFabricOperationStreamVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricOperationStream) beginGetOperation(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginGetOperation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricOperationStream2 struct {
	ComFabricOperationStream
}

type comFabricOperationStream2Vtbl struct {
	comFabricOperationStreamVtbl
	ReportFault uintptr
}

func (v *ComFabricOperationStream2) vtable() *comFabricOperationStream2Vtbl {
	return (*comFabricOperationStream2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricOperationStream2) ReportFault(
	faultType FabricFaultType,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportFault,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(faultType),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricOperationDataStream struct {
	ole.IUnknown
}

type comFabricOperationDataStreamVtbl struct {
	ole.IUnknownVtbl
	BeginGetNext uintptr
	EndGetNext   uintptr
}

func (v *ComFabricOperationDataStream) vtable() *comFabricOperationDataStreamVtbl {
	return (*comFabricOperationDataStreamVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricOperationDataStream) beginGetNext(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginGetNext,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricReplicator struct {
	ole.IUnknown
}

type comFabricReplicatorVtbl struct {
	ole.IUnknownVtbl
	BeginOpen            uintptr
	EndOpen              uintptr
	BeginChangeRole      uintptr
	EndChangeRole        uintptr
	BeginUpdateEpoch     uintptr
	EndUpdateEpoch       uintptr
	BeginClose           uintptr
	EndClose             uintptr
	Abort                uintptr
	GetCurrentProgress   uintptr
	GetCatchUpCapability uintptr
}

func (v *ComFabricReplicator) vtable() *comFabricReplicatorVtbl {
	return (*comFabricReplicatorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricReplicator) beginOpen(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginOpen,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) beginChangeRole(
	epoch *FabricEpoch,
	role FabricReplicaRole,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricEpoch
	p_0 = epoch.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginChangeRole,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(role),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) endChangeRole(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndChangeRole,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) beginUpdateEpoch(
	epoch *FabricEpoch,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricEpoch
	p_0 = epoch.toInnerStruct()
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateEpoch,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) endUpdateEpoch(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateEpoch,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) beginClose(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginClose,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) endClose(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndClose,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) Abort() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().Abort,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricReplicator) GetCurrentProgress() (lastSequenceNumber int64, err error) {
	var p_0 int64
	defer func() {
		lastSequenceNumber = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCurrentProgress,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) GetCatchUpCapability() (fromSequenceNumber int64, err error) {
	var p_0 int64
	defer func() {
		fromSequenceNumber = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCatchUpCapability,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricReplicator) ChangeRole(
	ctx context.Context,
	epoch *FabricEpoch,
	role FabricReplicaRole,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endChangeRole(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginChangeRole(
		epoch,
		role,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricReplicator) UpdateEpoch(
	ctx context.Context,
	epoch *FabricEpoch,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateEpoch(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateEpoch(
		epoch,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricReplicator) Close(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endClose(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginClose(
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricPrimaryReplicator struct {
	ComFabricReplicator
}

type comFabricPrimaryReplicatorVtbl struct {
	comFabricReplicatorVtbl
	BeginOnDataLoss                      uintptr
	EndOnDataLoss                        uintptr
	UpdateCatchUpReplicaSetConfiguration uintptr
	BeginWaitForCatchUpQuorum            uintptr
	EndWaitForCatchUpQuorum              uintptr
	UpdateCurrentReplicaSetConfiguration uintptr
	BeginBuildReplica                    uintptr
	EndBuildReplica                      uintptr
	RemoveReplica                        uintptr
}

func (v *ComFabricPrimaryReplicator) vtable() *comFabricPrimaryReplicatorVtbl {
	return (*comFabricPrimaryReplicatorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricPrimaryReplicator) beginOnDataLoss(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginOnDataLoss,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) endOnDataLoss(
	context *comIFabricAsyncOperationContext,
) (isStateChanged bool, err error) {
	var p_1 bool
	defer func() {
		isStateChanged = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndOnDataLoss,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) UpdateCatchUpReplicaSetConfiguration(
	currentConfiguration *FabricReplicaSetConfiguration,
	previousConfiguration *FabricReplicaSetConfiguration,
) (err error) {
	var p_0 *innerFabricReplicaSetConfiguration
	p_0 = currentConfiguration.toInnerStruct()
	var p_1 *innerFabricReplicaSetConfiguration
	p_1 = previousConfiguration.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().UpdateCatchUpReplicaSetConfiguration,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) beginWaitForCatchUpQuorum(
	catchUpMode FabricReplicaSetQuorumMode,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginWaitForCatchUpQuorum,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(catchUpMode),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) endWaitForCatchUpQuorum(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndWaitForCatchUpQuorum,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) UpdateCurrentReplicaSetConfiguration(
	currentConfiguration *FabricReplicaSetConfiguration,
) (err error) {
	var p_0 *innerFabricReplicaSetConfiguration
	p_0 = currentConfiguration.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().UpdateCurrentReplicaSetConfiguration,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) beginBuildReplica(
	replica *FabricReplicaInformation,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricReplicaInformation
	p_0 = replica.toInnerStruct()
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginBuildReplica,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) endBuildReplica(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndBuildReplica,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) RemoveReplica(
	replicaId int64,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().RemoveReplica,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(replicaId),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPrimaryReplicator) OnDataLoss(
	ctx context.Context,
) (result_0 bool, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endOnDataLoss(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginOnDataLoss(
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricPrimaryReplicator) WaitForCatchUpQuorum(
	ctx context.Context,
	catchUpMode FabricReplicaSetQuorumMode,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endWaitForCatchUpQuorum(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginWaitForCatchUpQuorum(
		catchUpMode,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricPrimaryReplicator) BuildReplica(
	ctx context.Context,
	replica *FabricReplicaInformation,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endBuildReplica(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginBuildReplica(
		replica,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricReplicatorCatchupSpecificQuorum struct {
	ole.IUnknown
}

type comFabricReplicatorCatchupSpecificQuorumVtbl struct {
	ole.IUnknownVtbl
}

func (v *ComFabricReplicatorCatchupSpecificQuorum) vtable() *comFabricReplicatorCatchupSpecificQuorumVtbl {
	return (*comFabricReplicatorCatchupSpecificQuorumVtbl)(unsafe.Pointer(v.RawVTable))
}

type ComFabricAtomicGroupStateReplicator struct {
	ole.IUnknown
}

type comFabricAtomicGroupStateReplicatorVtbl struct {
	ole.IUnknownVtbl
	CreateAtomicGroup                  uintptr
	BeginReplicateAtomicGroupOperation uintptr
	EndReplicateAtomicGroupOperation   uintptr
	BeginReplicateAtomicGroupCommit    uintptr
	EndReplicateAtomicGroupCommit      uintptr
	BeginReplicateAtomicGroupRollback  uintptr
	EndReplicateAtomicGroupRollback    uintptr
}

func (v *ComFabricAtomicGroupStateReplicator) vtable() *comFabricAtomicGroupStateReplicatorVtbl {
	return (*comFabricAtomicGroupStateReplicatorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricAtomicGroupStateReplicator) CreateAtomicGroup() (AtomicGroupId int64, err error) {
	var p_0 int64
	defer func() {
		AtomicGroupId = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().CreateAtomicGroup,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) beginReplicateAtomicGroupOperation(
	atomicGroupId int64,
	operationData *ComFabricOperationData,
	callback *comIFabricAsyncOperationCallback,
) (operationSequenceNumber int64, context *comIFabricAsyncOperationContext, err error) {
	var p_3 int64
	defer func() {
		operationSequenceNumber = p_3
	}()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginReplicateAtomicGroupOperation,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(atomicGroupId),
		uintptr(unsafe.Pointer(operationData)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) endReplicateAtomicGroupOperation(
	context *comIFabricAsyncOperationContext,
) (operationSequenceNumber int64, err error) {
	var p_1 int64
	defer func() {
		operationSequenceNumber = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndReplicateAtomicGroupOperation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) beginReplicateAtomicGroupCommit(
	atomicGroupId int64,
	callback *comIFabricAsyncOperationCallback,
) (commitSequenceNumber int64, context *comIFabricAsyncOperationContext, err error) {
	var p_2 int64
	defer func() {
		commitSequenceNumber = p_2
	}()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginReplicateAtomicGroupCommit,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(atomicGroupId),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) endReplicateAtomicGroupCommit(
	context *comIFabricAsyncOperationContext,
) (commitSequenceNumber int64, err error) {
	var p_1 int64
	defer func() {
		commitSequenceNumber = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndReplicateAtomicGroupCommit,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) beginReplicateAtomicGroupRollback(
	atomicGroupId int64,
	callback *comIFabricAsyncOperationCallback,
) (rollbackSequenceNumber int64, context *comIFabricAsyncOperationContext, err error) {
	var p_2 int64
	defer func() {
		rollbackSequenceNumber = p_2
	}()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginReplicateAtomicGroupRollback,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(atomicGroupId),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) endReplicateAtomicGroupRollback(
	context *comIFabricAsyncOperationContext,
) (rollbackSequenceNumber int64, err error) {
	var p_1 int64
	defer func() {
		rollbackSequenceNumber = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndReplicateAtomicGroupRollback,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateReplicator) ReplicateAtomicGroupOperation(
	ctx context.Context,
	atomicGroupId int64,
	operationData *ComFabricOperationData,
	operationSequenceNumber *int64,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endReplicateAtomicGroupOperation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	_, sfctx, err := v.beginReplicateAtomicGroupOperation(
		atomicGroupId,
		operationData,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricAtomicGroupStateReplicator) ReplicateAtomicGroupCommit(
	ctx context.Context,
	atomicGroupId int64,
	commitSequenceNumber *int64,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endReplicateAtomicGroupCommit(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	_, sfctx, err := v.beginReplicateAtomicGroupCommit(
		atomicGroupId,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricAtomicGroupStateReplicator) ReplicateAtomicGroupRollback(
	ctx context.Context,
	atomicGroupId int64,
	rollbackSequenceNumber *int64,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endReplicateAtomicGroupRollback(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	_, sfctx, err := v.beginReplicateAtomicGroupRollback(
		atomicGroupId,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricAtomicGroupStateProvider struct {
	ole.IUnknown
}

type comFabricAtomicGroupStateProviderVtbl struct {
	ole.IUnknownVtbl
	BeginAtomicGroupCommit   uintptr
	EndAtomicGroupCommit     uintptr
	BeginAtomicGroupRollback uintptr
	EndAtomicGroupRollback   uintptr
	BeginUndoProgress        uintptr
	EndUndoProgress          uintptr
}

func (v *ComFabricAtomicGroupStateProvider) vtable() *comFabricAtomicGroupStateProviderVtbl {
	return (*comFabricAtomicGroupStateProviderVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricAtomicGroupStateProvider) beginAtomicGroupCommit(
	atomicGroupId int64,
	commitSequenceNumber int64,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginAtomicGroupCommit,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(atomicGroupId),
		uintptr(commitSequenceNumber),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateProvider) endAtomicGroupCommit(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndAtomicGroupCommit,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateProvider) beginAtomicGroupRollback(
	atomicGroupId int64,
	rollbackequenceNumber int64,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginAtomicGroupRollback,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(atomicGroupId),
		uintptr(rollbackequenceNumber),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateProvider) endAtomicGroupRollback(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndAtomicGroupRollback,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateProvider) beginUndoProgress(
	fromCommitSequenceNumber int64,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUndoProgress,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(fromCommitSequenceNumber),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateProvider) endUndoProgress(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUndoProgress,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricAtomicGroupStateProvider) AtomicGroupCommit(
	ctx context.Context,
	atomicGroupId int64,
	commitSequenceNumber int64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endAtomicGroupCommit(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginAtomicGroupCommit(
		atomicGroupId,
		commitSequenceNumber,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricAtomicGroupStateProvider) AtomicGroupRollback(
	ctx context.Context,
	atomicGroupId int64,
	rollbackequenceNumber int64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endAtomicGroupRollback(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginAtomicGroupRollback(
		atomicGroupId,
		rollbackequenceNumber,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricAtomicGroupStateProvider) UndoProgress(
	ctx context.Context,
	fromCommitSequenceNumber int64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUndoProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUndoProgress(
		fromCommitSequenceNumber,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceGroupFactory struct {
	ole.IUnknown
}

type comFabricServiceGroupFactoryVtbl struct {
	ole.IUnknownVtbl
}

func (v *ComFabricServiceGroupFactory) vtable() *comFabricServiceGroupFactoryVtbl {
	return (*comFabricServiceGroupFactoryVtbl)(unsafe.Pointer(v.RawVTable))
}

type ComFabricServiceGroupFactoryBuilder struct {
	ole.IUnknown
}

type comFabricServiceGroupFactoryBuilderVtbl struct {
	ole.IUnknownVtbl
	AddStatelessServiceFactory uintptr
	AddStatefulServiceFactory  uintptr
	RemoveServiceFactory       uintptr
	ToServiceGroupFactory      uintptr
}

func (v *ComFabricServiceGroupFactoryBuilder) vtable() *comFabricServiceGroupFactoryBuilderVtbl {
	return (*comFabricServiceGroupFactoryBuilderVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceGroupFactoryBuilder) AddStatelessServiceFactory(
	memberServiceType string,
	factory *ComFabricStatelessServiceFactory,
) (err error) {
	var p_0 *uint16
	s_11, _ := windows.UTF16PtrFromString(memberServiceType)
	p_0 = s_11

	hr, _, err1 := syscall.Syscall(
		v.vtable().AddStatelessServiceFactory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupFactoryBuilder) AddStatefulServiceFactory(
	memberServiceType string,
	factory *ComFabricStatefulServiceFactory,
) (err error) {
	var p_0 *uint16
	s_12, _ := windows.UTF16PtrFromString(memberServiceType)
	p_0 = s_12

	hr, _, err1 := syscall.Syscall(
		v.vtable().AddStatefulServiceFactory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(factory)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupFactoryBuilder) RemoveServiceFactory(
	memberServiceType string,
) (err error) {
	var p_0 *uint16
	s_13, _ := windows.UTF16PtrFromString(memberServiceType)
	p_0 = s_13

	hr, _, err1 := syscall.Syscall(
		v.vtable().RemoveServiceFactory,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupFactoryBuilder) ToServiceGroupFactory() (factory *ComFabricServiceGroupFactory, err error) {
	var p_0 *ComFabricServiceGroupFactory
	defer func() {
		factory = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ToServiceGroupFactory,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricServiceGroupPartition struct {
	ole.IUnknown
}

type comFabricServiceGroupPartitionVtbl struct {
	ole.IUnknownVtbl
	ResolveMember uintptr
}

func (v *ComFabricServiceGroupPartition) vtable() *comFabricServiceGroupPartitionVtbl {
	return (*comFabricServiceGroupPartitionVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceGroupPartition) ResolveMember(
	name string,
	riid windows.GUID,
) (member interface{}, err error) {
	var p_0 *uint16
	s_14, _ := windows.UTF16PtrFromString(name)
	p_0 = s_14

	var p_2 unsafe.Pointer
	defer func() {
		member = fromUnsafePointer(p_2)
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().ResolveMember,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&riid)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricCodePackageActivationContext struct {
	ole.IUnknown
}

type comFabricCodePackageActivationContextVtbl struct {
	ole.IUnknownVtbl
	get_ContextId                               uintptr
	get_CodePackageName                         uintptr
	get_CodePackageVersion                      uintptr
	get_WorkDirectory                           uintptr
	get_LogDirectory                            uintptr
	get_TempDirectory                           uintptr
	get_ServiceTypes                            uintptr
	get_ServiceGroupTypes                       uintptr
	get_ApplicationPrincipals                   uintptr
	get_ServiceEndpointResources                uintptr
	GetServiceEndpointResource                  uintptr
	GetCodePackageNames                         uintptr
	GetConfigurationPackageNames                uintptr
	GetDataPackageNames                         uintptr
	GetCodePackage                              uintptr
	GetConfigurationPackage                     uintptr
	GetDataPackage                              uintptr
	RegisterCodePackageChangeHandler            uintptr
	UnregisterCodePackageChangeHandler          uintptr
	RegisterConfigurationPackageChangeHandler   uintptr
	UnregisterConfigurationPackageChangeHandler uintptr
	RegisterDataPackageChangeHandler            uintptr
	UnregisterDataPackageChangeHandler          uintptr
}

func (v *ComFabricCodePackageActivationContext) vtable() *comFabricCodePackageActivationContextVtbl {
	return (*comFabricCodePackageActivationContextVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivationContext) GetContextId() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ContextId,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext) GetCodePackageName() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_CodePackageName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext) GetCodePackageVersion() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_CodePackageVersion,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext) GetWorkDirectory() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_WorkDirectory,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext) GetLogDirectory() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_LogDirectory,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext) GetTempDirectory() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_TempDirectory,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext) GetServiceTypes() (rt []FabricServiceTypeDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceTypes,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceTypeDescriptionList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceTypeDescription

		var innerlst []innerFabricServiceTypeDescription

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeDescription

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetServiceGroupTypes() (rt []FabricServiceGroupTypeDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceGroupTypes,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceGroupTypeDescriptionList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceGroupTypeDescription

		var innerlst []innerFabricServiceGroupTypeDescription

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupTypeDescription

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetApplicationPrincipals() (rt *FabricApplicationPrincipalsDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationPrincipals,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationPrincipalsDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricCodePackageActivationContext) GetServiceEndpointResources() (rt []FabricEndpointResourceDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceEndpointResources,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricEndpointResourceDescriptionList)(unsafe.Pointer(hr))

	{
		var lst []FabricEndpointResourceDescription

		var innerlst []innerFabricEndpointResourceDescription

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricEndpointResourceDescription

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetServiceEndpointResource(
	serviceEndpointResourceName string,
) (bufferedValue *FabricEndpointResourceDescription, err error) {
	var p_0 *uint16
	s_18, _ := windows.UTF16PtrFromString(serviceEndpointResourceName)
	p_0 = s_18

	var p_1 *innerFabricEndpointResourceDescription
	defer func() {
		bufferedValue = p_1.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetServiceEndpointResource,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetCodePackageNames() (names *ComFabricStringListResult, err error) {
	var p_0 *ComFabricStringListResult
	defer func() {
		names = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCodePackageNames,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetConfigurationPackageNames() (names *ComFabricStringListResult, err error) {
	var p_0 *ComFabricStringListResult
	defer func() {
		names = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetConfigurationPackageNames,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetDataPackageNames() (names *ComFabricStringListResult, err error) {
	var p_0 *ComFabricStringListResult
	defer func() {
		names = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetDataPackageNames,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetCodePackage(
	codePackageName string,
) (codePackage *ComFabricCodePackage, err error) {
	var p_0 *uint16
	s_19, _ := windows.UTF16PtrFromString(codePackageName)
	p_0 = s_19

	var p_1 *ComFabricCodePackage
	defer func() {
		codePackage = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCodePackage,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetConfigurationPackage(
	configPackageName string,
) (configPackage *ComFabricConfigurationPackage, err error) {
	var p_0 *uint16
	s_20, _ := windows.UTF16PtrFromString(configPackageName)
	p_0 = s_20

	var p_1 *ComFabricConfigurationPackage
	defer func() {
		configPackage = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetConfigurationPackage,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) GetDataPackage(
	dataPackageName string,
) (dataPackage *ComFabricDataPackage, err error) {
	var p_0 *uint16
	s_21, _ := windows.UTF16PtrFromString(dataPackageName)
	p_0 = s_21

	var p_1 *ComFabricDataPackage
	defer func() {
		dataPackage = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetDataPackage,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) RegisterCodePackageChangeHandler(
	callback *ComFabricCodePackageChangeHandler,
) (callbackHandle int64, err error) {
	var p_1 int64
	defer func() {
		callbackHandle = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterCodePackageChangeHandler,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) UnregisterCodePackageChangeHandler(
	callbackHandle int64,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().UnregisterCodePackageChangeHandler,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(callbackHandle),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) RegisterConfigurationPackageChangeHandler(
	callback *ComFabricConfigurationPackageChangeHandler,
) (callbackHandle int64, err error) {
	var p_1 int64
	defer func() {
		callbackHandle = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterConfigurationPackageChangeHandler,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) UnregisterConfigurationPackageChangeHandler(
	callbackHandle int64,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().UnregisterConfigurationPackageChangeHandler,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(callbackHandle),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) RegisterDataPackageChangeHandler(
	callback *ComFabricDataPackageChangeHandler,
) (callbackHandle int64, err error) {
	var p_1 int64
	defer func() {
		callbackHandle = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterDataPackageChangeHandler,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext) UnregisterDataPackageChangeHandler(
	callbackHandle int64,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().UnregisterDataPackageChangeHandler,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(callbackHandle),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricCodePackageActivationContext2 struct {
	ComFabricCodePackageActivationContext
}

type comFabricCodePackageActivationContext2Vtbl struct {
	comFabricCodePackageActivationContextVtbl
	get_ApplicationName       uintptr
	get_ApplicationTypeName   uintptr
	GetServiceManifestName    uintptr
	GetServiceManifestVersion uintptr
}

func (v *ComFabricCodePackageActivationContext2) vtable() *comFabricCodePackageActivationContext2Vtbl {
	return (*comFabricCodePackageActivationContext2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivationContext2) GetApplicationName() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext2) GetApplicationTypeName() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationTypeName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext2) GetServiceManifestName() (serviceManifestName *ComFabricStringResult, err error) {
	var p_0 *ComFabricStringResult
	defer func() {
		serviceManifestName = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetServiceManifestName,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext2) GetServiceManifestVersion() (serviceManifestVersion *ComFabricStringResult, err error) {
	var p_0 *ComFabricStringResult
	defer func() {
		serviceManifestVersion = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetServiceManifestVersion,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricCodePackageActivationContext3 struct {
	ComFabricCodePackageActivationContext2
}

type comFabricCodePackageActivationContext3Vtbl struct {
	comFabricCodePackageActivationContext2Vtbl
	ReportApplicationHealth            uintptr
	ReportDeployedApplicationHealth    uintptr
	ReportDeployedServicePackageHealth uintptr
}

func (v *ComFabricCodePackageActivationContext3) vtable() *comFabricCodePackageActivationContext3Vtbl {
	return (*comFabricCodePackageActivationContext3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivationContext3) ReportApplicationHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportApplicationHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext3) ReportDeployedApplicationHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportDeployedApplicationHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext3) ReportDeployedServicePackageHealth(
	healthInfo *FabricHealthInformation,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportDeployedServicePackageHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricCodePackageActivationContext4 struct {
	ComFabricCodePackageActivationContext3
}

type comFabricCodePackageActivationContext4Vtbl struct {
	comFabricCodePackageActivationContext3Vtbl
	ReportApplicationHealth2            uintptr
	ReportDeployedApplicationHealth2    uintptr
	ReportDeployedServicePackageHealth2 uintptr
}

func (v *ComFabricCodePackageActivationContext4) vtable() *comFabricCodePackageActivationContext4Vtbl {
	return (*comFabricCodePackageActivationContext4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivationContext4) ReportApplicationHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportApplicationHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext4) ReportDeployedApplicationHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportDeployedApplicationHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivationContext4) ReportDeployedServicePackageHealth2(
	healthInfo *FabricHealthInformation,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthInformation
	p_0 = healthInfo.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportDeployedServicePackageHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricCodePackageActivationContext5 struct {
	ComFabricCodePackageActivationContext4
}

type comFabricCodePackageActivationContext5Vtbl struct {
	comFabricCodePackageActivationContext4Vtbl
	get_ServiceListenAddress  uintptr
	get_ServicePublishAddress uintptr
}

func (v *ComFabricCodePackageActivationContext5) vtable() *comFabricCodePackageActivationContext5Vtbl {
	return (*comFabricCodePackageActivationContext5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivationContext5) GetServiceListenAddress() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceListenAddress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricCodePackageActivationContext5) GetServicePublishAddress() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServicePublishAddress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}

type ComFabricCodePackageActivationContext6 struct {
	ComFabricCodePackageActivationContext5
}

type comFabricCodePackageActivationContext6Vtbl struct {
	comFabricCodePackageActivationContext5Vtbl
	GetDirectory uintptr
}

func (v *ComFabricCodePackageActivationContext6) vtable() *comFabricCodePackageActivationContext6Vtbl {
	return (*comFabricCodePackageActivationContext6Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivationContext6) GetDirectory(
	logicalDirectoryName string,
) (directoryPath *ComFabricStringResult, err error) {
	var p_0 *uint16
	s_22, _ := windows.UTF16PtrFromString(logicalDirectoryName)
	p_0 = s_22

	var p_1 *ComFabricStringResult
	defer func() {
		directoryPath = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetDirectory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricCodePackage struct {
	ole.IUnknown
}

type comFabricCodePackageVtbl struct {
	ole.IUnknownVtbl
	get_Description uintptr
	get_Path        uintptr
}

func (v *ComFabricCodePackage) vtable() *comFabricCodePackageVtbl {
	return (*comFabricCodePackageVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackage) GetDescription() (rt *FabricCodePackageDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Description,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricCodePackageDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricCodePackage) GetPath() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Path,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}

type ComFabricCodePackage2 struct {
	ComFabricCodePackage
}

type comFabricCodePackage2Vtbl struct {
	comFabricCodePackageVtbl
	get_SetupEntryPointRunAsPolicy uintptr
	get_EntryPointRunAsPolicy      uintptr
}

func (v *ComFabricCodePackage2) vtable() *comFabricCodePackage2Vtbl {
	return (*comFabricCodePackage2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackage2) GetSetupEntryPointRunAsPolicy() (rt *FabricRunasPolicyDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_SetupEntryPointRunAsPolicy,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricRunasPolicyDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricCodePackage2) GetEntryPointRunAsPolicy() (rt *FabricRunasPolicyDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_EntryPointRunAsPolicy,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricRunasPolicyDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricConfigurationPackage struct {
	ole.IUnknown
}

type comFabricConfigurationPackageVtbl struct {
	ole.IUnknownVtbl
	get_Description uintptr
	get_Path        uintptr
	get_Settings    uintptr
	GetSection      uintptr
	GetValue        uintptr
	DecryptValue    uintptr
}

func (v *ComFabricConfigurationPackage) vtable() *comFabricConfigurationPackageVtbl {
	return (*comFabricConfigurationPackageVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricConfigurationPackage) GetDescription() (rt *FabricConfigurationPackageDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Description,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricConfigurationPackageDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricConfigurationPackage) GetPath() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Path,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *ComFabricConfigurationPackage) GetSettings() (rt *FabricConfigurationSettings, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Settings,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricConfigurationSettings)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricConfigurationPackage) GetSection(
	sectionName string,
) (bufferedValue *FabricConfigurationSection, err error) {
	var p_0 *uint16
	s_23, _ := windows.UTF16PtrFromString(sectionName)
	p_0 = s_23

	var p_1 *innerFabricConfigurationSection
	defer func() {
		bufferedValue = p_1.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetSection,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricConfigurationPackage) GetValue(
	sectionName string,
	parameterName string,
) (isEncrypted bool, bufferedValue string, err error) {
	var p_0 *uint16
	s_24, _ := windows.UTF16PtrFromString(sectionName)
	p_0 = s_24

	var p_1 *uint16
	s_25, _ := windows.UTF16PtrFromString(parameterName)
	p_1 = s_25

	var p_2 bool
	defer func() {
		isEncrypted = p_2
	}()
	var p_3 *uint16
	defer func() {
		bufferedValue = windows.UTF16PtrToString(p_3)
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().GetValue,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricConfigurationPackage) DecryptValue(
	encryptedValue string,
) (decryptedValue *ComFabricStringResult, err error) {
	var p_0 *uint16
	s_26, _ := windows.UTF16PtrFromString(encryptedValue)
	p_0 = s_26

	var p_1 *ComFabricStringResult
	defer func() {
		decryptedValue = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().DecryptValue,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricConfigurationPackage2 struct {
	ComFabricConfigurationPackage
}

type comFabricConfigurationPackage2Vtbl struct {
	comFabricConfigurationPackageVtbl
	GetValues uintptr
}

func (v *ComFabricConfigurationPackage2) vtable() *comFabricConfigurationPackage2Vtbl {
	return (*comFabricConfigurationPackage2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricConfigurationPackage2) GetValues(
	sectionName string,
	parameterPrefix string,
) (bufferedValue []FabricConfigurationParameter, err error) {
	var p_0 *uint16
	s_27, _ := windows.UTF16PtrFromString(sectionName)
	p_0 = s_27

	var p_1 *uint16
	s_28, _ := windows.UTF16PtrFromString(parameterPrefix)
	p_1 = s_28

	var p_2 *innerFabricConfigurationParameterList
	defer func() {
		{
			var lst []FabricConfigurationParameter

			var innerlst []innerFabricConfigurationParameter

			{
				srclst := p_2
				slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
				slice.Data = uintptr(unsafe.Pointer(srclst.Items))
				slice.Len = int(srclst.Count)
				slice.Cap = int(srclst.Count)
			}

			for _, item := range innerlst {
				var tmpitem FabricConfigurationParameter

				tmpitem = *item.toGoStruct()

				lst = append(lst, tmpitem)
			}

			bufferedValue = lst
		}
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().GetValues,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricDataPackage struct {
	ole.IUnknown
}

type comFabricDataPackageVtbl struct {
	ole.IUnknownVtbl
	get_Description uintptr
	get_Path        uintptr
}

func (v *ComFabricDataPackage) vtable() *comFabricDataPackageVtbl {
	return (*comFabricDataPackageVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricDataPackage) GetDescription() (rt *FabricDataPackageDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Description,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDataPackageDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *ComFabricDataPackage) GetPath() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Path,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}

type ComFabricCodePackageChangeHandler struct {
	ole.IUnknown
}

type comFabricCodePackageChangeHandlerVtbl struct {
	ole.IUnknownVtbl
	OnPackageAdded    uintptr
	OnPackageRemoved  uintptr
	OnPackageModified uintptr
}

func (v *ComFabricCodePackageChangeHandler) vtable() *comFabricCodePackageChangeHandlerVtbl {
	return (*comFabricCodePackageChangeHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageChangeHandler) OnPackageAdded(
	source *ComFabricCodePackageActivationContext,
	codePackage *ComFabricCodePackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnPackageAdded,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(codePackage)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricCodePackageChangeHandler) OnPackageRemoved(
	source *ComFabricCodePackageActivationContext,
	codePackage *ComFabricCodePackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnPackageRemoved,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(codePackage)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricCodePackageChangeHandler) OnPackageModified(
	source *ComFabricCodePackageActivationContext,
	previousCodePackage *ComFabricCodePackage,
	codePackage *ComFabricCodePackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall6(
		v.vtable().OnPackageModified,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(previousCodePackage)),
		uintptr(unsafe.Pointer(codePackage)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type ComFabricConfigurationPackageChangeHandler struct {
	ole.IUnknown
}

type comFabricConfigurationPackageChangeHandlerVtbl struct {
	ole.IUnknownVtbl
	OnPackageAdded    uintptr
	OnPackageRemoved  uintptr
	OnPackageModified uintptr
}

func (v *ComFabricConfigurationPackageChangeHandler) vtable() *comFabricConfigurationPackageChangeHandlerVtbl {
	return (*comFabricConfigurationPackageChangeHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricConfigurationPackageChangeHandler) OnPackageAdded(
	source *ComFabricCodePackageActivationContext,
	configPackage *ComFabricConfigurationPackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnPackageAdded,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(configPackage)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricConfigurationPackageChangeHandler) OnPackageRemoved(
	source *ComFabricCodePackageActivationContext,
	configPackage *ComFabricConfigurationPackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnPackageRemoved,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(configPackage)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricConfigurationPackageChangeHandler) OnPackageModified(
	source *ComFabricCodePackageActivationContext,
	previousConfigPackage *ComFabricConfigurationPackage,
	configPackage *ComFabricConfigurationPackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall6(
		v.vtable().OnPackageModified,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(previousConfigPackage)),
		uintptr(unsafe.Pointer(configPackage)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type ComFabricDataPackageChangeHandler struct {
	ole.IUnknown
}

type comFabricDataPackageChangeHandlerVtbl struct {
	ole.IUnknownVtbl
	OnPackageAdded    uintptr
	OnPackageRemoved  uintptr
	OnPackageModified uintptr
}

func (v *ComFabricDataPackageChangeHandler) vtable() *comFabricDataPackageChangeHandlerVtbl {
	return (*comFabricDataPackageChangeHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricDataPackageChangeHandler) OnPackageAdded(
	source *ComFabricCodePackageActivationContext,
	dataPackage *ComFabricDataPackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnPackageAdded,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(dataPackage)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricDataPackageChangeHandler) OnPackageRemoved(
	source *ComFabricCodePackageActivationContext,
	dataPackage *ComFabricDataPackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnPackageRemoved,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(dataPackage)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricDataPackageChangeHandler) OnPackageModified(
	source *ComFabricCodePackageActivationContext,
	previousDataPackage *ComFabricDataPackage,
	dataPackage *ComFabricDataPackage,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall6(
		v.vtable().OnPackageModified,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(previousDataPackage)),
		uintptr(unsafe.Pointer(dataPackage)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type ComFabricProcessExitHandler struct {
	ole.IUnknown
}

type comFabricProcessExitHandlerVtbl struct {
	ole.IUnknownVtbl
	FabricProcessExited uintptr
}

func (v *ComFabricProcessExitHandler) vtable() *comFabricProcessExitHandlerVtbl {
	return (*comFabricProcessExitHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricProcessExitHandler) FabricProcessExited() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().FabricProcessExited,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type ComFabricTransactionBase struct {
	ole.IUnknown
}

type comFabricTransactionBaseVtbl struct {
	ole.IUnknownVtbl
	get_Id             uintptr
	get_IsolationLevel uintptr
}

func (v *ComFabricTransactionBase) vtable() *comFabricTransactionBaseVtbl {
	return (*comFabricTransactionBaseVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricTransactionBase) GetId() (rt *windows.GUID, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Id,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*windows.GUID)(unsafe.Pointer(hr))

	rt = tmp
	return
}
func (v *ComFabricTransactionBase) GetIsolationLevel() (rt FabricTransactionIsolationLevel, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_IsolationLevel,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricTransactionIsolationLevel(hr)
	return
}

type ComFabricTransaction struct {
	ComFabricTransactionBase
}

type comFabricTransactionVtbl struct {
	comFabricTransactionBaseVtbl
	BeginCommit uintptr
	EndCommit   uintptr
	Rollback    uintptr
}

func (v *ComFabricTransaction) vtable() *comFabricTransactionVtbl {
	return (*comFabricTransactionVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricTransaction) beginCommit(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCommit,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTransaction) endCommit(
	context *comIFabricAsyncOperationContext,
) (commitSequenceNumber int64, err error) {
	var p_1 int64
	defer func() {
		commitSequenceNumber = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCommit,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTransaction) Rollback() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().Rollback,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
func (v *ComFabricTransaction) Commit(
	ctx context.Context,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endCommit(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCommit(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricKeyValueStoreReplica struct {
	ComFabricStatefulServiceReplica
}

type comFabricKeyValueStoreReplicaVtbl struct {
	comFabricStatefulServiceReplicaVtbl
	GetCurrentEpoch          uintptr
	UpdateReplicatorSettings uintptr
	CreateTransaction        uintptr
	Add                      uintptr
	Remove                   uintptr
	Update                   uintptr
	Get                      uintptr
	GetMetadata              uintptr
	Contains                 uintptr
	Enumerate                uintptr
	EnumerateByKey           uintptr
	EnumerateMetadata        uintptr
	EnumerateMetadataByKey   uintptr
}

func (v *ComFabricKeyValueStoreReplica) vtable() *comFabricKeyValueStoreReplicaVtbl {
	return (*comFabricKeyValueStoreReplicaVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreReplica) GetCurrentEpoch() (currentEpoch FabricEpoch, err error) {
	var p_0 innerFabricEpoch
	defer func() {
		currentEpoch = *p_0.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetCurrentEpoch,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) UpdateReplicatorSettings(
	replicatorSettings *FabricReplicatorSettings,
) (err error) {
	var p_0 *innerFabricReplicatorSettings
	p_0 = replicatorSettings.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().UpdateReplicatorSettings,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) CreateTransaction() (transaction *ComFabricTransaction, err error) {
	var p_0 *ComFabricTransaction
	defer func() {
		transaction = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().CreateTransaction,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) Add(
	transaction *ComFabricTransactionBase,
	key string,
	valueSizeInBytes int32,
	value *byte,
) (err error) {
	var p_1 *uint16
	s_30, _ := windows.UTF16PtrFromString(key)
	p_1 = s_30

	hr, _, err1 := syscall.Syscall6(
		v.vtable().Add,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(valueSizeInBytes),
		uintptr(unsafe.Pointer(value)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) Remove(
	transaction *ComFabricTransactionBase,
	key string,
	checkSequenceNumber int64,
) (err error) {
	var p_1 *uint16
	s_31, _ := windows.UTF16PtrFromString(key)
	p_1 = s_31

	hr, _, err1 := syscall.Syscall6(
		v.vtable().Remove,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(checkSequenceNumber),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) Update(
	transaction *ComFabricTransactionBase,
	key string,
	valueSizeInBytes int32,
	value *byte,
	checkSequenceNumber int64,
) (err error) {
	var p_1 *uint16
	s_32, _ := windows.UTF16PtrFromString(key)
	p_1 = s_32

	hr, _, err1 := syscall.Syscall6(
		v.vtable().Update,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(valueSizeInBytes),
		uintptr(unsafe.Pointer(value)),
		uintptr(checkSequenceNumber),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) Get(
	transaction *ComFabricTransactionBase,
	key string,
) (result *ComFabricKeyValueStoreItemResult, err error) {
	var p_1 *uint16
	s_33, _ := windows.UTF16PtrFromString(key)
	p_1 = s_33

	var p_2 *ComFabricKeyValueStoreItemResult
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().Get,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) GetMetadata(
	transaction *ComFabricTransactionBase,
	key string,
) (result *ComFabricKeyValueStoreItemMetadataResult, err error) {
	var p_1 *uint16
	s_34, _ := windows.UTF16PtrFromString(key)
	p_1 = s_34

	var p_2 *ComFabricKeyValueStoreItemMetadataResult
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().GetMetadata,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) Contains(
	transaction *ComFabricTransactionBase,
	key string,
) (result bool, err error) {
	var p_1 *uint16
	s_35, _ := windows.UTF16PtrFromString(key)
	p_1 = s_35

	var p_2 bool
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().Contains,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) Enumerate(
	transaction *ComFabricTransactionBase,
) (result *ComFabricKeyValueStoreItemEnumerator, err error) {
	var p_1 *ComFabricKeyValueStoreItemEnumerator
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().Enumerate,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) EnumerateByKey(
	transaction *ComFabricTransactionBase,
	keyPrefix string,
) (result *ComFabricKeyValueStoreItemEnumerator, err error) {
	var p_1 *uint16
	s_36, _ := windows.UTF16PtrFromString(keyPrefix)
	p_1 = s_36

	var p_2 *ComFabricKeyValueStoreItemEnumerator
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().EnumerateByKey,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) EnumerateMetadata(
	transaction *ComFabricTransactionBase,
) (result *ComFabricKeyValueStoreItemMetadataEnumerator, err error) {
	var p_1 *ComFabricKeyValueStoreItemMetadataEnumerator
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EnumerateMetadata,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica) EnumerateMetadataByKey(
	transaction *ComFabricTransactionBase,
	keyPrefix string,
) (result *ComFabricKeyValueStoreItemMetadataEnumerator, err error) {
	var p_1 *uint16
	s_37, _ := windows.UTF16PtrFromString(keyPrefix)
	p_1 = s_37

	var p_2 *ComFabricKeyValueStoreItemMetadataEnumerator
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().EnumerateMetadataByKey,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreReplica2 struct {
	ComFabricKeyValueStoreReplica
}

type comFabricKeyValueStoreReplica2Vtbl struct {
	comFabricKeyValueStoreReplicaVtbl
	Backup             uintptr
	Restore            uintptr
	CreateTransaction2 uintptr
}

func (v *ComFabricKeyValueStoreReplica2) vtable() *comFabricKeyValueStoreReplica2Vtbl {
	return (*comFabricKeyValueStoreReplica2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreReplica2) Backup(
	backupDirectory string,
) (err error) {
	var p_0 *uint16
	s_38, _ := windows.UTF16PtrFromString(backupDirectory)
	p_0 = s_38

	hr, _, err1 := syscall.Syscall(
		v.vtable().Backup,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica2) Restore(
	backupDirectory string,
) (err error) {
	var p_0 *uint16
	s_39, _ := windows.UTF16PtrFromString(backupDirectory)
	p_0 = s_39

	hr, _, err1 := syscall.Syscall(
		v.vtable().Restore,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica2) CreateTransaction2(
	settings *FabricKeyValueStoreTransactionSettings,
) (transaction *ComFabricTransaction, err error) {
	var p_0 *innerFabricKeyValueStoreTransactionSettings
	p_0 = settings.toInnerStruct()
	var p_1 *ComFabricTransaction
	defer func() {
		transaction = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().CreateTransaction2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreReplica3 struct {
	ComFabricKeyValueStoreReplica2
}

type comFabricKeyValueStoreReplica3Vtbl struct {
	comFabricKeyValueStoreReplica2Vtbl
	BeginBackup uintptr
	EndBackup   uintptr
}

func (v *ComFabricKeyValueStoreReplica3) vtable() *comFabricKeyValueStoreReplica3Vtbl {
	return (*comFabricKeyValueStoreReplica3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreReplica3) beginBackup(
	backupDirectory string,
	backupOption FabricStoreBackupOption,
	postBackupHandler *ComFabricStorePostBackupHandler,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_40, _ := windows.UTF16PtrFromString(backupDirectory)
	p_0 = s_40

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginBackup,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(backupOption),
		uintptr(unsafe.Pointer(postBackupHandler)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica3) endBackup(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndBackup,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica3) Backup(
	ctx context.Context,
	backupDirectory string,
	backupOption FabricStoreBackupOption,
	postBackupHandler *ComFabricStorePostBackupHandler,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endBackup(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginBackup(
		backupDirectory,
		backupOption,
		postBackupHandler,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricKeyValueStoreReplica4 struct {
	ComFabricKeyValueStoreReplica3
}

type comFabricKeyValueStoreReplica4Vtbl struct {
	comFabricKeyValueStoreReplica3Vtbl
	BeginRestore uintptr
	EndRestore   uintptr
}

func (v *ComFabricKeyValueStoreReplica4) vtable() *comFabricKeyValueStoreReplica4Vtbl {
	return (*comFabricKeyValueStoreReplica4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreReplica4) beginRestore(
	backupDirectory string,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_41, _ := windows.UTF16PtrFromString(backupDirectory)
	p_0 = s_41

	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestore,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica4) endRestore(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRestore,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica4) Restore(
	ctx context.Context,
	backupDirectory string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRestore(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRestore(
		backupDirectory,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricKeyValueStoreReplica5 struct {
	ComFabricKeyValueStoreReplica4
}

type comFabricKeyValueStoreReplica5Vtbl struct {
	comFabricKeyValueStoreReplica4Vtbl
	TryAdd                  uintptr
	TryRemove               uintptr
	TryUpdate               uintptr
	TryGet                  uintptr
	TryGetMetadata          uintptr
	EnumerateByKey2         uintptr
	EnumerateMetadataByKey2 uintptr
}

func (v *ComFabricKeyValueStoreReplica5) vtable() *comFabricKeyValueStoreReplica5Vtbl {
	return (*comFabricKeyValueStoreReplica5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreReplica5) TryAdd(
	transaction *ComFabricTransactionBase,
	key string,
	valueSizeInBytes int32,
	value *byte,
) (added bool, err error) {
	var p_1 *uint16
	s_42, _ := windows.UTF16PtrFromString(key)
	p_1 = s_42

	var p_4 bool
	defer func() {
		added = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().TryAdd,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(valueSizeInBytes),
		uintptr(unsafe.Pointer(value)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica5) TryRemove(
	transaction *ComFabricTransactionBase,
	key string,
	checkSequenceNumber int64,
) (exists bool, err error) {
	var p_1 *uint16
	s_43, _ := windows.UTF16PtrFromString(key)
	p_1 = s_43

	var p_3 bool
	defer func() {
		exists = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().TryRemove,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(checkSequenceNumber),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica5) TryUpdate(
	transaction *ComFabricTransactionBase,
	key string,
	valueSizeInBytes int32,
	value *byte,
	checkSequenceNumber int64,
) (exists bool, err error) {
	var p_1 *uint16
	s_44, _ := windows.UTF16PtrFromString(key)
	p_1 = s_44

	var p_5 bool
	defer func() {
		exists = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().TryUpdate,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(valueSizeInBytes),
		uintptr(unsafe.Pointer(value)),
		uintptr(checkSequenceNumber),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica5) TryGet(
	transaction *ComFabricTransactionBase,
	key string,
) (result *ComFabricKeyValueStoreItemResult, err error) {
	var p_1 *uint16
	s_45, _ := windows.UTF16PtrFromString(key)
	p_1 = s_45

	var p_2 *ComFabricKeyValueStoreItemResult
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().TryGet,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica5) TryGetMetadata(
	transaction *ComFabricTransactionBase,
	key string,
) (result *ComFabricKeyValueStoreItemMetadataResult, err error) {
	var p_1 *uint16
	s_46, _ := windows.UTF16PtrFromString(key)
	p_1 = s_46

	var p_2 *ComFabricKeyValueStoreItemMetadataResult
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().TryGetMetadata,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica5) EnumerateByKey2(
	transaction *ComFabricTransactionBase,
	keyPrefix string,
	strictPrefix bool,
) (result *ComFabricKeyValueStoreItemEnumerator, err error) {
	var p_1 *uint16
	s_47, _ := windows.UTF16PtrFromString(keyPrefix)
	p_1 = s_47

	p_2 := 0
	if strictPrefix {
		p_2 = 1
	}
	var p_3 *ComFabricKeyValueStoreItemEnumerator
	defer func() {
		result = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().EnumerateByKey2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(p_2),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreReplica5) EnumerateMetadataByKey2(
	transaction *ComFabricTransactionBase,
	keyPrefix string,
	strictPrefix bool,
) (result *ComFabricKeyValueStoreItemMetadataEnumerator, err error) {
	var p_1 *uint16
	s_48, _ := windows.UTF16PtrFromString(keyPrefix)
	p_1 = s_48

	p_2 := 0
	if strictPrefix {
		p_2 = 1
	}
	var p_3 *ComFabricKeyValueStoreItemMetadataEnumerator
	defer func() {
		result = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().EnumerateMetadataByKey2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(transaction)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(p_2),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreReplica6 struct {
	ComFabricKeyValueStoreReplica5
}

type comFabricKeyValueStoreReplica6Vtbl struct {
	comFabricKeyValueStoreReplica5Vtbl
	BeginRestore2 uintptr
}

func (v *ComFabricKeyValueStoreReplica6) vtable() *comFabricKeyValueStoreReplica6Vtbl {
	return (*comFabricKeyValueStoreReplica6Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreReplica6) beginRestore2(
	backupDirectory string,
	settings *FabricKeyValueStoreRestoreSettings,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_49, _ := windows.UTF16PtrFromString(backupDirectory)
	p_0 = s_49

	var p_1 *innerFabricKeyValueStoreRestoreSettings
	p_1 = settings.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestore2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreEnumerator struct {
	ole.IUnknown
}

type comFabricKeyValueStoreEnumeratorVtbl struct {
	ole.IUnknownVtbl
	EnumerateByKey         uintptr
	EnumerateMetadataByKey uintptr
}

func (v *ComFabricKeyValueStoreEnumerator) vtable() *comFabricKeyValueStoreEnumeratorVtbl {
	return (*comFabricKeyValueStoreEnumeratorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreEnumerator) EnumerateByKey(
	keyPrefix string,
) (result *ComFabricKeyValueStoreItemEnumerator, err error) {
	var p_0 *uint16
	s_50, _ := windows.UTF16PtrFromString(keyPrefix)
	p_0 = s_50

	var p_1 *ComFabricKeyValueStoreItemEnumerator
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EnumerateByKey,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreEnumerator) EnumerateMetadataByKey(
	keyPrefix string,
) (result *ComFabricKeyValueStoreItemMetadataEnumerator, err error) {
	var p_0 *uint16
	s_51, _ := windows.UTF16PtrFromString(keyPrefix)
	p_0 = s_51

	var p_1 *ComFabricKeyValueStoreItemMetadataEnumerator
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EnumerateMetadataByKey,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreEnumerator2 struct {
	ComFabricKeyValueStoreEnumerator
}

type comFabricKeyValueStoreEnumerator2Vtbl struct {
	comFabricKeyValueStoreEnumeratorVtbl
	EnumerateByKey2         uintptr
	EnumerateMetadataByKey2 uintptr
}

func (v *ComFabricKeyValueStoreEnumerator2) vtable() *comFabricKeyValueStoreEnumerator2Vtbl {
	return (*comFabricKeyValueStoreEnumerator2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreEnumerator2) EnumerateByKey2(
	keyPrefix string,
	strictPrefix bool,
) (result *ComFabricKeyValueStoreItemEnumerator, err error) {
	var p_0 *uint16
	s_52, _ := windows.UTF16PtrFromString(keyPrefix)
	p_0 = s_52

	p_1 := 0
	if strictPrefix {
		p_1 = 1
	}
	var p_2 *ComFabricKeyValueStoreItemEnumerator
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().EnumerateByKey2,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(p_1),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreEnumerator2) EnumerateMetadataByKey2(
	keyPrefix string,
	strictPrefix bool,
) (result *ComFabricKeyValueStoreItemMetadataEnumerator, err error) {
	var p_0 *uint16
	s_53, _ := windows.UTF16PtrFromString(keyPrefix)
	p_0 = s_53

	p_1 := 0
	if strictPrefix {
		p_1 = 1
	}
	var p_2 *ComFabricKeyValueStoreItemMetadataEnumerator
	defer func() {
		result = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().EnumerateMetadataByKey2,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(p_1),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreItemEnumerator struct {
	ole.IUnknown
}

type comFabricKeyValueStoreItemEnumeratorVtbl struct {
	ole.IUnknownVtbl
	MoveNext    uintptr
	get_Current uintptr
}

func (v *ComFabricKeyValueStoreItemEnumerator) vtable() *comFabricKeyValueStoreItemEnumeratorVtbl {
	return (*comFabricKeyValueStoreItemEnumeratorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreItemEnumerator) MoveNext() (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().MoveNext,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreItemEnumerator) GetCurrent() (rt *ComFabricKeyValueStoreItemResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Current,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*ComFabricKeyValueStoreItemResult)(unsafe.Pointer(hr))

	rt = tmp
	return
}

type ComFabricKeyValueStoreItemMetadataEnumerator struct {
	ole.IUnknown
}

type comFabricKeyValueStoreItemMetadataEnumeratorVtbl struct {
	ole.IUnknownVtbl
	MoveNext    uintptr
	get_Current uintptr
}

func (v *ComFabricKeyValueStoreItemMetadataEnumerator) vtable() *comFabricKeyValueStoreItemMetadataEnumeratorVtbl {
	return (*comFabricKeyValueStoreItemMetadataEnumeratorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreItemMetadataEnumerator) MoveNext() (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().MoveNext,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreItemMetadataEnumerator) GetCurrent() (rt *ComFabricKeyValueStoreItemMetadataResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Current,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*ComFabricKeyValueStoreItemMetadataResult)(unsafe.Pointer(hr))

	rt = tmp
	return
}

type ComFabricKeyValueStoreNotificationEnumerator struct {
	ole.IUnknown
}

type comFabricKeyValueStoreNotificationEnumeratorVtbl struct {
	ole.IUnknownVtbl
	MoveNext    uintptr
	get_Current uintptr
	Reset       uintptr
}

func (v *ComFabricKeyValueStoreNotificationEnumerator) vtable() *comFabricKeyValueStoreNotificationEnumeratorVtbl {
	return (*comFabricKeyValueStoreNotificationEnumeratorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreNotificationEnumerator) MoveNext() (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().MoveNext,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricKeyValueStoreNotificationEnumerator) GetCurrent() (rt *ComFabricKeyValueStoreNotification, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Current,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*ComFabricKeyValueStoreNotification)(unsafe.Pointer(hr))

	rt = tmp
	return
}
func (v *ComFabricKeyValueStoreNotificationEnumerator) Reset() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().Reset,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type ComFabricKeyValueStoreItemEnumerator2 struct {
	ComFabricKeyValueStoreItemEnumerator
}

type comFabricKeyValueStoreItemEnumerator2Vtbl struct {
	comFabricKeyValueStoreItemEnumeratorVtbl
	TryMoveNext uintptr
}

func (v *ComFabricKeyValueStoreItemEnumerator2) vtable() *comFabricKeyValueStoreItemEnumerator2Vtbl {
	return (*comFabricKeyValueStoreItemEnumerator2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreItemEnumerator2) TryMoveNext() (success bool, err error) {
	var p_0 bool
	defer func() {
		success = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().TryMoveNext,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreItemMetadataEnumerator2 struct {
	ComFabricKeyValueStoreItemMetadataEnumerator
}

type comFabricKeyValueStoreItemMetadataEnumerator2Vtbl struct {
	comFabricKeyValueStoreItemMetadataEnumeratorVtbl
	TryMoveNext uintptr
}

func (v *ComFabricKeyValueStoreItemMetadataEnumerator2) vtable() *comFabricKeyValueStoreItemMetadataEnumerator2Vtbl {
	return (*comFabricKeyValueStoreItemMetadataEnumerator2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreItemMetadataEnumerator2) TryMoveNext() (success bool, err error) {
	var p_0 bool
	defer func() {
		success = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().TryMoveNext,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreNotificationEnumerator2 struct {
	ComFabricKeyValueStoreNotificationEnumerator
}

type comFabricKeyValueStoreNotificationEnumerator2Vtbl struct {
	comFabricKeyValueStoreNotificationEnumeratorVtbl
	TryMoveNext uintptr
}

func (v *ComFabricKeyValueStoreNotificationEnumerator2) vtable() *comFabricKeyValueStoreNotificationEnumerator2Vtbl {
	return (*comFabricKeyValueStoreNotificationEnumerator2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreNotificationEnumerator2) TryMoveNext() (success bool, err error) {
	var p_0 bool
	defer func() {
		success = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().TryMoveNext,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricKeyValueStoreItemResult struct {
	ole.IUnknown
}

type comFabricKeyValueStoreItemResultVtbl struct {
	ole.IUnknownVtbl
	get_Item uintptr
}

func (v *ComFabricKeyValueStoreItemResult) vtable() *comFabricKeyValueStoreItemResultVtbl {
	return (*comFabricKeyValueStoreItemResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreItemResult) GetItem() (rt *FabricKeyValueStoreItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Item,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricKeyValueStoreItem)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricKeyValueStoreItemMetadataResult struct {
	ole.IUnknown
}

type comFabricKeyValueStoreItemMetadataResultVtbl struct {
	ole.IUnknownVtbl
	get_Metadata uintptr
}

func (v *ComFabricKeyValueStoreItemMetadataResult) vtable() *comFabricKeyValueStoreItemMetadataResultVtbl {
	return (*comFabricKeyValueStoreItemMetadataResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreItemMetadataResult) GetMetadata() (rt *FabricKeyValueStoreItemMetadata, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Metadata,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricKeyValueStoreItemMetadata)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricKeyValueStoreNotification struct {
	ComFabricKeyValueStoreItemResult
}

type comFabricKeyValueStoreNotificationVtbl struct {
	comFabricKeyValueStoreItemResultVtbl
	IsDelete uintptr
}

func (v *ComFabricKeyValueStoreNotification) vtable() *comFabricKeyValueStoreNotificationVtbl {
	return (*comFabricKeyValueStoreNotificationVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricKeyValueStoreNotification) IsDelete() (rt bool, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().IsDelete,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = hr != 0
	return
}

type ComFabricStoreEventHandler struct {
	ole.IUnknown
}

type comFabricStoreEventHandlerVtbl struct {
	ole.IUnknownVtbl
	OnDataLoss uintptr
}

func (v *ComFabricStoreEventHandler) vtable() *comFabricStoreEventHandlerVtbl {
	return (*comFabricStoreEventHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStoreEventHandler) OnDataLoss() (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnDataLoss,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type ComFabricStoreEventHandler2 struct {
	ComFabricStoreEventHandler
}

type comFabricStoreEventHandler2Vtbl struct {
	comFabricStoreEventHandlerVtbl
	BeginOnDataLoss uintptr
	EndOnDataLoss   uintptr
}

func (v *ComFabricStoreEventHandler2) vtable() *comFabricStoreEventHandler2Vtbl {
	return (*comFabricStoreEventHandler2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStoreEventHandler2) beginOnDataLoss(
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *comIFabricAsyncOperationContext
	defer func() {
		context = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().BeginOnDataLoss,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStoreEventHandler2) endOnDataLoss(
	context *comIFabricAsyncOperationContext,
) (isStateChanged bool, err error) {
	var p_1 bool
	defer func() {
		isStateChanged = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndOnDataLoss,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStoreEventHandler2) OnDataLoss(
	ctx context.Context,
) (result_0 bool, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endOnDataLoss(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginOnDataLoss(
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricStorePostBackupHandler struct {
	ole.IUnknown
}

type comFabricStorePostBackupHandlerVtbl struct {
	ole.IUnknownVtbl
	BeginPostBackup uintptr
	EndPostBackup   uintptr
}

func (v *ComFabricStorePostBackupHandler) vtable() *comFabricStorePostBackupHandlerVtbl {
	return (*comFabricStorePostBackupHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricStorePostBackupHandler) beginPostBackup(
	info *FabricStoreBackupInfo,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStoreBackupInfo
	p_0 = info.toInnerStruct()
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginPostBackup,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStorePostBackupHandler) endPostBackup(
	context *comIFabricAsyncOperationContext,
) (status bool, err error) {
	var p_1 bool
	defer func() {
		status = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPostBackup,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricStorePostBackupHandler) PostBackup(
	ctx context.Context,
	info *FabricStoreBackupInfo,
) (result_0 bool, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endPostBackup(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPostBackup(
		info,
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricSecondaryEventHandler struct {
	ole.IUnknown
}

type comFabricSecondaryEventHandlerVtbl struct {
	ole.IUnknownVtbl
	OnCopyComplete         uintptr
	OnReplicationOperation uintptr
}

func (v *ComFabricSecondaryEventHandler) vtable() *comFabricSecondaryEventHandlerVtbl {
	return (*comFabricSecondaryEventHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricSecondaryEventHandler) OnCopyComplete(
	enumerator *ComFabricKeyValueStoreEnumerator,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnCopyComplete,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(enumerator)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecondaryEventHandler) OnReplicationOperation(
	enumerator *ComFabricKeyValueStoreNotificationEnumerator,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnReplicationOperation,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(enumerator)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricNodeContextResult struct {
	ole.IUnknown
}

type comFabricNodeContextResultVtbl struct {
	ole.IUnknownVtbl
	get_NodeContext uintptr
}

func (v *ComFabricNodeContextResult) vtable() *comFabricNodeContextResultVtbl {
	return (*comFabricNodeContextResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricNodeContextResult) GetNodeContext() (rt *FabricNodeContext, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NodeContext,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeContext)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricNodeContextResult2 struct {
	ComFabricNodeContextResult
}

type comFabricNodeContextResult2Vtbl struct {
	comFabricNodeContextResultVtbl
	GetDirectory uintptr
}

func (v *ComFabricNodeContextResult2) vtable() *comFabricNodeContextResult2Vtbl {
	return (*comFabricNodeContextResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricNodeContextResult2) GetDirectory(
	logicalDirectoryName string,
) (directoryPath *ComFabricStringResult, err error) {
	var p_0 *uint16
	s_54, _ := windows.UTF16PtrFromString(logicalDirectoryName)
	p_0 = s_54

	var p_1 *ComFabricStringResult
	defer func() {
		directoryPath = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetDirectory,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricReplicatorSettingsResult struct {
	ole.IUnknown
}

type comFabricReplicatorSettingsResultVtbl struct {
	ole.IUnknownVtbl
	get_ReplicatorSettings uintptr
}

func (v *ComFabricReplicatorSettingsResult) vtable() *comFabricReplicatorSettingsResultVtbl {
	return (*comFabricReplicatorSettingsResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricReplicatorSettingsResult) GetReplicatorSettings() (rt *FabricReplicatorSettings, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ReplicatorSettings,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricReplicatorSettings)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricEseLocalStoreSettingsResult struct {
	ole.IUnknown
}

type comFabricEseLocalStoreSettingsResultVtbl struct {
	ole.IUnknownVtbl
	get_Settings uintptr
}

func (v *ComFabricEseLocalStoreSettingsResult) vtable() *comFabricEseLocalStoreSettingsResultVtbl {
	return (*comFabricEseLocalStoreSettingsResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricEseLocalStoreSettingsResult) GetSettings() (rt *FabricEseLocalStoreSettings, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Settings,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricEseLocalStoreSettings)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricSecurityCredentialsResult struct {
	ole.IUnknown
}

type comFabricSecurityCredentialsResultVtbl struct {
	ole.IUnknownVtbl
	get_SecurityCredentials uintptr
}

func (v *ComFabricSecurityCredentialsResult) vtable() *comFabricSecurityCredentialsResultVtbl {
	return (*comFabricSecurityCredentialsResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricSecurityCredentialsResult) GetSecurityCredentials() (rt *FabricSecurityCredentials, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_SecurityCredentials,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricSecurityCredentials)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type ComFabricCodePackageActivator struct {
	ole.IUnknown
}

type comFabricCodePackageActivatorVtbl struct {
	ole.IUnknownVtbl
	BeginActivateCodePackage          uintptr
	EndActivateCodePackage            uintptr
	BeginDeactivateCodePackage        uintptr
	EndDeactivateCodePackage          uintptr
	AbortCodePackage                  uintptr
	RegisterCodePackageEventHandler   uintptr
	UnregisterCodePackageEventHandler uintptr
}

func (v *ComFabricCodePackageActivator) vtable() *comFabricCodePackageActivatorVtbl {
	return (*comFabricCodePackageActivatorVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageActivator) beginActivateCodePackage(
	codePackageNames []string,
	environment map[string]string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStringList
	{
		lst := &innerFabricStringList{}

		var tmp []*uint16

		for _, item := range codePackageNames {
			var tmpitem *uint16

			s_56, _ := windows.UTF16PtrFromString(item)
			tmpitem = s_56

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	var p_1 *innerFabricStringMap
	{
		mapobj := &innerFabricStringMap{}

		var tmp []innerFabricApplicationParameter

		for k, v := range environment {
			kv := innerFabricApplicationParameter{}

			s_58, _ := windows.UTF16PtrFromString(k)
			kv.Name = s_58

			s_59, _ := windows.UTF16PtrFromString(v)
			kv.Value = s_59

			tmp = append(tmp, kv)
		}

		mapobj.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			mapobj.Items = &tmp[0]
		}

		p_1 = mapobj
	}
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginActivateCodePackage,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) endActivateCodePackage(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndActivateCodePackage,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) beginDeactivateCodePackage(
	codePackageNames []string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStringList
	{
		lst := &innerFabricStringList{}

		var tmp []*uint16

		for _, item := range codePackageNames {
			var tmpitem *uint16

			s_61, _ := windows.UTF16PtrFromString(item)
			tmpitem = s_61

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeactivateCodePackage,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) endDeactivateCodePackage(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeactivateCodePackage,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) AbortCodePackage(
	codePackageNames []string,
) (err error) {
	var p_0 *innerFabricStringList
	{
		lst := &innerFabricStringList{}

		var tmp []*uint16

		for _, item := range codePackageNames {
			var tmpitem *uint16

			s_63, _ := windows.UTF16PtrFromString(item)
			tmpitem = s_63

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	hr, _, err1 := syscall.Syscall(
		v.vtable().AbortCodePackage,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) RegisterCodePackageEventHandler(
	eventHandler *ComFabricCodePackageEventHandler,
) (callbackHandle uint64, err error) {
	var p_1 uint64
	defer func() {
		callbackHandle = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().RegisterCodePackageEventHandler,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(eventHandler)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) UnregisterCodePackageEventHandler(
	callbackHandle uint64,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().UnregisterCodePackageEventHandler,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(callbackHandle),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricCodePackageActivator) ActivateCodePackage(
	ctx context.Context,
	codePackageNames []string,
	environment map[string]string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endActivateCodePackage(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginActivateCodePackage(
		codePackageNames,
		environment,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricCodePackageActivator) DeactivateCodePackage(
	ctx context.Context,
	codePackageNames []string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeactivateCodePackage(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeactivateCodePackage(
		codePackageNames,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricCodePackageEventHandler struct {
	ole.IUnknown
}

type comFabricCodePackageEventHandlerVtbl struct {
	ole.IUnknownVtbl
	OnCodePackageEvent uintptr
}

func (v *ComFabricCodePackageEventHandler) vtable() *comFabricCodePackageEventHandlerVtbl {
	return (*comFabricCodePackageEventHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricCodePackageEventHandler) OnCodePackageEvent(
	source *ComFabricCodePackageActivator,
	eventDesc *FabricCodePackageEventDescription,
) (rt interface{}, err error) {
	var p_1 *innerFabricCodePackageEventDescription
	p_1 = eventDesc.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnCodePackageEvent,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}
