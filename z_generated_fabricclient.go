// Code generated by "go run github.com/tg123/fabric/mkidl"; DO NOT EDIT.
package fabric

import (
	"context"
	"github.com/go-ole/go-ole"
	"golang.org/x/sys/windows"
	"reflect"
	"syscall"
	"time"
	"unsafe"
)

func (c *FabricClient) CreateFabricClientSettings2() (*ComFabricClientSettings2, error) {
	var com *ComFabricClientSettings2
	err := c.createComObject("{c6fb97f7-82f3-4e6c-a80a-021e8ffca425}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricPropertyManagementClient2() (*ComFabricPropertyManagementClient2, error) {
	var com *ComFabricPropertyManagementClient2
	err := c.createComObject("{04991c28-3f9d-4a49-9322-a56d308965fd}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceManagementClient() (*ComFabricServiceManagementClient, error) {
	var com *ComFabricServiceManagementClient
	err := c.createComObject("{f7368189-fd1f-437c-888d-8c89cecc57a0}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceManagementClient2() (*ComFabricServiceManagementClient2, error) {
	var com *ComFabricServiceManagementClient2
	err := c.createComObject("{9933ed08-5d0c-4aed-bab6-f676bf5be8aa}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceManagementClient3() (*ComFabricServiceManagementClient3, error) {
	var com *ComFabricServiceManagementClient3
	err := c.createComObject("{98EC1156-C249-4F66-8D7C-9A5FA88E8E6D}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceManagementClient4() (*ComFabricServiceManagementClient4, error) {
	var com *ComFabricServiceManagementClient4
	err := c.createComObject("{8180db27-7d0b-43b0-82e0-4a8e022fc238}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceManagementClient5() (*ComFabricServiceManagementClient5, error) {
	var com *ComFabricServiceManagementClient5
	err := c.createComObject("{F9A70679-8CA3-4E27-9411-483E0C89B1FA}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceManagementClient6() (*ComFabricServiceManagementClient6, error) {
	var com *ComFabricServiceManagementClient6
	err := c.createComObject("{23E4EE1B-049A-48F5-8DD7-B601EACE47DE}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceGroupManagementClient() (*ComFabricServiceGroupManagementClient, error) {
	var com *ComFabricServiceGroupManagementClient
	err := c.createComObject("{2061227e-0281-4baf-9b19-b2dfb2e63bbe}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceGroupManagementClient2() (*ComFabricServiceGroupManagementClient2, error) {
	var com *ComFabricServiceGroupManagementClient2
	err := c.createComObject("{4f0dc42d-8fec-4ea9-a96b-5be1fa1e1d64}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceGroupManagementClient3() (*ComFabricServiceGroupManagementClient3, error) {
	var com *ComFabricServiceGroupManagementClient3
	err := c.createComObject("{cbee0e12-b5a0-44dc-8c3c-c067958f82f6}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricServiceGroupManagementClient4() (*ComFabricServiceGroupManagementClient4, error) {
	var com *ComFabricServiceGroupManagementClient4
	err := c.createComObject("{3C73B32E-9A08-48CA-B3A3-993A2029E37A}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient() (*ComFabricApplicationManagementClient, error) {
	var com *ComFabricApplicationManagementClient
	err := c.createComObject("{7c219ae9-e58d-431f-8b30-92a40281faac}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient2() (*ComFabricApplicationManagementClient2, error) {
	var com *ComFabricApplicationManagementClient2
	err := c.createComObject("{f873516f-9bfe-47e5-93b9-3667aaf19324}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient3() (*ComFabricApplicationManagementClient3, error) {
	var com *ComFabricApplicationManagementClient3
	err := c.createComObject("{108c7735-97e1-4af8-8c2d-9080b1b29d33}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient4() (*ComFabricApplicationManagementClient4, error) {
	var com *ComFabricApplicationManagementClient4
	err := c.createComObject("{82c41b22-dbcb-4f7a-8d2f-f9bb94add446}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient5() (*ComFabricApplicationManagementClient5, error) {
	var com *ComFabricApplicationManagementClient5
	err := c.createComObject("{d7490e43-2217-4158-93e1-9ce4dd6f724a}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient6() (*ComFabricApplicationManagementClient6, error) {
	var com *ComFabricApplicationManagementClient6
	err := c.createComObject("{b01e63ee-1ea4-4181-95c7-983b32e16848}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient7() (*ComFabricApplicationManagementClient7, error) {
	var com *ComFabricApplicationManagementClient7
	err := c.createComObject("{26844276-25B1-4F8C-ADBE-B1B3A3083C17}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient8() (*ComFabricApplicationManagementClient8, error) {
	var com *ComFabricApplicationManagementClient8
	err := c.createComObject("{97b38e85-7329-47ff-a8d2-b7cbf1603689}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient9() (*ComFabricApplicationManagementClient9, error) {
	var com *ComFabricApplicationManagementClient9
	err := c.createComObject("{26617b63-1350-4d7f-830c-2200978d31bb}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricApplicationManagementClient10() (*ComFabricApplicationManagementClient10, error) {
	var com *ComFabricApplicationManagementClient10
	err := c.createComObject("{67001225-d106-41ae-8bd4-5a0a119c5c01}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient() (*ComFabricClusterManagementClient, error) {
	var com *ComFabricClusterManagementClient
	err := c.createComObject("{a3cf17e0-cf84-4ae0-b720-1785c0fb4ace}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient2() (*ComFabricClusterManagementClient2, error) {
	var com *ComFabricClusterManagementClient2
	err := c.createComObject("{f9493e16-6a49-4d79-8695-5a6826b504c5}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient3() (*ComFabricClusterManagementClient3, error) {
	var com *ComFabricClusterManagementClient3
	err := c.createComObject("{c3001d74-92b6-44cb-ac2f-2ffc4a56287c}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient4() (*ComFabricClusterManagementClient4, error) {
	var com *ComFabricClusterManagementClient4
	err := c.createComObject("{b6b12671-f283-4d71-a818-0260549bc83e}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient5() (*ComFabricClusterManagementClient5, error) {
	var com *ComFabricClusterManagementClient5
	err := c.createComObject("{a6ddd816-a100-11e4-89d3-123b93f75cba}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient6() (*ComFabricClusterManagementClient6, error) {
	var com *ComFabricClusterManagementClient6
	err := c.createComObject("{9e454ae8-4b8c-4136-884a-37b0b92cc855}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricClusterManagementClient7() (*ComFabricClusterManagementClient7, error) {
	var com *ComFabricClusterManagementClient7
	err := c.createComObject("{9B9105AC-D595-4F59-9C94-1FFDBF92A876}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricHealthClient() (*ComFabricHealthClient, error) {
	var com *ComFabricHealthClient
	err := c.createComObject("{3d00d0be-7014-41da-9c5b-0a9ef46e2a43}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricHealthClient2() (*ComFabricHealthClient2, error) {
	var com *ComFabricHealthClient2
	err := c.createComObject("{66cbc014-d7b3-4f81-a498-e580feb9a1f5}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricHealthClient3() (*ComFabricHealthClient3, error) {
	var com *ComFabricHealthClient3
	err := c.createComObject("{dd3e4497-3373-458d-ad22-c88ebd27493e}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricHealthClient4() (*ComFabricHealthClient4, error) {
	var com *ComFabricHealthClient4
	err := c.createComObject("{9f0401af-4909-404f-8696-0a71bd753e98}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient() (*ComFabricQueryClient, error) {
	var com *ComFabricQueryClient
	err := c.createComObject("{c629e422-90ba-4efd-8f64-cecf51bc3df0}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient2() (*ComFabricQueryClient2, error) {
	var com *ComFabricQueryClient2
	err := c.createComObject("{4E6D5D61-24C8-4240-A2E8-BCB1FC15D9AF}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient3() (*ComFabricQueryClient3, error) {
	var com *ComFabricQueryClient3
	err := c.createComObject("{16F563F3-4017-496E-B0E7-2650DE5774B3}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient4() (*ComFabricQueryClient4, error) {
	var com *ComFabricQueryClient4
	err := c.createComObject("{AB92081D-0D78-410B-9777-0846DBA24C10}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient5() (*ComFabricQueryClient5, error) {
	var com *ComFabricQueryClient5
	err := c.createComObject("{75C35E8C-87A2-4810-A401-B50DA858FE34}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient6() (*ComFabricQueryClient6, error) {
	var com *ComFabricQueryClient6
	err := c.createComObject("{173b2bb4-09c6-42fb-8754-caa8d43cf1b2}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient7() (*ComFabricQueryClient7, error) {
	var com *ComFabricQueryClient7
	err := c.createComObject("{538baa81-ba97-46da-95ac-e1cdd184cc74}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient8() (*ComFabricQueryClient8, error) {
	var com *ComFabricQueryClient8
	err := c.createComObject("{2c850629-6a83-4fc3-8468-c868b87e9a17}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient9() (*ComFabricQueryClient9, error) {
	var com *ComFabricQueryClient9
	err := c.createComObject("{76f0b4a5-4941-49d7-993c-ad7afc37c6af}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricQueryClient10() (*ComFabricQueryClient10, error) {
	var com *ComFabricQueryClient10
	err := c.createComObject("{02139da8-7140-42ae-8403-79a551600e63}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricInfrastructureServiceClient() (*ComFabricInfrastructureServiceClient, error) {
	var com *ComFabricInfrastructureServiceClient
	err := c.createComObject("{a0cfbc71-184b-443b-b102-4b6d0a7cbc49}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricRepairManagementClient() (*ComFabricRepairManagementClient, error) {
	var com *ComFabricRepairManagementClient
	err := c.createComObject("{ee483ba5-9018-4c99-9804-be6185db88e6}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricRepairManagementClient2() (*ComFabricRepairManagementClient2, error) {
	var com *ComFabricRepairManagementClient2
	err := c.createComObject("{5067d775-3baa-48e4-8c72-bb5573cc3fb8}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricTestManagementClient() (*ComFabricTestManagementClient, error) {
	var com *ComFabricTestManagementClient
	err := c.createComObject("{0df0f63a-4da0-44fe-81e8-f80cd28e9b28}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricTestManagementClient2() (*ComFabricTestManagementClient2, error) {
	var com *ComFabricTestManagementClient2
	err := c.createComObject("{1222b1ff-ae51-43b3-bbdf-439e7f61ca1a}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricTestManagementClient3() (*ComFabricTestManagementClient3, error) {
	var com *ComFabricTestManagementClient3
	err := c.createComObject("{a4b94afd-0cb5-4010-8995-e58e9b6ca373}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricFaultManagementClient() (*ComFabricFaultManagementClient, error) {
	var com *ComFabricFaultManagementClient
	err := c.createComObject("{769e1838-8726-4dcd-a3c0-211673a6967a}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricNetworkManagementClient() (*ComFabricNetworkManagementClient, error) {
	var com *ComFabricNetworkManagementClient
	err := c.createComObject("{fdb754c6-69c5-4bcf-bba5-cb70c84a4398}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

func (c *FabricClient) CreateFabricSecretStoreClient() (*ComFabricSecretStoreClient, error) {
	var com *ComFabricSecretStoreClient
	err := c.createComObject("{38c4c723-3815-49d8-bdf2-68bfb536b8c9}", unsafe.Pointer(&com))
	if err != nil {
		return nil, err
	}

	return com, nil
}

type comFabricClientSettings struct {
	ole.IUnknown
}

type comFabricClientSettingsVtbl struct {
	ole.IUnknownVtbl
	SetSecurityCredentials uintptr
	SetKeepAlive           uintptr
}

func (v *comFabricClientSettings) vtable() *comFabricClientSettingsVtbl {
	return (*comFabricClientSettingsVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClientSettings) SetSecurityCredentials(
	securityCredentials *FabricSecurityCredentials,
) (err error) {
	var p_0 *innerFabricSecurityCredentials
	p_0 = securityCredentials.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().SetSecurityCredentials,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClientSettings) SetKeepAlive(
	keepAliveIntervalInSeconds uint32,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().SetKeepAlive,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(keepAliveIntervalInSeconds),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricClientSettings2 struct {
	comFabricClientSettings
}

type comFabricClientSettings2Vtbl struct {
	comFabricClientSettingsVtbl
	GetSettings uintptr
	SetSettings uintptr
}

func (v *ComFabricClientSettings2) vtable() *comFabricClientSettings2Vtbl {
	return (*comFabricClientSettings2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClientSettings2) GetSettings() (result *ComFabricClientSettingsResult, err error) {
	var p_0 *ComFabricClientSettingsResult
	defer func() {
		result = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetSettings,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClientSettings2) SetSettings(
	fabricClientSettings *FabricClientSettings,
) (err error) {
	var p_0 *innerFabricClientSettings
	p_0 = fabricClientSettings.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().SetSettings,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricPropertyManagementClient struct {
	ole.IUnknown
}

type comFabricPropertyManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginCreateName          uintptr
	EndCreateName            uintptr
	BeginDeleteName          uintptr
	EndDeleteName            uintptr
	BeginNameExists          uintptr
	EndNameExists            uintptr
	BeginEnumerateSubNames   uintptr
	EndEnumerateSubNames     uintptr
	BeginPutPropertyBinary   uintptr
	EndPutPropertyBinary     uintptr
	BeginPutPropertyInt64    uintptr
	EndPutPropertyInt64      uintptr
	BeginPutPropertyDouble   uintptr
	EndPutPropertyDouble     uintptr
	BeginPutPropertyWString  uintptr
	EndPutPropertyWString    uintptr
	BeginPutPropertyGuid     uintptr
	EndPutPropertyGuid       uintptr
	BeginDeleteProperty      uintptr
	EndDeleteProperty        uintptr
	BeginGetPropertyMetadata uintptr
	EndGetPropertyMetadata   uintptr
	BeginGetProperty         uintptr
	EndGetProperty           uintptr
	BeginSubmitPropertyBatch uintptr
	EndSubmitPropertyBatch   uintptr
	BeginEnumerateProperties uintptr
	EndEnumerateProperties   uintptr
}

func (v *comFabricPropertyManagementClient) vtable() *comFabricPropertyManagementClientVtbl {
	return (*comFabricPropertyManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPropertyManagementClient) beginCreateName(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_1, _ := windows.UTF16PtrFromString(name)
	p_0 = s_1

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateName,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endCreateName(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateName,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginDeleteName(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_2, _ := windows.UTF16PtrFromString(name)
	p_0 = s_2

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteName,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endDeleteName(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteName,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginNameExists(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_3, _ := windows.UTF16PtrFromString(name)
	p_0 = s_3

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginNameExists,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endNameExists(
	context *comIFabricAsyncOperationContext,
) (value bool, err error) {
	var p_1 bool
	defer func() {
		value = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndNameExists,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginEnumerateSubNames(
	name string,
	previousResult *comFabricNameEnumerationResult,
	recursive bool,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_4, _ := windows.UTF16PtrFromString(name)
	p_0 = s_4

	p_2 := 0
	if recursive {
		p_2 = 1
	}
	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginEnumerateSubNames,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(previousResult)),
		uintptr(p_2),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginPutPropertyBinary(
	name string,
	propertyName string,
	dataLength uint32,
	data *byte,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_5, _ := windows.UTF16PtrFromString(name)
	p_0 = s_5

	var p_1 *uint16
	s_6, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_6

	var p_6 *comIFabricAsyncOperationContext
	defer func() {
		context = p_6
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginPutPropertyBinary,
		8,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(dataLength),
		uintptr(unsafe.Pointer(data)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_6)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endPutPropertyBinary(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPutPropertyBinary,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginPutPropertyInt64(
	name string,
	propertyName string,
	data int64,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_7, _ := windows.UTF16PtrFromString(name)
	p_0 = s_7

	var p_1 *uint16
	s_8, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_8

	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginPutPropertyInt64,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(data),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endPutPropertyInt64(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPutPropertyInt64,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginPutPropertyDouble(
	name string,
	propertyName string,
	data float64,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_9, _ := windows.UTF16PtrFromString(name)
	p_0 = s_9

	var p_1 *uint16
	s_10, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_10

	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginPutPropertyDouble,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(data),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endPutPropertyDouble(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPutPropertyDouble,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginPutPropertyWString(
	name string,
	propertyName string,
	data string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_11, _ := windows.UTF16PtrFromString(name)
	p_0 = s_11

	var p_1 *uint16
	s_12, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_12

	var p_2 *uint16
	s_13, _ := windows.UTF16PtrFromString(data)
	p_2 = s_13

	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginPutPropertyWString,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endPutPropertyWString(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPutPropertyWString,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginPutPropertyGuid(
	name string,
	propertyName string,
	data *windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_14, _ := windows.UTF16PtrFromString(name)
	p_0 = s_14

	var p_1 *uint16
	s_15, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_15

	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginPutPropertyGuid,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(data)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endPutPropertyGuid(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPutPropertyGuid,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginDeleteProperty(
	name string,
	propertyName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_16, _ := windows.UTF16PtrFromString(name)
	p_0 = s_16

	var p_1 *uint16
	s_17, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_17

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteProperty,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endDeleteProperty(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteProperty,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginGetPropertyMetadata(
	name string,
	propertyName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_18, _ := windows.UTF16PtrFromString(name)
	p_0 = s_18

	var p_1 *uint16
	s_19, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_19

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPropertyMetadata,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) endGetPropertyMetadata(
	context *comIFabricAsyncOperationContext,
) (result *comFabricPropertyMetadataResult, err error) {
	var p_1 *comFabricPropertyMetadataResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPropertyMetadata,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginGetProperty(
	name string,
	propertyName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_20, _ := windows.UTF16PtrFromString(name)
	p_0 = s_20

	var p_1 *uint16
	s_21, _ := windows.UTF16PtrFromString(propertyName)
	p_1 = s_21

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetProperty,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginSubmitPropertyBatch(
	name string,
	operationCount uint32,
	operations *FabricPropertyBatchOperation,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_22, _ := windows.UTF16PtrFromString(name)
	p_0 = s_22

	var p_2 *innerFabricPropertyBatchOperation
	p_2 = operations.toInnerStruct()
	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginSubmitPropertyBatch,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(operationCount),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) beginEnumerateProperties(
	name string,
	includeValues bool,
	previousResult *comFabricPropertyEnumerationResult,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_23, _ := windows.UTF16PtrFromString(name)
	p_0 = s_23

	p_1 := 0
	if includeValues {
		p_1 = 1
	}
	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginEnumerateProperties,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(p_1),
		uintptr(unsafe.Pointer(previousResult)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyManagementClient) CreateName(
	ctx context.Context,
	name string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateName(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateName(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) DeleteName(
	ctx context.Context,
	name string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteName(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteName(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) NameExists(
	ctx context.Context,
	name string,
) (result_0 bool, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endNameExists(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginNameExists(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) PutPropertyBinary(
	ctx context.Context,
	name string,
	propertyName string,
	dataLength uint32,
	data *byte,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endPutPropertyBinary(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPutPropertyBinary(
		name,
		propertyName,
		dataLength,
		data,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) PutPropertyInt64(
	ctx context.Context,
	name string,
	propertyName string,
	data int64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endPutPropertyInt64(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPutPropertyInt64(
		name,
		propertyName,
		data,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) PutPropertyDouble(
	ctx context.Context,
	name string,
	propertyName string,
	data float64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endPutPropertyDouble(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPutPropertyDouble(
		name,
		propertyName,
		data,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) PutPropertyWString(
	ctx context.Context,
	name string,
	propertyName string,
	data string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endPutPropertyWString(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPutPropertyWString(
		name,
		propertyName,
		data,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) PutPropertyGuid(
	ctx context.Context,
	name string,
	propertyName string,
	data *windows.GUID,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endPutPropertyGuid(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPutPropertyGuid(
		name,
		propertyName,
		data,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) DeleteProperty(
	ctx context.Context,
	name string,
	propertyName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteProperty(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteProperty(
		name,
		propertyName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricPropertyManagementClient) GetPropertyMetadata(
	ctx context.Context,
	name string,
	propertyName string,
) (result_0 *FabricNamedPropertyMetadata, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPropertyMetadata(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetMetadata()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPropertyMetadata(
		name,
		propertyName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricPropertyManagementClient2 struct {
	comFabricPropertyManagementClient
}

type comFabricPropertyManagementClient2Vtbl struct {
	comFabricPropertyManagementClientVtbl
	BeginPutCustomPropertyOperation uintptr
	EndPutCustomPropertyOperation   uintptr
}

func (v *ComFabricPropertyManagementClient2) vtable() *comFabricPropertyManagementClient2Vtbl {
	return (*comFabricPropertyManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricPropertyManagementClient2) beginPutCustomPropertyOperation(
	name string,
	propertyOperation *FabricPutCustomPropertyOperation,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_24, _ := windows.UTF16PtrFromString(name)
	p_0 = s_24

	var p_1 *innerFabricPutCustomPropertyOperation
	p_1 = propertyOperation.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginPutCustomPropertyOperation,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPropertyManagementClient2) endPutCustomPropertyOperation(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndPutCustomPropertyOperation,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricPropertyManagementClient2) PutCustomPropertyOperation(
	ctx context.Context,
	name string,
	propertyOperation *FabricPutCustomPropertyOperation,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endPutCustomPropertyOperation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginPutCustomPropertyOperation(
		name,
		propertyOperation,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceManagementClient struct {
	ole.IUnknown
}

type comFabricServiceManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginCreateService                                uintptr
	EndCreateService                                  uintptr
	BeginCreateServiceFromTemplate                    uintptr
	EndCreateServiceFromTemplate                      uintptr
	BeginDeleteService                                uintptr
	EndDeleteService                                  uintptr
	BeginGetServiceDescription                        uintptr
	EndGetServiceDescription                          uintptr
	RegisterServicePartitionResolutionChangeHandler   uintptr
	UnregisterServicePartitionResolutionChangeHandler uintptr
	BeginResolveServicePartition                      uintptr
	EndResolveServicePartition                        uintptr
}

func (v *ComFabricServiceManagementClient) vtable() *comFabricServiceManagementClientVtbl {
	return (*comFabricServiceManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceManagementClient) beginCreateService(
	description *FabricServiceDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateService,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) endCreateService(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateService,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) beginCreateServiceFromTemplate(
	applicationName string,
	serviceName string,
	serviceTypeName string,
	InitializationDataSize uint32,
	InitializationData *byte,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_25, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_25

	var p_1 *uint16
	s_26, _ := windows.UTF16PtrFromString(serviceName)
	p_1 = s_26

	var p_2 *uint16
	s_27, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_2 = s_27

	var p_7 *comIFabricAsyncOperationContext
	defer func() {
		context = p_7
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginCreateServiceFromTemplate,
		9,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(InitializationDataSize),
		uintptr(unsafe.Pointer(InitializationData)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_7)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) endCreateServiceFromTemplate(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateServiceFromTemplate,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) beginDeleteService(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_28, _ := windows.UTF16PtrFromString(name)
	p_0 = s_28

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteService,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) endDeleteService(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteService,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) beginGetServiceDescription(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_29, _ := windows.UTF16PtrFromString(name)
	p_0 = s_29

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceDescription,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) endGetServiceDescription(
	context *comIFabricAsyncOperationContext,
) (result *comFabricServiceDescriptionResult, err error) {
	var p_1 *comFabricServiceDescriptionResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceDescription,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) RegisterServicePartitionResolutionChangeHandler(
	name string,
	keyType FabricPartitionKeyType,
	partitionKey interface{},
	callback *comFabricServicePartitionResolutionChangeHandler,
) (callbackHandle int64, err error) {
	var p_0 *uint16
	s_30, _ := windows.UTF16PtrFromString(name)
	p_0 = s_30

	var p_4 int64
	defer func() {
		callbackHandle = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().RegisterServicePartitionResolutionChangeHandler,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(keyType),
		uintptr(toUnsafePointer(partitionKey)),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) UnregisterServicePartitionResolutionChangeHandler(
	callbackHandle int64,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().UnregisterServicePartitionResolutionChangeHandler,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(callbackHandle),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) beginResolveServicePartition(
	name string,
	partitionKeyType FabricPartitionKeyType,
	partitionKey interface{},
	previousResult *comFabricResolvedServicePartitionResult,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_31, _ := windows.UTF16PtrFromString(name)
	p_0 = s_31

	var p_6 *comIFabricAsyncOperationContext
	defer func() {
		context = p_6
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginResolveServicePartition,
		8,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(partitionKeyType),
		uintptr(toUnsafePointer(partitionKey)),
		uintptr(unsafe.Pointer(previousResult)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_6)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient) CreateService(
	ctx context.Context,
	description *FabricServiceDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateService(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateService(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceManagementClient) CreateServiceFromTemplate(
	ctx context.Context,
	applicationName string,
	serviceName string,
	serviceTypeName string,
	InitializationDataSize uint32,
	InitializationData *byte,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateServiceFromTemplate(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateServiceFromTemplate(
		applicationName,
		serviceName,
		serviceTypeName,
		InitializationDataSize,
		InitializationData,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceManagementClient) DeleteService(
	ctx context.Context,
	name string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteService(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteService(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceManagementClient) GetServiceDescription(
	ctx context.Context,
	name string,
) (result_0 *FabricServiceDescription, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceDescription(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDescription()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceDescription(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceManagementClient2 struct {
	ComFabricServiceManagementClient
}

type comFabricServiceManagementClient2Vtbl struct {
	comFabricServiceManagementClientVtbl
	BeginGetServiceManifest uintptr
	EndGetServiceManifest   uintptr
	BeginUpdateService      uintptr
	EndUpdateService        uintptr
}

func (v *ComFabricServiceManagementClient2) vtable() *comFabricServiceManagementClient2Vtbl {
	return (*comFabricServiceManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceManagementClient2) beginGetServiceManifest(
	applicationTypeName string,
	applicationTypeVersion string,
	serviceManifestName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_32, _ := windows.UTF16PtrFromString(applicationTypeName)
	p_0 = s_32

	var p_1 *uint16
	s_33, _ := windows.UTF16PtrFromString(applicationTypeVersion)
	p_1 = s_33

	var p_2 *uint16
	s_34, _ := windows.UTF16PtrFromString(serviceManifestName)
	p_2 = s_34

	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginGetServiceManifest,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient2) endGetServiceManifest(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceManifest,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient2) beginUpdateService(
	name string,
	serviceUpdateDescription *FabricServiceUpdateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_35, _ := windows.UTF16PtrFromString(name)
	p_0 = s_35

	var p_1 *innerFabricServiceUpdateDescription
	p_1 = serviceUpdateDescription.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateService,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient2) endUpdateService(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateService,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient2) GetServiceManifest(
	ctx context.Context,
	applicationTypeName string,
	applicationTypeVersion string,
	serviceManifestName string,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceManifest(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceManifest(
		applicationTypeName,
		applicationTypeVersion,
		serviceManifestName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceManagementClient2) UpdateService(
	ctx context.Context,
	name string,
	serviceUpdateDescription *FabricServiceUpdateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateService(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateService(
		name,
		serviceUpdateDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceManagementClient3 struct {
	ComFabricServiceManagementClient2
}

type comFabricServiceManagementClient3Vtbl struct {
	comFabricServiceManagementClient2Vtbl
	BeginRemoveReplica  uintptr
	EndRemoveReplica    uintptr
	BeginRestartReplica uintptr
	EndRestartReplica   uintptr
}

func (v *ComFabricServiceManagementClient3) vtable() *comFabricServiceManagementClient3Vtbl {
	return (*comFabricServiceManagementClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceManagementClient3) beginRemoveReplica(
	description *FabricRemoveReplicaDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRemoveReplicaDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRemoveReplica,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient3) endRemoveReplica(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRemoveReplica,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient3) beginRestartReplica(
	description *FabricRestartReplicaDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRestartReplicaDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestartReplica,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient3) endRestartReplica(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRestartReplica,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient3) RemoveReplica(
	ctx context.Context,
	description *FabricRemoveReplicaDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRemoveReplica(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRemoveReplica(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceManagementClient3) RestartReplica(
	ctx context.Context,
	description *FabricRestartReplicaDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRestartReplica(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRestartReplica(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceManagementClient4 struct {
	ComFabricServiceManagementClient3
}

type comFabricServiceManagementClient4Vtbl struct {
	comFabricServiceManagementClient3Vtbl
	BeginRegisterServiceNotificationFilter   uintptr
	EndRegisterServiceNotificationFilter     uintptr
	BeginUnregisterServiceNotificationFilter uintptr
	EndUnregisterServiceNotificationFilter   uintptr
}

func (v *ComFabricServiceManagementClient4) vtable() *comFabricServiceManagementClient4Vtbl {
	return (*comFabricServiceManagementClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceManagementClient4) beginRegisterServiceNotificationFilter(
	description *FabricServiceNotificationFilterDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceNotificationFilterDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRegisterServiceNotificationFilter,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient4) endRegisterServiceNotificationFilter(
	context *comIFabricAsyncOperationContext,
) (filterId int64, err error) {
	var p_1 int64
	defer func() {
		filterId = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRegisterServiceNotificationFilter,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient4) beginUnregisterServiceNotificationFilter(
	filterId int64,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUnregisterServiceNotificationFilter,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(filterId),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient4) endUnregisterServiceNotificationFilter(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUnregisterServiceNotificationFilter,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient4) RegisterServiceNotificationFilter(
	ctx context.Context,
	description *FabricServiceNotificationFilterDescription,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endRegisterServiceNotificationFilter(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRegisterServiceNotificationFilter(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceManagementClient4) UnregisterServiceNotificationFilter(
	ctx context.Context,
	filterId int64,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUnregisterServiceNotificationFilter(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUnregisterServiceNotificationFilter(
		filterId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceManagementClient5 struct {
	ComFabricServiceManagementClient4
}

type comFabricServiceManagementClient5Vtbl struct {
	comFabricServiceManagementClient4Vtbl
	BeginDeleteService2 uintptr
	EndDeleteService2   uintptr
}

func (v *ComFabricServiceManagementClient5) vtable() *comFabricServiceManagementClient5Vtbl {
	return (*comFabricServiceManagementClient5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceManagementClient5) beginDeleteService2(
	deleteDescription *FabricDeleteServiceDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeleteServiceDescription
	p_0 = deleteDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteService2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient5) endDeleteService2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteService2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient5) DeleteService2(
	ctx context.Context,
	deleteDescription *FabricDeleteServiceDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteService2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteService2(
		deleteDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceManagementClient6 struct {
	ComFabricServiceManagementClient5
}

type comFabricServiceManagementClient6Vtbl struct {
	comFabricServiceManagementClient5Vtbl
	BeginCreateServiceFromTemplate2 uintptr
	EndCreateServiceFromTemplate2   uintptr
}

func (v *ComFabricServiceManagementClient6) vtable() *comFabricServiceManagementClient6Vtbl {
	return (*comFabricServiceManagementClient6Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceManagementClient6) beginCreateServiceFromTemplate2(
	serviceFromTemplateDescription *FabricServiceFromTemplateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceFromTemplateDescription
	p_0 = serviceFromTemplateDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateServiceFromTemplate2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient6) endCreateServiceFromTemplate2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateServiceFromTemplate2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceManagementClient6) CreateServiceFromTemplate2(
	ctx context.Context,
	serviceFromTemplateDescription *FabricServiceFromTemplateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateServiceFromTemplate2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateServiceFromTemplate2(
		serviceFromTemplateDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceGroupManagementClient struct {
	ole.IUnknown
}

type comFabricServiceGroupManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginCreateServiceGroup         uintptr
	EndCreateServiceGroup           uintptr
	BeginDeleteServiceGroup         uintptr
	EndDeleteServiceGroup           uintptr
	BeginGetServiceGroupDescription uintptr
	EndGetServiceGroupDescription   uintptr
}

func (v *ComFabricServiceGroupManagementClient) vtable() *comFabricServiceGroupManagementClientVtbl {
	return (*comFabricServiceGroupManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceGroupManagementClient) beginCreateServiceGroup(
	description *FabricServiceGroupDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceGroupDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateServiceGroup,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient) endCreateServiceGroup(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateServiceGroup,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient) beginDeleteServiceGroup(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_36, _ := windows.UTF16PtrFromString(name)
	p_0 = s_36

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteServiceGroup,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient) endDeleteServiceGroup(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteServiceGroup,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient) beginGetServiceGroupDescription(
	name string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_37, _ := windows.UTF16PtrFromString(name)
	p_0 = s_37

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceGroupDescription,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient) endGetServiceGroupDescription(
	context *comIFabricAsyncOperationContext,
) (result *comFabricServiceGroupDescriptionResult, err error) {
	var p_1 *comFabricServiceGroupDescriptionResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceGroupDescription,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient) CreateServiceGroup(
	ctx context.Context,
	description *FabricServiceGroupDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateServiceGroup(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateServiceGroup(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceGroupManagementClient) DeleteServiceGroup(
	ctx context.Context,
	name string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteServiceGroup(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteServiceGroup(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricServiceGroupManagementClient) GetServiceGroupDescription(
	ctx context.Context,
	name string,
) (result_0 *FabricServiceGroupDescription, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceGroupDescription(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDescription()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceGroupDescription(
		name,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceGroupManagementClient2 struct {
	ComFabricServiceGroupManagementClient
}

type comFabricServiceGroupManagementClient2Vtbl struct {
	comFabricServiceGroupManagementClientVtbl
	BeginUpdateServiceGroup uintptr
	EndUpdateServiceGroup   uintptr
}

func (v *ComFabricServiceGroupManagementClient2) vtable() *comFabricServiceGroupManagementClient2Vtbl {
	return (*comFabricServiceGroupManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceGroupManagementClient2) beginUpdateServiceGroup(
	name string,
	serviceGroupUpdateDescription *FabricServiceGroupUpdateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_38, _ := windows.UTF16PtrFromString(name)
	p_0 = s_38

	var p_1 *innerFabricServiceGroupUpdateDescription
	p_1 = serviceGroupUpdateDescription.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateServiceGroup,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient2) endUpdateServiceGroup(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateServiceGroup,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient2) UpdateServiceGroup(
	ctx context.Context,
	name string,
	serviceGroupUpdateDescription *FabricServiceGroupUpdateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateServiceGroup(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateServiceGroup(
		name,
		serviceGroupUpdateDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceGroupManagementClient3 struct {
	ComFabricServiceGroupManagementClient2
}

type comFabricServiceGroupManagementClient3Vtbl struct {
	comFabricServiceGroupManagementClient2Vtbl
	BeginCreateServiceGroupFromTemplate uintptr
	EndCreateServiceGroupFromTemplate   uintptr
}

func (v *ComFabricServiceGroupManagementClient3) vtable() *comFabricServiceGroupManagementClient3Vtbl {
	return (*comFabricServiceGroupManagementClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceGroupManagementClient3) beginCreateServiceGroupFromTemplate(
	applicationName string,
	serviceName string,
	serviceTypeName string,
	InitializationDataSize uint32,
	InitializationData *byte,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_39, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_39

	var p_1 *uint16
	s_40, _ := windows.UTF16PtrFromString(serviceName)
	p_1 = s_40

	var p_2 *uint16
	s_41, _ := windows.UTF16PtrFromString(serviceTypeName)
	p_2 = s_41

	var p_7 *comIFabricAsyncOperationContext
	defer func() {
		context = p_7
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginCreateServiceGroupFromTemplate,
		9,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(InitializationDataSize),
		uintptr(unsafe.Pointer(InitializationData)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_7)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient3) endCreateServiceGroupFromTemplate(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateServiceGroupFromTemplate,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient3) CreateServiceGroupFromTemplate(
	ctx context.Context,
	applicationName string,
	serviceName string,
	serviceTypeName string,
	InitializationDataSize uint32,
	InitializationData *byte,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateServiceGroupFromTemplate(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateServiceGroupFromTemplate(
		applicationName,
		serviceName,
		serviceTypeName,
		InitializationDataSize,
		InitializationData,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricServiceGroupManagementClient4 struct {
	ComFabricServiceGroupManagementClient3
}

type comFabricServiceGroupManagementClient4Vtbl struct {
	comFabricServiceGroupManagementClient3Vtbl
	BeginCreateServiceGroupFromTemplate2 uintptr
	EndCreateServiceGroupFromTemplate2   uintptr
}

func (v *ComFabricServiceGroupManagementClient4) vtable() *comFabricServiceGroupManagementClient4Vtbl {
	return (*comFabricServiceGroupManagementClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricServiceGroupManagementClient4) beginCreateServiceGroupFromTemplate2(
	serviceGroupFromTemplateDescription *FabricServiceGroupFromTemplateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceGroupFromTemplateDescription
	p_0 = serviceGroupFromTemplateDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateServiceGroupFromTemplate2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient4) endCreateServiceGroupFromTemplate2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateServiceGroupFromTemplate2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricServiceGroupManagementClient4) CreateServiceGroupFromTemplate2(
	ctx context.Context,
	serviceGroupFromTemplateDescription *FabricServiceGroupFromTemplateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateServiceGroupFromTemplate2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateServiceGroupFromTemplate2(
		serviceGroupFromTemplateDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient struct {
	ole.IUnknown
}

type comFabricApplicationManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginProvisionApplicationType         uintptr
	EndProvisionApplicationType           uintptr
	BeginCreateApplication                uintptr
	EndCreateApplication                  uintptr
	BeginUpgradeApplication               uintptr
	EndUpgradeApplication                 uintptr
	BeginGetApplicationUpgradeProgress    uintptr
	EndGetApplicationUpgradeProgress      uintptr
	BeginMoveNextApplicationUpgradeDomain uintptr
	EndMoveNextApplicationUpgradeDomain   uintptr
	BeginDeleteApplication                uintptr
	EndDeleteApplication                  uintptr
	BeginUnprovisionApplicationType       uintptr
	EndUnprovisionApplicationType         uintptr
}

func (v *ComFabricApplicationManagementClient) vtable() *comFabricApplicationManagementClientVtbl {
	return (*comFabricApplicationManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient) beginProvisionApplicationType(
	applicationBuildPath string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_42, _ := windows.UTF16PtrFromString(applicationBuildPath)
	p_0 = s_42

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginProvisionApplicationType,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endProvisionApplicationType(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndProvisionApplicationType,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) beginCreateApplication(
	description *FabricApplicationDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateApplication,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endCreateApplication(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateApplication,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) beginUpgradeApplication(
	upgradeDescription *FabricApplicationUpgradeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationUpgradeDescription
	p_0 = upgradeDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpgradeApplication,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endUpgradeApplication(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpgradeApplication,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) beginGetApplicationUpgradeProgress(
	applicationName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_43, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_43

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationUpgradeProgress,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endGetApplicationUpgradeProgress(
	context *comIFabricAsyncOperationContext,
) (result *comFabricApplicationUpgradeProgressResult2, err error) {
	var p_1 *comFabricApplicationUpgradeProgressResult2
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationUpgradeProgress,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) beginMoveNextApplicationUpgradeDomain(
	progress *comFabricApplicationUpgradeProgressResult2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginMoveNextApplicationUpgradeDomain,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(progress)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endMoveNextApplicationUpgradeDomain(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndMoveNextApplicationUpgradeDomain,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) beginDeleteApplication(
	applicationName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_44, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_44

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteApplication,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endDeleteApplication(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteApplication,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) beginUnprovisionApplicationType(
	applicationTypeName string,
	applicationTypeVersion string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_45, _ := windows.UTF16PtrFromString(applicationTypeName)
	p_0 = s_45

	var p_1 *uint16
	s_46, _ := windows.UTF16PtrFromString(applicationTypeVersion)
	p_1 = s_46

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUnprovisionApplicationType,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) endUnprovisionApplicationType(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUnprovisionApplicationType,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient) ProvisionApplicationType(
	ctx context.Context,
	applicationBuildPath string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endProvisionApplicationType(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginProvisionApplicationType(
		applicationBuildPath,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient) CreateApplication(
	ctx context.Context,
	description *FabricApplicationDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateApplication(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateApplication(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient) UpgradeApplication(
	ctx context.Context,
	upgradeDescription *FabricApplicationUpgradeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpgradeApplication(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpgradeApplication(
		upgradeDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient) GetApplicationUpgradeProgress(
	ctx context.Context,
	applicationName string,
) (result_0 FabricRollingUpgradeMode, result_1 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationUpgradeProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetRollingUpgradeMode()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetNextUpgradeDomain()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationUpgradeProgress(
		applicationName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient) MoveNextApplicationUpgradeDomain(
	ctx context.Context,
	progress *comFabricApplicationUpgradeProgressResult2,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endMoveNextApplicationUpgradeDomain(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginMoveNextApplicationUpgradeDomain(
		progress,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient) DeleteApplication(
	ctx context.Context,
	applicationName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteApplication(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteApplication(
		applicationName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient) UnprovisionApplicationType(
	ctx context.Context,
	applicationTypeName string,
	applicationTypeVersion string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUnprovisionApplicationType(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUnprovisionApplicationType(
		applicationTypeName,
		applicationTypeVersion,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient2 struct {
	ComFabricApplicationManagementClient
}

type comFabricApplicationManagementClient2Vtbl struct {
	comFabricApplicationManagementClientVtbl
	BeginGetApplicationManifest            uintptr
	EndGetApplicationManifest              uintptr
	BeginMoveNextApplicationUpgradeDomain2 uintptr
	EndMoveNextApplicationUpgradeDomain2   uintptr
}

func (v *ComFabricApplicationManagementClient2) vtable() *comFabricApplicationManagementClient2Vtbl {
	return (*comFabricApplicationManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient2) beginGetApplicationManifest(
	applicationTypeName string,
	applicationTypeVersion string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_47, _ := windows.UTF16PtrFromString(applicationTypeName)
	p_0 = s_47

	var p_1 *uint16
	s_48, _ := windows.UTF16PtrFromString(applicationTypeVersion)
	p_1 = s_48

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationManifest,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient2) endGetApplicationManifest(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationManifest,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient2) beginMoveNextApplicationUpgradeDomain2(
	applicationName string,
	nextUpgradeDomain string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_49, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_49

	var p_1 *uint16
	s_50, _ := windows.UTF16PtrFromString(nextUpgradeDomain)
	p_1 = s_50

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginMoveNextApplicationUpgradeDomain2,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient2) endMoveNextApplicationUpgradeDomain2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndMoveNextApplicationUpgradeDomain2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient2) GetApplicationManifest(
	ctx context.Context,
	applicationTypeName string,
	applicationTypeVersion string,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationManifest(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationManifest(
		applicationTypeName,
		applicationTypeVersion,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient2) MoveNextApplicationUpgradeDomain2(
	ctx context.Context,
	applicationName string,
	nextUpgradeDomain string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endMoveNextApplicationUpgradeDomain2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginMoveNextApplicationUpgradeDomain2(
		applicationName,
		nextUpgradeDomain,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient3 struct {
	ComFabricApplicationManagementClient2
}

type comFabricApplicationManagementClient3Vtbl struct {
	comFabricApplicationManagementClient2Vtbl
	BeginUpdateApplicationUpgrade   uintptr
	EndUpdateApplicationUpgrade     uintptr
	BeginRestartDeployedCodePackage uintptr
	EndRestartDeployedCodePackage   uintptr
	CopyApplicationPackage          uintptr
	RemoveApplicationPackage        uintptr
}

func (v *ComFabricApplicationManagementClient3) vtable() *comFabricApplicationManagementClient3Vtbl {
	return (*comFabricApplicationManagementClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient3) beginUpdateApplicationUpgrade(
	description *FabricApplicationUpgradeUpdateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationUpgradeUpdateDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateApplicationUpgrade,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient3) endUpdateApplicationUpgrade(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateApplicationUpgrade,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient3) beginRestartDeployedCodePackage(
	restartCodePackageDescription *FabricRestartDeployedCodePackageDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRestartDeployedCodePackageDescription
	p_0 = restartCodePackageDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestartDeployedCodePackage,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient3) endRestartDeployedCodePackage(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRestartDeployedCodePackage,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient3) CopyApplicationPackage(
	imageStoreConnectionString string,
	applicationPackagePath string,
	applicationPackagePathInImageStore string,
) (err error) {
	var p_0 *uint16
	s_51, _ := windows.UTF16PtrFromString(imageStoreConnectionString)
	p_0 = s_51

	var p_1 *uint16
	s_52, _ := windows.UTF16PtrFromString(applicationPackagePath)
	p_1 = s_52

	var p_2 *uint16
	s_53, _ := windows.UTF16PtrFromString(applicationPackagePathInImageStore)
	p_2 = s_53

	hr, _, err1 := syscall.Syscall6(
		v.vtable().CopyApplicationPackage,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient3) RemoveApplicationPackage(
	imageStoreConnectionString string,
	applicationPackagePathInImageStore string,
) (err error) {
	var p_0 *uint16
	s_54, _ := windows.UTF16PtrFromString(imageStoreConnectionString)
	p_0 = s_54

	var p_1 *uint16
	s_55, _ := windows.UTF16PtrFromString(applicationPackagePathInImageStore)
	p_1 = s_55

	hr, _, err1 := syscall.Syscall(
		v.vtable().RemoveApplicationPackage,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient3) UpdateApplicationUpgrade(
	ctx context.Context,
	description *FabricApplicationUpgradeUpdateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateApplicationUpgrade(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateApplicationUpgrade(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricApplicationManagementClient3) RestartDeployedCodePackage(
	ctx context.Context,
	restartCodePackageDescription *FabricRestartDeployedCodePackageDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRestartDeployedCodePackage(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRestartDeployedCodePackage(
		restartCodePackageDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient4 struct {
	ComFabricApplicationManagementClient3
}

type comFabricApplicationManagementClient4Vtbl struct {
	comFabricApplicationManagementClient3Vtbl
	BeginDeployServicePackageToNode uintptr
	EndDeployServicePackageToNode   uintptr
}

func (v *ComFabricApplicationManagementClient4) vtable() *comFabricApplicationManagementClient4Vtbl {
	return (*comFabricApplicationManagementClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient4) beginDeployServicePackageToNode(
	applicationTypeName string,
	applicationTypeVersion string,
	serviceManifestName string,
	sharingPolicy []FabricPackageSharingPolicy,
	nodeName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_56, _ := windows.UTF16PtrFromString(applicationTypeName)
	p_0 = s_56

	var p_1 *uint16
	s_57, _ := windows.UTF16PtrFromString(applicationTypeVersion)
	p_1 = s_57

	var p_2 *uint16
	s_58, _ := windows.UTF16PtrFromString(serviceManifestName)
	p_2 = s_58

	var p_3 *innerFabricPackageSharingPolicyList
	{
		lst := &innerFabricPackageSharingPolicyList{}

		var tmp []innerFabricPackageSharingPolicy

		for _, item := range sharingPolicy {
			var tmpitem innerFabricPackageSharingPolicy

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_3 = lst
	}
	var p_4 *uint16
	s_60, _ := windows.UTF16PtrFromString(nodeName)
	p_4 = s_60

	var p_7 *comIFabricAsyncOperationContext
	defer func() {
		context = p_7
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginDeployServicePackageToNode,
		9,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(unsafe.Pointer(p_3)),
		uintptr(unsafe.Pointer(p_4)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_7)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient4) endDeployServicePackageToNode(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeployServicePackageToNode,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient4) DeployServicePackageToNode(
	ctx context.Context,
	applicationTypeName string,
	applicationTypeVersion string,
	serviceManifestName string,
	sharingPolicy []FabricPackageSharingPolicy,
	nodeName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeployServicePackageToNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeployServicePackageToNode(
		applicationTypeName,
		applicationTypeVersion,
		serviceManifestName,
		sharingPolicy,
		nodeName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient5 struct {
	ComFabricApplicationManagementClient4
}

type comFabricApplicationManagementClient5Vtbl struct {
	comFabricApplicationManagementClient4Vtbl
	BeginRollbackApplicationUpgrade uintptr
	EndRollbackApplicationUpgrade   uintptr
}

func (v *ComFabricApplicationManagementClient5) vtable() *comFabricApplicationManagementClient5Vtbl {
	return (*comFabricApplicationManagementClient5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient5) beginRollbackApplicationUpgrade(
	applicationName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_61, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_61

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRollbackApplicationUpgrade,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient5) endRollbackApplicationUpgrade(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRollbackApplicationUpgrade,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient5) RollbackApplicationUpgrade(
	ctx context.Context,
	applicationName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRollbackApplicationUpgrade(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRollbackApplicationUpgrade(
		applicationName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient6 struct {
	ComFabricApplicationManagementClient5
}

type comFabricApplicationManagementClient6Vtbl struct {
	comFabricApplicationManagementClient5Vtbl
	BeginUpdateApplication uintptr
	EndUpdateApplication   uintptr
}

func (v *ComFabricApplicationManagementClient6) vtable() *comFabricApplicationManagementClient6Vtbl {
	return (*comFabricApplicationManagementClient6Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient6) beginUpdateApplication(
	applicationUpdateDescription *FabricApplicationUpdateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationUpdateDescription
	p_0 = applicationUpdateDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateApplication,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient6) endUpdateApplication(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateApplication,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient6) UpdateApplication(
	ctx context.Context,
	applicationUpdateDescription *FabricApplicationUpdateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateApplication(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateApplication(
		applicationUpdateDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient7 struct {
	ComFabricApplicationManagementClient6
}

type comFabricApplicationManagementClient7Vtbl struct {
	comFabricApplicationManagementClient6Vtbl
	BeginDeleteApplication2 uintptr
	EndDeleteApplication2   uintptr
}

func (v *ComFabricApplicationManagementClient7) vtable() *comFabricApplicationManagementClient7Vtbl {
	return (*comFabricApplicationManagementClient7Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient7) beginDeleteApplication2(
	deleteDescription *FabricDeleteApplicationDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeleteApplicationDescription
	p_0 = deleteDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteApplication2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient7) endDeleteApplication2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteApplication2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient7) DeleteApplication2(
	ctx context.Context,
	deleteDescription *FabricDeleteApplicationDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteApplication2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteApplication2(
		deleteDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient8 struct {
	ComFabricApplicationManagementClient7
}

type comFabricApplicationManagementClient8Vtbl struct {
	comFabricApplicationManagementClient7Vtbl
	BeginProvisionApplicationType2 uintptr
	EndProvisionApplicationType2   uintptr
}

func (v *ComFabricApplicationManagementClient8) vtable() *comFabricApplicationManagementClient8Vtbl {
	return (*comFabricApplicationManagementClient8Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient8) beginProvisionApplicationType2(
	description *FabricProvisionApplicationTypeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricProvisionApplicationTypeDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginProvisionApplicationType2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient8) endProvisionApplicationType2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndProvisionApplicationType2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient8) ProvisionApplicationType2(
	ctx context.Context,
	description *FabricProvisionApplicationTypeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endProvisionApplicationType2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginProvisionApplicationType2(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient9 struct {
	ComFabricApplicationManagementClient8
}

type comFabricApplicationManagementClient9Vtbl struct {
	comFabricApplicationManagementClient8Vtbl
	BeginUnprovisionApplicationType2 uintptr
	EndUnprovisionApplicationType2   uintptr
}

func (v *ComFabricApplicationManagementClient9) vtable() *comFabricApplicationManagementClient9Vtbl {
	return (*comFabricApplicationManagementClient9Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient9) beginUnprovisionApplicationType2(
	description *FabricUnprovisionApplicationTypeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricUnprovisionApplicationTypeDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUnprovisionApplicationType2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient9) endUnprovisionApplicationType2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUnprovisionApplicationType2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient9) UnprovisionApplicationType2(
	ctx context.Context,
	description *FabricUnprovisionApplicationTypeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUnprovisionApplicationType2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUnprovisionApplicationType2(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricApplicationManagementClient10 struct {
	ComFabricApplicationManagementClient9
}

type comFabricApplicationManagementClient10Vtbl struct {
	comFabricApplicationManagementClient9Vtbl
	BeginProvisionApplicationType3 uintptr
	EndProvisionApplicationType3   uintptr
}

func (v *ComFabricApplicationManagementClient10) vtable() *comFabricApplicationManagementClient10Vtbl {
	return (*comFabricApplicationManagementClient10Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricApplicationManagementClient10) beginProvisionApplicationType3(
	description *FabricProvisionApplicationTypeDescriptionBase,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricProvisionApplicationTypeDescriptionBase
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginProvisionApplicationType3,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient10) endProvisionApplicationType3(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndProvisionApplicationType3,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricApplicationManagementClient10) ProvisionApplicationType3(
	ctx context.Context,
	description *FabricProvisionApplicationTypeDescriptionBase,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endProvisionApplicationType3(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginProvisionApplicationType3(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient struct {
	ole.IUnknown
}

type comFabricClusterManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginNodeStateRemoved  uintptr
	EndNodeStateRemoved    uintptr
	BeginRecoverPartitions uintptr
	EndRecoverPartitions   uintptr
}

func (v *ComFabricClusterManagementClient) vtable() *comFabricClusterManagementClientVtbl {
	return (*comFabricClusterManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient) beginNodeStateRemoved(
	nodeName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_62, _ := windows.UTF16PtrFromString(nodeName)
	p_0 = s_62

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginNodeStateRemoved,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient) endNodeStateRemoved(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndNodeStateRemoved,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient) beginRecoverPartitions(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRecoverPartitions,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient) endRecoverPartitions(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRecoverPartitions,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient) NodeStateRemoved(
	ctx context.Context,
	nodeName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endNodeStateRemoved(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginNodeStateRemoved(
		nodeName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient) RecoverPartitions(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRecoverPartitions(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRecoverPartitions(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient2 struct {
	ComFabricClusterManagementClient
}

type comFabricClusterManagementClient2Vtbl struct {
	comFabricClusterManagementClientVtbl
	BeginDeactivateNode               uintptr
	EndDeactivateNode                 uintptr
	BeginActivateNode                 uintptr
	EndActivateNode                   uintptr
	BeginProvisionFabric              uintptr
	EndProvisionFabric                uintptr
	BeginUpgradeFabric                uintptr
	EndUpgradeFabric                  uintptr
	BeginGetFabricUpgradeProgress     uintptr
	EndGetFabricUpgradeProgress       uintptr
	BeginMoveNextFabricUpgradeDomain  uintptr
	EndMoveNextFabricUpgradeDomain    uintptr
	BeginMoveNextFabricUpgradeDomain2 uintptr
	EndMoveNextFabricUpgradeDomain2   uintptr
	BeginUnprovisionFabric            uintptr
	EndUnprovisionFabric              uintptr
	BeginGetClusterManifest           uintptr
	EndGetClusterManifest             uintptr
	BeginRecoverPartition             uintptr
	EndRecoverPartition               uintptr
	BeginRecoverServicePartitions     uintptr
	EndRecoverServicePartitions       uintptr
	BeginRecoverSystemPartitions      uintptr
	EndRecoverSystemPartitions        uintptr
}

func (v *ComFabricClusterManagementClient2) vtable() *comFabricClusterManagementClient2Vtbl {
	return (*comFabricClusterManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient2) beginDeactivateNode(
	nodeName string,
	intent FabricNodeDeactivationIntent,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_63, _ := windows.UTF16PtrFromString(nodeName)
	p_0 = s_63

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeactivateNode,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(intent),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endDeactivateNode(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeactivateNode,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginActivateNode(
	nodeName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_64, _ := windows.UTF16PtrFromString(nodeName)
	p_0 = s_64

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginActivateNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endActivateNode(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndActivateNode,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginProvisionFabric(
	codeFilepath string,
	clusterManifestFilepath string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_65, _ := windows.UTF16PtrFromString(codeFilepath)
	p_0 = s_65

	var p_1 *uint16
	s_66, _ := windows.UTF16PtrFromString(clusterManifestFilepath)
	p_1 = s_66

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginProvisionFabric,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endProvisionFabric(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndProvisionFabric,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginUpgradeFabric(
	upgradeDescription *FabricUpgradeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricUpgradeDescription
	p_0 = upgradeDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpgradeFabric,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endUpgradeFabric(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpgradeFabric,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginGetFabricUpgradeProgress(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetFabricUpgradeProgress,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endGetFabricUpgradeProgress(
	context *comIFabricAsyncOperationContext,
) (result *comFabricUpgradeProgressResult2, err error) {
	var p_1 *comFabricUpgradeProgressResult2
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetFabricUpgradeProgress,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginMoveNextFabricUpgradeDomain(
	progress *comFabricUpgradeProgressResult2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginMoveNextFabricUpgradeDomain,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(progress)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endMoveNextFabricUpgradeDomain(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndMoveNextFabricUpgradeDomain,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginMoveNextFabricUpgradeDomain2(
	nextUpgradeDomain string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_67, _ := windows.UTF16PtrFromString(nextUpgradeDomain)
	p_0 = s_67

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginMoveNextFabricUpgradeDomain2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endMoveNextFabricUpgradeDomain2(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndMoveNextFabricUpgradeDomain2,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginUnprovisionFabric(
	codeVersion string,
	configVersion string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_68, _ := windows.UTF16PtrFromString(codeVersion)
	p_0 = s_68

	var p_1 *uint16
	s_69, _ := windows.UTF16PtrFromString(configVersion)
	p_1 = s_69

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUnprovisionFabric,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endUnprovisionFabric(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUnprovisionFabric,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginGetClusterManifest(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterManifest,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endGetClusterManifest(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterManifest,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginRecoverPartition(
	partitionId windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRecoverPartition,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&partitionId)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endRecoverPartition(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRecoverPartition,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginRecoverServicePartitions(
	serviceName string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_70, _ := windows.UTF16PtrFromString(serviceName)
	p_0 = s_70

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRecoverServicePartitions,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endRecoverServicePartitions(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRecoverServicePartitions,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) beginRecoverSystemPartitions(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRecoverSystemPartitions,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) endRecoverSystemPartitions(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRecoverSystemPartitions,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient2) DeactivateNode(
	ctx context.Context,
	nodeName string,
	intent FabricNodeDeactivationIntent,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeactivateNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeactivateNode(
		nodeName,
		intent,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) ActivateNode(
	ctx context.Context,
	nodeName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endActivateNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginActivateNode(
		nodeName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) ProvisionFabric(
	ctx context.Context,
	codeFilepath string,
	clusterManifestFilepath string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endProvisionFabric(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginProvisionFabric(
		codeFilepath,
		clusterManifestFilepath,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) UpgradeFabric(
	ctx context.Context,
	upgradeDescription *FabricUpgradeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpgradeFabric(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpgradeFabric(
		upgradeDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) GetFabricUpgradeProgress(
	ctx context.Context,
) (result_0 FabricRollingUpgradeMode, result_1 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetFabricUpgradeProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetRollingUpgradeMode()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetNextUpgradeDomain()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetFabricUpgradeProgress(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) MoveNextFabricUpgradeDomain(
	ctx context.Context,
	progress *comFabricUpgradeProgressResult2,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endMoveNextFabricUpgradeDomain(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginMoveNextFabricUpgradeDomain(
		progress,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) MoveNextFabricUpgradeDomain2(
	ctx context.Context,
	nextUpgradeDomain string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endMoveNextFabricUpgradeDomain2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginMoveNextFabricUpgradeDomain2(
		nextUpgradeDomain,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) UnprovisionFabric(
	ctx context.Context,
	codeVersion string,
	configVersion string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUnprovisionFabric(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUnprovisionFabric(
		codeVersion,
		configVersion,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) GetClusterManifest(
	ctx context.Context,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterManifest(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterManifest(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) RecoverPartition(
	ctx context.Context,
	partitionId windows.GUID,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRecoverPartition(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRecoverPartition(
		partitionId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) RecoverServicePartitions(
	ctx context.Context,
	serviceName string,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRecoverServicePartitions(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRecoverServicePartitions(
		serviceName,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient2) RecoverSystemPartitions(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRecoverSystemPartitions(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRecoverSystemPartitions(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient3 struct {
	ComFabricClusterManagementClient2
}

type comFabricClusterManagementClient3Vtbl struct {
	comFabricClusterManagementClient2Vtbl
	BeginUpdateFabricUpgrade uintptr
	EndUpdateFabricUpgrade   uintptr
	BeginStopNode            uintptr
	EndStopNode              uintptr
	BeginRestartNode         uintptr
	EndRestartNode           uintptr
	BeginStartNode           uintptr
	EndStartNode             uintptr
	CopyClusterPackage       uintptr
	RemoveClusterPackage     uintptr
}

func (v *ComFabricClusterManagementClient3) vtable() *comFabricClusterManagementClient3Vtbl {
	return (*comFabricClusterManagementClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient3) beginUpdateFabricUpgrade(
	description *FabricUpgradeUpdateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricUpgradeUpdateDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateFabricUpgrade,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) endUpdateFabricUpgrade(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateFabricUpgrade,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) beginStopNode(
	stopNodeDescription *FabricStopNodeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStopNodeDescription
	p_0 = stopNodeDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStopNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) endStopNode(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStopNode,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) beginRestartNode(
	restartNodeDescription *FabricRestartNodeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRestartNodeDescription
	p_0 = restartNodeDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestartNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) endRestartNode(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRestartNode,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) beginStartNode(
	startNodeDescription *FabricStartNodeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartNodeDescription
	p_0 = startNodeDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) endStartNode(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartNode,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) CopyClusterPackage(
	imageStoreConnectionString string,
	clusterManifestPath string,
	clusterManifestPathInImageStore string,
	codePackagePath string,
	codePackagePathInImageStore string,
) (err error) {
	var p_0 *uint16
	s_71, _ := windows.UTF16PtrFromString(imageStoreConnectionString)
	p_0 = s_71

	var p_1 *uint16
	s_72, _ := windows.UTF16PtrFromString(clusterManifestPath)
	p_1 = s_72

	var p_2 *uint16
	s_73, _ := windows.UTF16PtrFromString(clusterManifestPathInImageStore)
	p_2 = s_73

	var p_3 *uint16
	s_74, _ := windows.UTF16PtrFromString(codePackagePath)
	p_3 = s_74

	var p_4 *uint16
	s_75, _ := windows.UTF16PtrFromString(codePackagePathInImageStore)
	p_4 = s_75

	hr, _, err1 := syscall.Syscall6(
		v.vtable().CopyClusterPackage,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(unsafe.Pointer(p_3)),
		uintptr(unsafe.Pointer(p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) RemoveClusterPackage(
	imageStoreConnectionString string,
	clusterManifestPathInImageStore string,
	codePackagePathInImageStore string,
) (err error) {
	var p_0 *uint16
	s_76, _ := windows.UTF16PtrFromString(imageStoreConnectionString)
	p_0 = s_76

	var p_1 *uint16
	s_77, _ := windows.UTF16PtrFromString(clusterManifestPathInImageStore)
	p_1 = s_77

	var p_2 *uint16
	s_78, _ := windows.UTF16PtrFromString(codePackagePathInImageStore)
	p_2 = s_78

	hr, _, err1 := syscall.Syscall6(
		v.vtable().RemoveClusterPackage,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient3) UpdateFabricUpgrade(
	ctx context.Context,
	description *FabricUpgradeUpdateDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpdateFabricUpgrade(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateFabricUpgrade(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient3) StopNode(
	ctx context.Context,
	stopNodeDescription *FabricStopNodeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStopNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStopNode(
		stopNodeDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient3) RestartNode(
	ctx context.Context,
	restartNodeDescription *FabricRestartNodeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRestartNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRestartNode(
		restartNodeDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient3) StartNode(
	ctx context.Context,
	startNodeDescription *FabricStartNodeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartNode(
		startNodeDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient4 struct {
	ComFabricClusterManagementClient3
}

type comFabricClusterManagementClient4Vtbl struct {
	comFabricClusterManagementClient3Vtbl
	BeginRollbackFabricUpgrade uintptr
	EndRollbackFabricUpgrade   uintptr
}

func (v *ComFabricClusterManagementClient4) vtable() *comFabricClusterManagementClient4Vtbl {
	return (*comFabricClusterManagementClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient4) beginRollbackFabricUpgrade(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRollbackFabricUpgrade,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient4) endRollbackFabricUpgrade(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRollbackFabricUpgrade,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient4) RollbackFabricUpgrade(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endRollbackFabricUpgrade(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRollbackFabricUpgrade(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient5 struct {
	ComFabricClusterManagementClient4
}

type comFabricClusterManagementClient5Vtbl struct {
	comFabricClusterManagementClient4Vtbl
	BeginResetPartitionLoad uintptr
	EndResetPartitionLoad   uintptr
}

func (v *ComFabricClusterManagementClient5) vtable() *comFabricClusterManagementClient5Vtbl {
	return (*comFabricClusterManagementClient5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient5) beginResetPartitionLoad(
	partitionId windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginResetPartitionLoad,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&partitionId)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient5) endResetPartitionLoad(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndResetPartitionLoad,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient5) ResetPartitionLoad(
	ctx context.Context,
	partitionId windows.GUID,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endResetPartitionLoad(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginResetPartitionLoad(
		partitionId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient6 struct {
	ComFabricClusterManagementClient5
}

type comFabricClusterManagementClient6Vtbl struct {
	comFabricClusterManagementClient5Vtbl
	BeginToggleVerboseServicePlacementHealthReporting uintptr
	EndToggleVerboseServicePlacementHealthReporting   uintptr
}

func (v *ComFabricClusterManagementClient6) vtable() *comFabricClusterManagementClient6Vtbl {
	return (*comFabricClusterManagementClient6Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient6) beginToggleVerboseServicePlacementHealthReporting(
	enabled bool,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	p_0 := 0
	if enabled {
		p_0 = 1
	}
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginToggleVerboseServicePlacementHealthReporting,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(p_0),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient6) endToggleVerboseServicePlacementHealthReporting(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndToggleVerboseServicePlacementHealthReporting,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient6) ToggleVerboseServicePlacementHealthReporting(
	ctx context.Context,
	enabled bool,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endToggleVerboseServicePlacementHealthReporting(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginToggleVerboseServicePlacementHealthReporting(
		enabled,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricClusterManagementClient7 struct {
	ComFabricClusterManagementClient6
}

type comFabricClusterManagementClient7Vtbl struct {
	comFabricClusterManagementClient6Vtbl
	BeginUpgradeConfiguration                 uintptr
	EndUpgradeConfiguration                   uintptr
	BeginGetClusterConfigurationUpgradeStatus uintptr
	EndGetClusterConfigurationUpgradeStatus   uintptr
	BeginGetClusterConfiguration              uintptr
	EndGetClusterConfiguration                uintptr
	BeginGetUpgradesPendingApproval           uintptr
	EndGetUpgradesPendingApproval             uintptr
	BeginStartApprovedUpgrades                uintptr
	EndStartApprovedUpgrades                  uintptr
}

func (v *ComFabricClusterManagementClient7) vtable() *comFabricClusterManagementClient7Vtbl {
	return (*comFabricClusterManagementClient7Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClusterManagementClient7) beginUpgradeConfiguration(
	startUpgradeDescription *FabricStartUpgradeDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartUpgradeDescription
	p_0 = startUpgradeDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpgradeConfiguration,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) endUpgradeConfiguration(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpgradeConfiguration,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) beginGetClusterConfigurationUpgradeStatus(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterConfigurationUpgradeStatus,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) endGetClusterConfigurationUpgradeStatus(
	context *comIFabricAsyncOperationContext,
) (result *comFabricOrchestrationUpgradeStatusResult, err error) {
	var p_1 *comFabricOrchestrationUpgradeStatusResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterConfigurationUpgradeStatus,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) beginGetClusterConfiguration(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterConfiguration,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) endGetClusterConfiguration(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterConfiguration,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) beginGetUpgradesPendingApproval(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetUpgradesPendingApproval,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) endGetUpgradesPendingApproval(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetUpgradesPendingApproval,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) beginStartApprovedUpgrades(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartApprovedUpgrades,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) endStartApprovedUpgrades(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartApprovedUpgrades,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricClusterManagementClient7) UpgradeConfiguration(
	ctx context.Context,
	startUpgradeDescription *FabricStartUpgradeDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endUpgradeConfiguration(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpgradeConfiguration(
		startUpgradeDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient7) GetClusterConfigurationUpgradeStatus(
	ctx context.Context,
) (result_0 *FabricOrchestrationUpgradeProgress, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterConfigurationUpgradeStatus(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProgress()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterConfigurationUpgradeStatus(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient7) GetClusterConfiguration(
	ctx context.Context,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterConfiguration(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterConfiguration(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient7) GetUpgradesPendingApproval(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endGetUpgradesPendingApproval(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetUpgradesPendingApproval(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricClusterManagementClient7) StartApprovedUpgrades(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartApprovedUpgrades(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartApprovedUpgrades(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type comFabricClusterManagementClient8 struct {
	ComFabricClusterManagementClient7
}

type comFabricClusterManagementClient8Vtbl struct {
	comFabricClusterManagementClient7Vtbl
	BeginGetClusterManifest2 uintptr
	EndGetClusterManifest2   uintptr
}

func (v *comFabricClusterManagementClient8) vtable() *comFabricClusterManagementClient8Vtbl {
	return (*comFabricClusterManagementClient8Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClusterManagementClient8) beginGetClusterManifest2(
	queryDescription *FabricClusterManifestQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricClusterManifestQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterManifest2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient8) endGetClusterManifest2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterManifest2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient8) GetClusterManifest2(
	ctx context.Context,
	queryDescription *FabricClusterManifestQueryDescription,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterManifest2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterManifest2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type comFabricClusterManagementClient9 struct {
	comFabricClusterManagementClient8
}

type comFabricClusterManagementClient9Vtbl struct {
	comFabricClusterManagementClient8Vtbl
	BeginGetUpgradeOrchestrationServiceState uintptr
	EndGetUpgradeOrchestrationServiceState   uintptr
	BeginSetUpgradeOrchestrationServiceState uintptr
	EndSetUpgradeOrchestrationServiceState   uintptr
}

func (v *comFabricClusterManagementClient9) vtable() *comFabricClusterManagementClient9Vtbl {
	return (*comFabricClusterManagementClient9Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClusterManagementClient9) beginGetUpgradeOrchestrationServiceState(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetUpgradeOrchestrationServiceState,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient9) endGetUpgradeOrchestrationServiceState(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetUpgradeOrchestrationServiceState,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient9) beginSetUpgradeOrchestrationServiceState(
	state string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_79, _ := windows.UTF16PtrFromString(state)
	p_0 = s_79

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginSetUpgradeOrchestrationServiceState,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient9) endSetUpgradeOrchestrationServiceState(
	context *comIFabricAsyncOperationContext,
) (result *comFabricUpgradeOrchestrationServiceStateResult, err error) {
	var p_1 *comFabricUpgradeOrchestrationServiceStateResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndSetUpgradeOrchestrationServiceState,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient9) GetUpgradeOrchestrationServiceState(
	ctx context.Context,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetUpgradeOrchestrationServiceState(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetUpgradeOrchestrationServiceState(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricClusterManagementClient9) SetUpgradeOrchestrationServiceState(
	ctx context.Context,
	state string,
) (result_0 *FabricUpgradeOrchestrationServiceState, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endSetUpgradeOrchestrationServiceState(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetState()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginSetUpgradeOrchestrationServiceState(
		state,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type comFabricClusterManagementClient10 struct {
	comFabricClusterManagementClient9
}

type comFabricClusterManagementClient10Vtbl struct {
	comFabricClusterManagementClient9Vtbl
	BeginGetClusterConfiguration2 uintptr
	EndGetClusterConfiguration2   uintptr
}

func (v *comFabricClusterManagementClient10) vtable() *comFabricClusterManagementClient10Vtbl {
	return (*comFabricClusterManagementClient10Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClusterManagementClient10) beginGetClusterConfiguration2(
	apiVersion string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_80, _ := windows.UTF16PtrFromString(apiVersion)
	p_0 = s_80

	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterConfiguration2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient10) endGetClusterConfiguration2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterConfiguration2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClusterManagementClient10) GetClusterConfiguration2(
	ctx context.Context,
	apiVersion string,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterConfiguration2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterConfiguration2(
		apiVersion,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricHealthClient struct {
	ole.IUnknown
}

type comFabricHealthClientVtbl struct {
	ole.IUnknownVtbl
	ReportHealth                         uintptr
	BeginGetClusterHealth                uintptr
	EndGetClusterHealth                  uintptr
	BeginGetNodeHealth                   uintptr
	EndGetNodeHealth                     uintptr
	BeginGetApplicationHealth            uintptr
	EndGetApplicationHealth              uintptr
	BeginGetServiceHealth                uintptr
	EndGetServiceHealth                  uintptr
	BeginGetPartitionHealth              uintptr
	EndGetPartitionHealth                uintptr
	BeginGetReplicaHealth                uintptr
	EndGetReplicaHealth                  uintptr
	BeginGetDeployedApplicationHealth    uintptr
	EndGetDeployedApplicationHealth      uintptr
	BeginGetDeployedServicePackageHealth uintptr
	EndGetDeployedServicePackageHealth   uintptr
}

func (v *ComFabricHealthClient) vtable() *comFabricHealthClientVtbl {
	return (*comFabricHealthClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricHealthClient) ReportHealth(
	healthReport *FabricHealthReport,
) (err error) {
	var p_0 *innerFabricHealthReport
	p_0 = healthReport.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportHealth,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetClusterHealth(
	healthPolicy *FabricClusterHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricClusterHealthPolicy
	p_0 = healthPolicy.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterHealth,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetClusterHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricClusterHealthResult, err error) {
	var p_1 *comFabricClusterHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetNodeHealth(
	nodeName string,
	healthPolicy *FabricClusterHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_81, _ := windows.UTF16PtrFromString(nodeName)
	p_0 = s_81

	var p_1 *innerFabricClusterHealthPolicy
	p_1 = healthPolicy.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNodeHealth,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetNodeHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricNodeHealthResult, err error) {
	var p_1 *comFabricNodeHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNodeHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetApplicationHealth(
	applicationName string,
	healthPolicy *FabricApplicationHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_82, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_82

	var p_1 *innerFabricApplicationHealthPolicy
	p_1 = healthPolicy.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationHealth,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetApplicationHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricApplicationHealthResult, err error) {
	var p_1 *comFabricApplicationHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetServiceHealth(
	serviceName string,
	healthPolicy *FabricApplicationHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_83, _ := windows.UTF16PtrFromString(serviceName)
	p_0 = s_83

	var p_1 *innerFabricApplicationHealthPolicy
	p_1 = healthPolicy.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceHealth,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetServiceHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricServiceHealthResult, err error) {
	var p_1 *comFabricServiceHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetPartitionHealth(
	partitionId windows.GUID,
	healthPolicy *FabricApplicationHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_1 *innerFabricApplicationHealthPolicy
	p_1 = healthPolicy.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionHealth,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&partitionId)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetPartitionHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricPartitionHealthResult, err error) {
	var p_1 *comFabricPartitionHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetReplicaHealth(
	partitionId windows.GUID,
	replicaId int64,
	healthPolicy *FabricApplicationHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *innerFabricApplicationHealthPolicy
	p_2 = healthPolicy.toInnerStruct()
	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginGetReplicaHealth,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&partitionId)),
		uintptr(replicaId),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetReplicaHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricReplicaHealthResult, err error) {
	var p_1 *comFabricReplicaHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetReplicaHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetDeployedApplicationHealth(
	applicationName string,
	nodeName string,
	healthPolicy *FabricApplicationHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_84, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_84

	var p_1 *uint16
	s_85, _ := windows.UTF16PtrFromString(nodeName)
	p_1 = s_85

	var p_2 *innerFabricApplicationHealthPolicy
	p_2 = healthPolicy.toInnerStruct()
	var p_5 *comIFabricAsyncOperationContext
	defer func() {
		context = p_5
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginGetDeployedApplicationHealth,
		7,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_5)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetDeployedApplicationHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricDeployedApplicationHealthResult, err error) {
	var p_1 *comFabricDeployedApplicationHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedApplicationHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) beginGetDeployedServicePackageHealth(
	applicationName string,
	serviceManifestName string,
	nodeName string,
	healthPolicy *FabricApplicationHealthPolicy,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_86, _ := windows.UTF16PtrFromString(applicationName)
	p_0 = s_86

	var p_1 *uint16
	s_87, _ := windows.UTF16PtrFromString(serviceManifestName)
	p_1 = s_87

	var p_2 *uint16
	s_88, _ := windows.UTF16PtrFromString(nodeName)
	p_2 = s_88

	var p_3 *innerFabricApplicationHealthPolicy
	p_3 = healthPolicy.toInnerStruct()
	var p_6 *comIFabricAsyncOperationContext
	defer func() {
		context = p_6
	}()
	hr, _, err1 := syscall.Syscall9(
		v.vtable().BeginGetDeployedServicePackageHealth,
		8,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(unsafe.Pointer(p_2)),
		uintptr(unsafe.Pointer(p_3)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_6)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) endGetDeployedServicePackageHealth(
	context *comIFabricAsyncOperationContext,
) (result *comFabricDeployedServicePackageHealthResult, err error) {
	var p_1 *comFabricDeployedServicePackageHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedServicePackageHealth,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient) GetClusterHealth(
	ctx context.Context,
	healthPolicy *FabricClusterHealthPolicy,
) (result_0 *FabricClusterHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetClusterHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterHealth(
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetNodeHealth(
	ctx context.Context,
	nodeName string,
	healthPolicy *FabricClusterHealthPolicy,
) (result_0 *FabricNodeHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNodeHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNodeHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNodeHealth(
		nodeName,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetApplicationHealth(
	ctx context.Context,
	applicationName string,
	healthPolicy *FabricApplicationHealthPolicy,
) (result_0 *FabricApplicationHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationHealth(
		applicationName,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetServiceHealth(
	ctx context.Context,
	serviceName string,
	healthPolicy *FabricApplicationHealthPolicy,
) (result_0 *FabricServiceHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceHealth(
		serviceName,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetPartitionHealth(
	ctx context.Context,
	partitionId windows.GUID,
	healthPolicy *FabricApplicationHealthPolicy,
) (result_0 *FabricPartitionHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetPartitionHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionHealth(
		partitionId,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetReplicaHealth(
	ctx context.Context,
	partitionId windows.GUID,
	replicaId int64,
	healthPolicy *FabricApplicationHealthPolicy,
) (result_0 *FabricReplicaHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetReplicaHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetReplicaHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetReplicaHealth(
		partitionId,
		replicaId,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetDeployedApplicationHealth(
	ctx context.Context,
	applicationName string,
	nodeName string,
	healthPolicy *FabricApplicationHealthPolicy,
) (result_0 *FabricDeployedApplicationHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedApplicationHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedApplicationHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedApplicationHealth(
		applicationName,
		nodeName,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient) GetDeployedServicePackageHealth(
	ctx context.Context,
	applicationName string,
	serviceManifestName string,
	nodeName string,
	healthPolicy *FabricApplicationHealthPolicy,
) (result_0 *FabricDeployedServicePackageHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedServicePackageHealth(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedServicePackageHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedServicePackageHealth(
		applicationName,
		serviceManifestName,
		nodeName,
		healthPolicy,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricHealthClient2 struct {
	ComFabricHealthClient
}

type comFabricHealthClient2Vtbl struct {
	comFabricHealthClientVtbl
	BeginGetClusterHealth2                uintptr
	EndGetClusterHealth2                  uintptr
	BeginGetNodeHealth2                   uintptr
	EndGetNodeHealth2                     uintptr
	BeginGetApplicationHealth2            uintptr
	EndGetApplicationHealth2              uintptr
	BeginGetServiceHealth2                uintptr
	EndGetServiceHealth2                  uintptr
	BeginGetPartitionHealth2              uintptr
	EndGetPartitionHealth2                uintptr
	BeginGetReplicaHealth2                uintptr
	EndGetReplicaHealth2                  uintptr
	BeginGetDeployedApplicationHealth2    uintptr
	EndGetDeployedApplicationHealth2      uintptr
	BeginGetDeployedServicePackageHealth2 uintptr
	EndGetDeployedServicePackageHealth2   uintptr
}

func (v *ComFabricHealthClient2) vtable() *comFabricHealthClient2Vtbl {
	return (*comFabricHealthClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricHealthClient2) beginGetClusterHealth2(
	queryDescription *FabricClusterHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricClusterHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetClusterHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricClusterHealthResult, err error) {
	var p_1 *comFabricClusterHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetNodeHealth2(
	queryDescription *FabricNodeHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNodeHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNodeHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetNodeHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricNodeHealthResult, err error) {
	var p_1 *comFabricNodeHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNodeHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetApplicationHealth2(
	queryDescription *FabricApplicationHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetApplicationHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricApplicationHealthResult, err error) {
	var p_1 *comFabricApplicationHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetServiceHealth2(
	queryDescription *FabricServiceHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetServiceHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricServiceHealthResult, err error) {
	var p_1 *comFabricServiceHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetPartitionHealth2(
	queryDescription *FabricPartitionHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricPartitionHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetPartitionHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricPartitionHealthResult, err error) {
	var p_1 *comFabricPartitionHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetReplicaHealth2(
	queryDescription *FabricReplicaHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricReplicaHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetReplicaHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetReplicaHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricReplicaHealthResult, err error) {
	var p_1 *comFabricReplicaHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetReplicaHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetDeployedApplicationHealth2(
	queryDescription *FabricDeployedApplicationHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedApplicationHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedApplicationHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetDeployedApplicationHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricDeployedApplicationHealthResult, err error) {
	var p_1 *comFabricDeployedApplicationHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedApplicationHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) beginGetDeployedServicePackageHealth2(
	queryDescription *FabricDeployedServicePackageHealthQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedServicePackageHealthQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedServicePackageHealth2,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) endGetDeployedServicePackageHealth2(
	context *comIFabricAsyncOperationContext,
) (result *comFabricDeployedServicePackageHealthResult, err error) {
	var p_1 *comFabricDeployedServicePackageHealthResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedServicePackageHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient2) GetClusterHealth2(
	ctx context.Context,
	queryDescription *FabricClusterHealthQueryDescription,
) (result_0 *FabricClusterHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetClusterHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetNodeHealth2(
	ctx context.Context,
	queryDescription *FabricNodeHealthQueryDescription,
) (result_0 *FabricNodeHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNodeHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNodeHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNodeHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetApplicationHealth2(
	ctx context.Context,
	queryDescription *FabricApplicationHealthQueryDescription,
) (result_0 *FabricApplicationHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetServiceHealth2(
	ctx context.Context,
	queryDescription *FabricServiceHealthQueryDescription,
) (result_0 *FabricServiceHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetPartitionHealth2(
	ctx context.Context,
	queryDescription *FabricPartitionHealthQueryDescription,
) (result_0 *FabricPartitionHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetPartitionHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetReplicaHealth2(
	ctx context.Context,
	queryDescription *FabricReplicaHealthQueryDescription,
) (result_0 *FabricReplicaHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetReplicaHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetReplicaHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetReplicaHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetDeployedApplicationHealth2(
	ctx context.Context,
	queryDescription *FabricDeployedApplicationHealthQueryDescription,
) (result_0 *FabricDeployedApplicationHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedApplicationHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedApplicationHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedApplicationHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricHealthClient2) GetDeployedServicePackageHealth2(
	ctx context.Context,
	queryDescription *FabricDeployedServicePackageHealthQueryDescription,
) (result_0 *FabricDeployedServicePackageHealth, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedServicePackageHealth2(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedServicePackageHealth()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedServicePackageHealth2(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricHealthClient3 struct {
	ComFabricHealthClient2
}

type comFabricHealthClient3Vtbl struct {
	comFabricHealthClient2Vtbl
	BeginGetClusterHealthChunk uintptr
	EndGetClusterHealthChunk   uintptr
}

func (v *ComFabricHealthClient3) vtable() *comFabricHealthClient3Vtbl {
	return (*comFabricHealthClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricHealthClient3) beginGetClusterHealthChunk(
	queryDescription *FabricClusterHealthChunkQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricClusterHealthChunkQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterHealthChunk,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient3) endGetClusterHealthChunk(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetClusterHealthChunkResult, err error) {
	var p_1 *comFabricGetClusterHealthChunkResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterHealthChunk,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricHealthClient3) GetClusterHealthChunk(
	ctx context.Context,
	queryDescription *FabricClusterHealthChunkQueryDescription,
) (result_0 *FabricClusterHealthChunk, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterHealthChunk(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetClusterHealthChunk()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterHealthChunk(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricHealthClient4 struct {
	ComFabricHealthClient3
}

type comFabricHealthClient4Vtbl struct {
	comFabricHealthClient3Vtbl
	ReportHealth2 uintptr
}

func (v *ComFabricHealthClient4) vtable() *comFabricHealthClient4Vtbl {
	return (*comFabricHealthClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricHealthClient4) ReportHealth2(
	healthReport *FabricHealthReport,
	sendOptions *FabricHealthReportSendOptions,
) (err error) {
	var p_0 *innerFabricHealthReport
	p_0 = healthReport.toInnerStruct()
	var p_1 *innerFabricHealthReportSendOptions
	p_1 = sendOptions.toInnerStruct()
	hr, _, err1 := syscall.Syscall(
		v.vtable().ReportHealth2,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricQueryClient struct {
	ole.IUnknown
}

type comFabricQueryClientVtbl struct {
	ole.IUnknownVtbl
	BeginGetNodeList                   uintptr
	EndGetNodeList                     uintptr
	BeginGetApplicationTypeList        uintptr
	EndGetApplicationTypeList          uintptr
	BeginGetServiceTypeList            uintptr
	EndGetServiceTypeList              uintptr
	BeginGetApplicationList            uintptr
	EndGetApplicationList              uintptr
	BeginGetServiceList                uintptr
	EndGetServiceList                  uintptr
	BeginGetPartitionList              uintptr
	EndGetPartitionList                uintptr
	BeginGetReplicaList                uintptr
	EndGetReplicaList                  uintptr
	BeginGetDeployedApplicationList    uintptr
	EndGetDeployedApplicationList      uintptr
	BeginGetDeployedServicePackageList uintptr
	EndGetDeployedServicePackageList   uintptr
	BeginGetDeployedServiceTypeList    uintptr
	EndGetDeployedServiceTypeList      uintptr
	BeginGetDeployedCodePackageList    uintptr
	EndGetDeployedCodePackageList      uintptr
	BeginGetDeployedReplicaList        uintptr
	EndGetDeployedReplicaList          uintptr
}

func (v *ComFabricQueryClient) vtable() *comFabricQueryClientVtbl {
	return (*comFabricQueryClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient) beginGetNodeList(
	queryDescription *FabricNodeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNodeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNodeList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetNodeList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetNodeListResult, err error) {
	var p_1 *comFabricGetNodeListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNodeList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetApplicationTypeList(
	queryDescription *FabricApplicationTypeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationTypeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationTypeList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetApplicationTypeList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetApplicationTypeListResult, err error) {
	var p_1 *comFabricGetApplicationTypeListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationTypeList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetServiceTypeList(
	queryDescription *FabricServiceTypeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceTypeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceTypeList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetServiceTypeList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetServiceTypeListResult, err error) {
	var p_1 *comFabricGetServiceTypeListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceTypeList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetApplicationList(
	queryDescription *FabricApplicationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetApplicationList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetApplicationListResult, err error) {
	var p_1 *comFabricGetApplicationListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetServiceList(
	queryDescription *FabricServiceQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetServiceList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetServiceListResult, err error) {
	var p_1 *comFabricGetServiceListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetPartitionList(
	queryDescription *FabricServicePartitionQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServicePartitionQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetPartitionList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetPartitionListResult, err error) {
	var p_1 *comFabricGetPartitionListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetReplicaList(
	queryDescription *FabricServiceReplicaQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceReplicaQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetReplicaList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetReplicaList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetReplicaListResult, err error) {
	var p_1 *comFabricGetReplicaListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetReplicaList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetDeployedApplicationList(
	queryDescription *FabricDeployedApplicationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedApplicationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedApplicationList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetDeployedApplicationList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedApplicationListResult, err error) {
	var p_1 *comFabricGetDeployedApplicationListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedApplicationList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetDeployedServicePackageList(
	queryDescription *FabricDeployedServicePackageQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedServicePackageQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedServicePackageList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetDeployedServicePackageList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedServicePackageListResult, err error) {
	var p_1 *comFabricGetDeployedServicePackageListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedServicePackageList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetDeployedServiceTypeList(
	queryDescription *FabricDeployedServiceTypeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedServiceTypeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedServiceTypeList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetDeployedServiceTypeList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedServiceTypeListResult, err error) {
	var p_1 *comFabricGetDeployedServiceTypeListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedServiceTypeList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetDeployedCodePackageList(
	queryDescription *FabricDeployedCodePackageQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedCodePackageQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedCodePackageList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetDeployedCodePackageList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedCodePackageListResult, err error) {
	var p_1 *comFabricGetDeployedCodePackageListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedCodePackageList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) beginGetDeployedReplicaList(
	queryDescription *FabricDeployedServiceReplicaQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedServiceReplicaQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedReplicaList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) endGetDeployedReplicaList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedReplicaListResult, err error) {
	var p_1 *comFabricGetDeployedReplicaListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedReplicaList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient) GetNodeList(
	ctx context.Context,
	queryDescription *FabricNodeQueryDescription,
) (result_0 []FabricNodeQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNodeList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNodeList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNodeList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetApplicationTypeList(
	ctx context.Context,
	queryDescription *FabricApplicationTypeQueryDescription,
) (result_0 []FabricApplicationTypeQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationTypeList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationTypeList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationTypeList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetServiceTypeList(
	ctx context.Context,
	queryDescription *FabricServiceTypeQueryDescription,
) (result_0 []FabricServiceTypeQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceTypeList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceTypeList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceTypeList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetApplicationList(
	ctx context.Context,
	queryDescription *FabricApplicationQueryDescription,
) (result_0 []FabricApplicationQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetServiceList(
	ctx context.Context,
	queryDescription *FabricServiceQueryDescription,
) (result_0 []FabricServiceQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetPartitionList(
	ctx context.Context,
	queryDescription *FabricServicePartitionQueryDescription,
) (result_0 []FabricServicePartitionQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetPartitionList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetReplicaList(
	ctx context.Context,
	queryDescription *FabricServiceReplicaQueryDescription,
) (result_0 []FabricServiceReplicaQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetReplicaList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetReplicaList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetReplicaList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetDeployedApplicationList(
	ctx context.Context,
	queryDescription *FabricDeployedApplicationQueryDescription,
) (result_0 []FabricDeployedApplicationQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedApplicationList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedApplicationList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedApplicationList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetDeployedServicePackageList(
	ctx context.Context,
	queryDescription *FabricDeployedServicePackageQueryDescription,
) (result_0 []FabricDeployedServicePackageQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedServicePackageList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedServicePackageList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedServicePackageList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetDeployedServiceTypeList(
	ctx context.Context,
	queryDescription *FabricDeployedServiceTypeQueryDescription,
) (result_0 []FabricDeployedServiceTypeQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedServiceTypeList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedServiceTypeList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedServiceTypeList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetDeployedCodePackageList(
	ctx context.Context,
	queryDescription *FabricDeployedCodePackageQueryDescription,
) (result_0 []FabricDeployedCodePackageQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedCodePackageList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedCodePackageList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedCodePackageList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient) GetDeployedReplicaList(
	ctx context.Context,
	queryDescription *FabricDeployedServiceReplicaQueryDescription,
) (result_0 []FabricDeployedServiceReplicaQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedReplicaList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedReplicaList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedReplicaList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient2 struct {
	ComFabricQueryClient
}

type comFabricQueryClient2Vtbl struct {
	comFabricQueryClientVtbl
	BeginGetDeployedReplicaDetail              uintptr
	EndGetDeployedReplicaDetail                uintptr
	BeginGetClusterLoadInformation             uintptr
	EndGetClusterLoadInformation               uintptr
	BeginGetPartitionLoadInformation           uintptr
	EndGetPartitionLoadInformation             uintptr
	BeginGetProvisionedFabricCodeVersionList   uintptr
	EndGetProvisionedFabricCodeVersionList     uintptr
	BeginGetProvisionedFabricConfigVersionList uintptr
	EndGetProvisionedFabricConfigVersionList   uintptr
}

func (v *ComFabricQueryClient2) vtable() *comFabricQueryClient2Vtbl {
	return (*comFabricQueryClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient2) beginGetDeployedReplicaDetail(
	queryDescription *FabricDeployedServiceReplicaDetailQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedServiceReplicaDetailQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedReplicaDetail,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) endGetDeployedReplicaDetail(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedServiceReplicaDetailResult, err error) {
	var p_1 *comFabricGetDeployedServiceReplicaDetailResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedReplicaDetail,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) beginGetClusterLoadInformation(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetClusterLoadInformation,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) endGetClusterLoadInformation(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetClusterLoadInformationResult, err error) {
	var p_1 *comFabricGetClusterLoadInformationResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetClusterLoadInformation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) beginGetPartitionLoadInformation(
	queryDescription *FabricPartitionLoadInformationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricPartitionLoadInformationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionLoadInformation,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) endGetPartitionLoadInformation(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetPartitionLoadInformationResult, err error) {
	var p_1 *comFabricGetPartitionLoadInformationResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionLoadInformation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) beginGetProvisionedFabricCodeVersionList(
	queryDescription *FabricProvisionedCodeVersionQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricProvisionedCodeVersionQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetProvisionedFabricCodeVersionList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) endGetProvisionedFabricCodeVersionList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetProvisionedCodeVersionListResult, err error) {
	var p_1 *comFabricGetProvisionedCodeVersionListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetProvisionedFabricCodeVersionList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) beginGetProvisionedFabricConfigVersionList(
	queryDescription *FabricProvisionedConfigVersionQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricProvisionedConfigVersionQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetProvisionedFabricConfigVersionList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) endGetProvisionedFabricConfigVersionList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetProvisionedConfigVersionListResult, err error) {
	var p_1 *comFabricGetProvisionedConfigVersionListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetProvisionedFabricConfigVersionList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient2) GetDeployedReplicaDetail(
	ctx context.Context,
	queryDescription *FabricDeployedServiceReplicaDetailQueryDescription,
) (result_0 *FabricDeployedServiceReplicaDetailQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedReplicaDetail(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetReplicaDetail()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedReplicaDetail(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient2) GetClusterLoadInformation(
	ctx context.Context,
) (result_0 *FabricClusterLoadInformation, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetClusterLoadInformation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetClusterLoadInformation()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetClusterLoadInformation(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient2) GetPartitionLoadInformation(
	ctx context.Context,
	queryDescription *FabricPartitionLoadInformationQueryDescription,
) (result_0 *FabricPartitionLoadInformation, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionLoadInformation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetPartitionLoadInformation()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionLoadInformation(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient2) GetProvisionedFabricCodeVersionList(
	ctx context.Context,
	queryDescription *FabricProvisionedCodeVersionQueryDescription,
) (result_0 []FabricProvisionedCodeVersionQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetProvisionedFabricCodeVersionList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProvisionedCodeVersionList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetProvisionedFabricCodeVersionList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient2) GetProvisionedFabricConfigVersionList(
	ctx context.Context,
	queryDescription *FabricProvisionedConfigVersionQueryDescription,
) (result_0 []FabricProvisionedConfigVersionQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetProvisionedFabricConfigVersionList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProvisionedConfigVersionList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetProvisionedFabricConfigVersionList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient3 struct {
	ComFabricQueryClient2
}

type comFabricQueryClient3Vtbl struct {
	comFabricQueryClient2Vtbl
	BeginGetNodeLoadInformation    uintptr
	EndGetNodeLoadInformation      uintptr
	BeginGetReplicaLoadInformation uintptr
	EndGetReplicaLoadInformation   uintptr
}

func (v *ComFabricQueryClient3) vtable() *comFabricQueryClient3Vtbl {
	return (*comFabricQueryClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient3) beginGetNodeLoadInformation(
	queryDescription *FabricNodeLoadInformationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNodeLoadInformationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNodeLoadInformation,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient3) endGetNodeLoadInformation(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetNodeLoadInformationResult, err error) {
	var p_1 *comFabricGetNodeLoadInformationResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNodeLoadInformation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient3) beginGetReplicaLoadInformation(
	queryDescription *FabricReplicaLoadInformationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricReplicaLoadInformationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetReplicaLoadInformation,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient3) endGetReplicaLoadInformation(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetReplicaLoadInformationResult, err error) {
	var p_1 *comFabricGetReplicaLoadInformationResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetReplicaLoadInformation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient3) GetNodeLoadInformation(
	ctx context.Context,
	queryDescription *FabricNodeLoadInformationQueryDescription,
) (result_0 *FabricNodeLoadInformation, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNodeLoadInformation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNodeLoadInformation()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNodeLoadInformation(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient3) GetReplicaLoadInformation(
	ctx context.Context,
	queryDescription *FabricReplicaLoadInformationQueryDescription,
) (result_0 *FabricReplicaLoadInformation, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetReplicaLoadInformation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetReplicaLoadInformation()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetReplicaLoadInformation(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient4 struct {
	ComFabricQueryClient3
}

type comFabricQueryClient4Vtbl struct {
	comFabricQueryClient3Vtbl
	BeginGetServiceGroupMemberList     uintptr
	EndGetServiceGroupMemberList       uintptr
	BeginGetServiceGroupMemberTypeList uintptr
	EndGetServiceGroupMemberTypeList   uintptr
}

func (v *ComFabricQueryClient4) vtable() *comFabricQueryClient4Vtbl {
	return (*comFabricQueryClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient4) beginGetServiceGroupMemberList(
	queryDescription *FabricServiceGroupMemberQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceGroupMemberQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceGroupMemberList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient4) endGetServiceGroupMemberList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetServiceGroupMemberListResult, err error) {
	var p_1 *comFabricGetServiceGroupMemberListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceGroupMemberList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient4) beginGetServiceGroupMemberTypeList(
	queryDescription *FabricServiceGroupMemberTypeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceGroupMemberTypeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceGroupMemberTypeList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient4) endGetServiceGroupMemberTypeList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetServiceGroupMemberTypeListResult, err error) {
	var p_1 *comFabricGetServiceGroupMemberTypeListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceGroupMemberTypeList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient4) GetServiceGroupMemberList(
	ctx context.Context,
	queryDescription *FabricServiceGroupMemberQueryDescription,
) (result_0 []FabricServiceGroupMemberQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceGroupMemberList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceGroupMemberList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceGroupMemberList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient4) GetServiceGroupMemberTypeList(
	ctx context.Context,
	queryDescription *FabricServiceGroupMemberTypeQueryDescription,
) (result_0 []FabricServiceGroupMemberTypeQueryResultItem, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceGroupMemberTypeList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceGroupMemberTypeList()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceGroupMemberTypeList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient5 struct {
	ComFabricQueryClient4
}

type comFabricQueryClient5Vtbl struct {
	comFabricQueryClient4Vtbl
	BeginGetUnplacedReplicaInformation uintptr
	EndGetUnplacedReplicaInformation   uintptr
}

func (v *ComFabricQueryClient5) vtable() *comFabricQueryClient5Vtbl {
	return (*comFabricQueryClient5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient5) beginGetUnplacedReplicaInformation(
	queryDescription *FabricUnplacedReplicaInformationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricUnplacedReplicaInformationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetUnplacedReplicaInformation,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient5) endGetUnplacedReplicaInformation(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetUnplacedReplicaInformationResult, err error) {
	var p_1 *comFabricGetUnplacedReplicaInformationResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetUnplacedReplicaInformation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient5) GetUnplacedReplicaInformation(
	ctx context.Context,
	queryDescription *FabricUnplacedReplicaInformationQueryDescription,
) (result_0 *FabricUnplacedReplicaInformation, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetUnplacedReplicaInformation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetUnplacedReplicaInformation()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetUnplacedReplicaInformation(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient6 struct {
	ComFabricQueryClient5
}

type comFabricQueryClient6Vtbl struct {
	comFabricQueryClient5Vtbl
	EndGetNodeList2        uintptr
	EndGetApplicationList2 uintptr
	EndGetServiceList2     uintptr
	EndGetPartitionList2   uintptr
	EndGetReplicaList2     uintptr
}

func (v *ComFabricQueryClient6) vtable() *comFabricQueryClient6Vtbl {
	return (*comFabricQueryClient6Vtbl)(unsafe.Pointer(v.RawVTable))
}

type ComFabricQueryClient7 struct {
	ComFabricQueryClient6
}

type comFabricQueryClient7Vtbl struct {
	comFabricQueryClient6Vtbl
	BeginGetApplicationLoadInformation uintptr
	EndGetApplicationLoadInformation   uintptr
}

func (v *ComFabricQueryClient7) vtable() *comFabricQueryClient7Vtbl {
	return (*comFabricQueryClient7Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient7) beginGetApplicationLoadInformation(
	queryDescription *FabricApplicationLoadInformationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationLoadInformationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationLoadInformation,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient7) endGetApplicationLoadInformation(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetApplicationLoadInformationResult, err error) {
	var p_1 *comFabricGetApplicationLoadInformationResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationLoadInformation,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient7) GetApplicationLoadInformation(
	ctx context.Context,
	queryDescription *FabricApplicationLoadInformationQueryDescription,
) (result_0 *FabricApplicationLoadInformation, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationLoadInformation(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationLoadInformation()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationLoadInformation(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient8 struct {
	ComFabricQueryClient7
}

type comFabricQueryClient8Vtbl struct {
	comFabricQueryClient7Vtbl
	BeginGetServiceName     uintptr
	EndGetServiceName       uintptr
	BeginGetApplicationName uintptr
	EndGetApplicationName   uintptr
}

func (v *ComFabricQueryClient8) vtable() *comFabricQueryClient8Vtbl {
	return (*comFabricQueryClient8Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient8) beginGetServiceName(
	queryDescription *FabricServiceNameQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricServiceNameQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetServiceName,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient8) endGetServiceName(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetServiceNameResult, err error) {
	var p_1 *comFabricGetServiceNameResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetServiceName,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient8) beginGetApplicationName(
	queryDescription *FabricApplicationNameQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationNameQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationName,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient8) endGetApplicationName(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetApplicationNameResult, err error) {
	var p_1 *comFabricGetApplicationNameResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationName,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient8) GetServiceName(
	ctx context.Context,
	queryDescription *FabricServiceNameQueryDescription,
) (result_0 *FabricServiceNameQueryResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetServiceName(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetServiceName()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetServiceName(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricQueryClient8) GetApplicationName(
	ctx context.Context,
	queryDescription *FabricApplicationNameQueryDescription,
) (result_0 *FabricApplicationNameQueryResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationName(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationName()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationName(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient9 struct {
	ComFabricQueryClient8
}

type comFabricQueryClient9Vtbl struct {
	comFabricQueryClient8Vtbl
	BeginGetApplicationTypePagedList uintptr
	EndGetApplicationTypePagedList   uintptr
}

func (v *ComFabricQueryClient9) vtable() *comFabricQueryClient9Vtbl {
	return (*comFabricQueryClient9Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient9) beginGetApplicationTypePagedList(
	queryDescription *PagedFabricApplicationTypeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerPagedFabricApplicationTypeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationTypePagedList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient9) endGetApplicationTypePagedList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetApplicationTypePagedListResult, err error) {
	var p_1 *comFabricGetApplicationTypePagedListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationTypePagedList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient9) GetApplicationTypePagedList(
	ctx context.Context,
	queryDescription *PagedFabricApplicationTypeQueryDescription,
) (result_0 []FabricApplicationTypeQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationTypePagedList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationTypePagedList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationTypePagedList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricQueryClient10 struct {
	ComFabricQueryClient9
}

type comFabricQueryClient10Vtbl struct {
	comFabricQueryClient9Vtbl
	BeginGetDeployedApplicationPagedList uintptr
	EndGetDeployedApplicationPagedList   uintptr
}

func (v *ComFabricQueryClient10) vtable() *comFabricQueryClient10Vtbl {
	return (*comFabricQueryClient10Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricQueryClient10) beginGetDeployedApplicationPagedList(
	queryDescription *FabricPagedDeployedApplicationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricPagedDeployedApplicationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedApplicationPagedList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient10) endGetDeployedApplicationPagedList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedApplicationPagedListResult, err error) {
	var p_1 *comFabricGetDeployedApplicationPagedListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedApplicationPagedList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricQueryClient10) GetDeployedApplicationPagedList(
	ctx context.Context,
	queryDescription *FabricPagedDeployedApplicationQueryDescription,
) (result_0 []FabricDeployedApplicationQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedApplicationPagedList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedApplicationPagedList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedApplicationPagedList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricInfrastructureServiceClient struct {
	ole.IUnknown
}

type comFabricInfrastructureServiceClientVtbl struct {
	ole.IUnknownVtbl
	BeginInvokeInfrastructureCommand uintptr
	EndInvokeInfrastructureCommand   uintptr
	BeginInvokeInfrastructureQuery   uintptr
	EndInvokeInfrastructureQuery     uintptr
}

func (v *ComFabricInfrastructureServiceClient) vtable() *comFabricInfrastructureServiceClientVtbl {
	return (*comFabricInfrastructureServiceClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricInfrastructureServiceClient) beginInvokeInfrastructureCommand(
	serviceName string,
	command string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_89, _ := windows.UTF16PtrFromString(serviceName)
	p_0 = s_89

	var p_1 *uint16
	s_90, _ := windows.UTF16PtrFromString(command)
	p_1 = s_90

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginInvokeInfrastructureCommand,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricInfrastructureServiceClient) endInvokeInfrastructureCommand(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndInvokeInfrastructureCommand,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricInfrastructureServiceClient) beginInvokeInfrastructureQuery(
	serviceName string,
	command string,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_91, _ := windows.UTF16PtrFromString(serviceName)
	p_0 = s_91

	var p_1 *uint16
	s_92, _ := windows.UTF16PtrFromString(command)
	p_1 = s_92

	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginInvokeInfrastructureQuery,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricInfrastructureServiceClient) endInvokeInfrastructureQuery(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStringResult, err error) {
	var p_1 *comFabricStringResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndInvokeInfrastructureQuery,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricInfrastructureServiceClient) InvokeInfrastructureCommand(
	ctx context.Context,
	serviceName string,
	command string,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endInvokeInfrastructureCommand(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginInvokeInfrastructureCommand(
		serviceName,
		command,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricInfrastructureServiceClient) InvokeInfrastructureQuery(
	ctx context.Context,
	serviceName string,
	command string,
) (result_0 string, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endInvokeInfrastructureQuery(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetString()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginInvokeInfrastructureQuery(
		serviceName,
		command,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricRepairManagementClient struct {
	ole.IUnknown
}

type comFabricRepairManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginCreateRepairTask           uintptr
	EndCreateRepairTask             uintptr
	BeginCancelRepairTask           uintptr
	EndCancelRepairTask             uintptr
	BeginForceApproveRepairTask     uintptr
	EndForceApproveRepairTask       uintptr
	BeginDeleteRepairTask           uintptr
	EndDeleteRepairTask             uintptr
	BeginUpdateRepairExecutionState uintptr
	EndUpdateRepairExecutionState   uintptr
	BeginGetRepairTaskList          uintptr
	EndGetRepairTaskList            uintptr
}

func (v *ComFabricRepairManagementClient) vtable() *comFabricRepairManagementClientVtbl {
	return (*comFabricRepairManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricRepairManagementClient) beginCreateRepairTask(
	repairTask *FabricRepairTask,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairTask
	p_0 = repairTask.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateRepairTask,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) endCreateRepairTask(
	context *comIFabricAsyncOperationContext,
) (commitVersion int64, err error) {
	var p_1 int64
	defer func() {
		commitVersion = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateRepairTask,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) beginCancelRepairTask(
	requestDescription *FabricRepairCancelDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairCancelDescription
	p_0 = requestDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCancelRepairTask,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) endCancelRepairTask(
	context *comIFabricAsyncOperationContext,
) (commitVersion int64, err error) {
	var p_1 int64
	defer func() {
		commitVersion = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCancelRepairTask,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) beginForceApproveRepairTask(
	requestDescription *FabricRepairApproveDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairApproveDescription
	p_0 = requestDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginForceApproveRepairTask,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) endForceApproveRepairTask(
	context *comIFabricAsyncOperationContext,
) (commitVersion int64, err error) {
	var p_1 int64
	defer func() {
		commitVersion = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndForceApproveRepairTask,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) beginDeleteRepairTask(
	requestDescription *FabricRepairDeleteDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairDeleteDescription
	p_0 = requestDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteRepairTask,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) endDeleteRepairTask(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteRepairTask,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) beginUpdateRepairExecutionState(
	repairTask *FabricRepairTask,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairTask
	p_0 = repairTask.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateRepairExecutionState,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) endUpdateRepairExecutionState(
	context *comIFabricAsyncOperationContext,
) (commitVersion int64, err error) {
	var p_1 int64
	defer func() {
		commitVersion = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateRepairExecutionState,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) beginGetRepairTaskList(
	queryDescription *FabricRepairTaskQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairTaskQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetRepairTaskList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) endGetRepairTaskList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetRepairTaskListResult, err error) {
	var p_1 *comFabricGetRepairTaskListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetRepairTaskList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient) CreateRepairTask(
	ctx context.Context,
	repairTask *FabricRepairTask,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endCreateRepairTask(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateRepairTask(
		repairTask,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricRepairManagementClient) CancelRepairTask(
	ctx context.Context,
	requestDescription *FabricRepairCancelDescription,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endCancelRepairTask(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCancelRepairTask(
		requestDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricRepairManagementClient) ForceApproveRepairTask(
	ctx context.Context,
	requestDescription *FabricRepairApproveDescription,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endForceApproveRepairTask(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginForceApproveRepairTask(
		requestDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricRepairManagementClient) DeleteRepairTask(
	ctx context.Context,
	requestDescription *FabricRepairDeleteDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteRepairTask(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteRepairTask(
		requestDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricRepairManagementClient) UpdateRepairExecutionState(
	ctx context.Context,
	repairTask *FabricRepairTask,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endUpdateRepairExecutionState(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateRepairExecutionState(
		repairTask,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricRepairManagementClient) GetRepairTaskList(
	ctx context.Context,
	queryDescription *FabricRepairTaskQueryDescription,
) (result_0 []FabricRepairTask, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetRepairTaskList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetTasks()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetRepairTaskList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricRepairManagementClient2 struct {
	ComFabricRepairManagementClient
}

type comFabricRepairManagementClient2Vtbl struct {
	comFabricRepairManagementClientVtbl
	BeginUpdateRepairTaskHealthPolicy uintptr
	EndUpdateRepairTaskHealthPolicy   uintptr
}

func (v *ComFabricRepairManagementClient2) vtable() *comFabricRepairManagementClient2Vtbl {
	return (*comFabricRepairManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricRepairManagementClient2) beginUpdateRepairTaskHealthPolicy(
	updateDescription *FabricRepairTaskHealthPolicyUpdateDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRepairTaskHealthPolicyUpdateDescription
	p_0 = updateDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginUpdateRepairTaskHealthPolicy,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient2) endUpdateRepairTaskHealthPolicy(
	context *comIFabricAsyncOperationContext,
) (commitVersion int64, err error) {
	var p_1 int64
	defer func() {
		commitVersion = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndUpdateRepairTaskHealthPolicy,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricRepairManagementClient2) UpdateRepairTaskHealthPolicy(
	ctx context.Context,
	updateDescription *FabricRepairTaskHealthPolicyUpdateDescription,
) (result_0 int64, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endUpdateRepairTaskHealthPolicy(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		result_0 = rt_1
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginUpdateRepairTaskHealthPolicy(
		updateDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricFaultManagementClient struct {
	ole.IUnknown
}

type comFabricFaultManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginRestartNode                uintptr
	EndRestartNode                  uintptr
	BeginStartNode                  uintptr
	EndStartNode                    uintptr
	BeginStopNode                   uintptr
	EndStopNode                     uintptr
	BeginRestartDeployedCodePackage uintptr
	EndRestartDeployedCodePackage   uintptr
	BeginMovePrimary                uintptr
	EndMovePrimary                  uintptr
	BeginMoveSecondary              uintptr
	EndMoveSecondary                uintptr
}

func (v *ComFabricFaultManagementClient) vtable() *comFabricFaultManagementClientVtbl {
	return (*comFabricFaultManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricFaultManagementClient) beginRestartNode(
	description *FabricRestartNodeDescription2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRestartNodeDescription2
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestartNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) endRestartNode(
	context *comIFabricAsyncOperationContext,
) (result *comFabricRestartNodeResult, err error) {
	var p_1 *comFabricRestartNodeResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRestartNode,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) beginStartNode(
	description *FabricStartNodeDescription2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartNodeDescription2
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) endStartNode(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStartNodeResult, err error) {
	var p_1 *comFabricStartNodeResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartNode,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) beginStopNode(
	description *FabricStopNodeDescription2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStopNodeDescription2
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStopNode,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) endStopNode(
	context *comIFabricAsyncOperationContext,
) (result *comFabricStopNodeResult, err error) {
	var p_1 *comFabricStopNodeResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStopNode,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) beginRestartDeployedCodePackage(
	description *FabricRestartDeployedCodePackageDescription2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricRestartDeployedCodePackageDescription2
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRestartDeployedCodePackage,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) endRestartDeployedCodePackage(
	context *comIFabricAsyncOperationContext,
) (result *comFabricRestartDeployedCodePackageResult, err error) {
	var p_1 *comFabricRestartDeployedCodePackageResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRestartDeployedCodePackage,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) beginMovePrimary(
	description *FabricMovePrimaryDescription2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricMovePrimaryDescription2
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginMovePrimary,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) endMovePrimary(
	context *comIFabricAsyncOperationContext,
) (result *comFabricMovePrimaryResult, err error) {
	var p_1 *comFabricMovePrimaryResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndMovePrimary,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) beginMoveSecondary(
	description *FabricMoveSecondaryDescription2,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricMoveSecondaryDescription2
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginMoveSecondary,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) endMoveSecondary(
	context *comIFabricAsyncOperationContext,
) (result *comFabricMoveSecondaryResult, err error) {
	var p_1 *comFabricMoveSecondaryResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndMoveSecondary,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricFaultManagementClient) RestartNode(
	ctx context.Context,
	description *FabricRestartNodeDescription2,
) (result_0 *FabricNodeResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endRestartNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRestartNode(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricFaultManagementClient) StartNode(
	ctx context.Context,
	description *FabricStartNodeDescription2,
) (result_0 *FabricNodeResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endStartNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartNode(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricFaultManagementClient) StopNode(
	ctx context.Context,
	description *FabricStopNodeDescription2,
) (result_0 *FabricNodeResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endStopNode(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStopNode(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricFaultManagementClient) RestartDeployedCodePackage(
	ctx context.Context,
	description *FabricRestartDeployedCodePackageDescription2,
) (result_0 *FabricDeployedCodePackageResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endRestartDeployedCodePackage(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRestartDeployedCodePackage(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricFaultManagementClient) MovePrimary(
	ctx context.Context,
	description *FabricMovePrimaryDescription2,
) (result_0 *FabricMovePrimaryResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endMovePrimary(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginMovePrimary(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricFaultManagementClient) MoveSecondary(
	ctx context.Context,
	description *FabricMoveSecondaryDescription2,
) (result_0 *FabricMoveSecondaryResult, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endMoveSecondary(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginMoveSecondary(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricTestManagementClient struct {
	ole.IUnknown
}

type comFabricTestManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginStartPartitionDataLoss         uintptr
	EndStartPartitionDataLoss           uintptr
	BeginGetPartitionDataLossProgress   uintptr
	EndGetPartitionDataLossProgress     uintptr
	BeginStartPartitionQuorumLoss       uintptr
	EndStartPartitionQuorumLoss         uintptr
	BeginGetPartitionQuorumLossProgress uintptr
	EndGetPartitionQuorumLossProgress   uintptr
	BeginStartPartitionRestart          uintptr
	EndStartPartitionRestart            uintptr
	BeginGetPartitionRestartProgress    uintptr
	EndGetPartitionRestartProgress      uintptr
	BeginGetTestCommandStatusList       uintptr
	EndGetTestCommandStatusList         uintptr
	BeginCancelTestCommand              uintptr
	EndCancelTestCommand                uintptr
}

func (v *ComFabricTestManagementClient) vtable() *comFabricTestManagementClientVtbl {
	return (*comFabricTestManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricTestManagementClient) beginStartPartitionDataLoss(
	invokeDataLossDescription *FabricStartPartitionDataLossDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartPartitionDataLossDescription
	p_0 = invokeDataLossDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartPartitionDataLoss,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endStartPartitionDataLoss(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartPartitionDataLoss,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginGetPartitionDataLossProgress(
	operationId windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionDataLossProgress,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&operationId)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endGetPartitionDataLossProgress(
	context *comIFabricAsyncOperationContext,
) (result *comFabricPartitionDataLossProgressResult, err error) {
	var p_1 *comFabricPartitionDataLossProgressResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionDataLossProgress,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginStartPartitionQuorumLoss(
	invokeQuorumLossDescription *FabricStartPartitionQuorumLossDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartPartitionQuorumLossDescription
	p_0 = invokeQuorumLossDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartPartitionQuorumLoss,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endStartPartitionQuorumLoss(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartPartitionQuorumLoss,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginGetPartitionQuorumLossProgress(
	operationId windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionQuorumLossProgress,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&operationId)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endGetPartitionQuorumLossProgress(
	context *comIFabricAsyncOperationContext,
) (result *comFabricPartitionQuorumLossProgressResult, err error) {
	var p_1 *comFabricPartitionQuorumLossProgressResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionQuorumLossProgress,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginStartPartitionRestart(
	restartPartitionDescription *FabricStartPartitionRestartDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartPartitionRestartDescription
	p_0 = restartPartitionDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartPartitionRestart,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endStartPartitionRestart(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartPartitionRestart,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginGetPartitionRestartProgress(
	operationId windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetPartitionRestartProgress,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&operationId)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endGetPartitionRestartProgress(
	context *comIFabricAsyncOperationContext,
) (result *comFabricPartitionRestartProgressResult, err error) {
	var p_1 *comFabricPartitionRestartProgressResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetPartitionRestartProgress,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginGetTestCommandStatusList(
	operationId *FabricTestCommandListDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricTestCommandListDescription
	p_0 = operationId.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetTestCommandStatusList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endGetTestCommandStatusList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricTestCommandStatusResult, err error) {
	var p_1 *comFabricTestCommandStatusResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetTestCommandStatusList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) beginCancelTestCommand(
	invokeDataLossDescription *FabricCancelTestCommandDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricCancelTestCommandDescription
	p_0 = invokeDataLossDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCancelTestCommand,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) endCancelTestCommand(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCancelTestCommand,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient) StartPartitionDataLoss(
	ctx context.Context,
	invokeDataLossDescription *FabricStartPartitionDataLossDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartPartitionDataLoss(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartPartitionDataLoss(
		invokeDataLossDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) GetPartitionDataLossProgress(
	ctx context.Context,
	operationId windows.GUID,
) (result_0 *FabricPartitionDataLossProgress, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionDataLossProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProgress()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionDataLossProgress(
		operationId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) StartPartitionQuorumLoss(
	ctx context.Context,
	invokeQuorumLossDescription *FabricStartPartitionQuorumLossDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartPartitionQuorumLoss(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartPartitionQuorumLoss(
		invokeQuorumLossDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) GetPartitionQuorumLossProgress(
	ctx context.Context,
	operationId windows.GUID,
) (result_0 *FabricPartitionQuorumLossProgress, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionQuorumLossProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProgress()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionQuorumLossProgress(
		operationId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) StartPartitionRestart(
	ctx context.Context,
	restartPartitionDescription *FabricStartPartitionRestartDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartPartitionRestart(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartPartitionRestart(
		restartPartitionDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) GetPartitionRestartProgress(
	ctx context.Context,
	operationId windows.GUID,
) (result_0 *FabricPartitionRestartProgress, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetPartitionRestartProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProgress()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetPartitionRestartProgress(
		operationId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) GetTestCommandStatusList(
	ctx context.Context,
	operationId *FabricTestCommandListDescription,
) (result_0 []interface{}, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetTestCommandStatusList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetTestCommandStatusList(
		operationId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient) CancelTestCommand(
	ctx context.Context,
	invokeDataLossDescription *FabricCancelTestCommandDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCancelTestCommand(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCancelTestCommand(
		invokeDataLossDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricTestManagementClient2 struct {
	ComFabricTestManagementClient
}

type comFabricTestManagementClient2Vtbl struct {
	comFabricTestManagementClientVtbl
	BeginStartChaos     uintptr
	EndStartChaos       uintptr
	BeginStopChaos      uintptr
	EndStopChaos        uintptr
	BeginGetChaosReport uintptr
	EndGetChaosReport   uintptr
}

func (v *ComFabricTestManagementClient2) vtable() *comFabricTestManagementClient2Vtbl {
	return (*comFabricTestManagementClient2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricTestManagementClient2) beginStartChaos(
	restartPartitionDescription *FabricStartChaosDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricStartChaosDescription
	p_0 = restartPartitionDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartChaos,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient2) endStartChaos(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartChaos,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient2) beginStopChaos(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStopChaos,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient2) endStopChaos(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStopChaos,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient2) beginGetChaosReport(
	getChaosReportDescription *FabricGetChaosReportDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricGetChaosReportDescription
	p_0 = getChaosReportDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetChaosReport,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient2) endGetChaosReport(
	context *comIFabricAsyncOperationContext,
) (result *comFabricChaosReportResult, err error) {
	var p_1 *comFabricChaosReportResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetChaosReport,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient2) StartChaos(
	ctx context.Context,
	restartPartitionDescription *FabricStartChaosDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartChaos(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartChaos(
		restartPartitionDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient2) StopChaos(
	ctx context.Context,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStopChaos(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStopChaos(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient2) GetChaosReport(
	ctx context.Context,
	getChaosReportDescription *FabricGetChaosReportDescription,
) (result_0 *FabricChaosReport, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetChaosReport(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetChaosReportResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetChaosReport(
		getChaosReportDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricTestManagementClient3 struct {
	ComFabricTestManagementClient2
}

type comFabricTestManagementClient3Vtbl struct {
	comFabricTestManagementClient2Vtbl
	BeginStartNodeTransition       uintptr
	EndStartNodeTransition         uintptr
	BeginGetNodeTransitionProgress uintptr
	EndGetNodeTransitionProgress   uintptr
}

func (v *ComFabricTestManagementClient3) vtable() *comFabricTestManagementClient3Vtbl {
	return (*comFabricTestManagementClient3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricTestManagementClient3) beginStartNodeTransition(
	description *FabricNodeTransitionDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNodeTransitionDescription
	p_0 = description.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginStartNodeTransition,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient3) endStartNodeTransition(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndStartNodeTransition,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient3) beginGetNodeTransitionProgress(
	operationId windows.GUID,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNodeTransitionProgress,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&operationId)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient3) endGetNodeTransitionProgress(
	context *comIFabricAsyncOperationContext,
) (result *comFabricNodeTransitionProgressResult, err error) {
	var p_1 *comFabricNodeTransitionProgressResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNodeTransitionProgress,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricTestManagementClient3) StartNodeTransition(
	ctx context.Context,
	description *FabricNodeTransitionDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endStartNodeTransition(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginStartNodeTransition(
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricTestManagementClient3) GetNodeTransitionProgress(
	ctx context.Context,
	operationId windows.GUID,
) (result_0 *FabricNodeTransitionProgress, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNodeTransitionProgress(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetProgress()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNodeTransitionProgress(
		operationId,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type comFabricTestManagementClient4 struct {
	ComFabricTestManagementClient3
}

type comFabricTestManagementClient4Vtbl struct {
	comFabricTestManagementClient3Vtbl
	BeginGetChaos         uintptr
	EndGetChaos           uintptr
	BeginGetChaosSchedule uintptr
	EndGetChaosSchedule   uintptr
	BeginSetChaosSchedule uintptr
	EndSetChaosSchedule   uintptr
	BeginGetChaosEvents   uintptr
	EndGetChaosEvents     uintptr
}

func (v *comFabricTestManagementClient4) vtable() *comFabricTestManagementClient4Vtbl {
	return (*comFabricTestManagementClient4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricTestManagementClient4) beginGetChaos(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetChaos,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) endGetChaos(
	context *comIFabricAsyncOperationContext,
) (result *comFabricChaosDescriptionResult, err error) {
	var p_1 *comFabricChaosDescriptionResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetChaos,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) beginGetChaosSchedule(
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_2 *comIFabricAsyncOperationContext
	defer func() {
		context = p_2
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetChaosSchedule,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) endGetChaosSchedule(
	context *comIFabricAsyncOperationContext,
) (result *comFabricChaosScheduleDescriptionResult, err error) {
	var p_1 *comFabricChaosScheduleDescriptionResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetChaosSchedule,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) beginSetChaosSchedule(
	setChaosScheduleDescription *FabricChaosServiceScheduleDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricChaosServiceScheduleDescription
	p_0 = setChaosScheduleDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginSetChaosSchedule,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) endSetChaosSchedule(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndSetChaosSchedule,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) beginGetChaosEvents(
	chaosEventsDescription *FabricChaosEventsSegmentDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricChaosEventsSegmentDescription
	p_0 = chaosEventsDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetChaosEvents,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) endGetChaosEvents(
	context *comIFabricAsyncOperationContext,
) (result *comFabricChaosEventsSegmentResult, err error) {
	var p_1 *comFabricChaosEventsSegmentResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetChaosEvents,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricTestManagementClient4) GetChaos(
	ctx context.Context,
) (result_0 *FabricChaosDescription, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetChaos(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetChaosDescriptionResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetChaos(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricTestManagementClient4) GetChaosSchedule(
	ctx context.Context,
) (result_0 *FabricChaosScheduleDescription, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetChaosSchedule(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetChaosScheduleDescriptionResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetChaosSchedule(
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricTestManagementClient4) SetChaosSchedule(
	ctx context.Context,
	setChaosScheduleDescription *FabricChaosServiceScheduleDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endSetChaosSchedule(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginSetChaosSchedule(
		setChaosScheduleDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *comFabricTestManagementClient4) GetChaosEvents(
	ctx context.Context,
	chaosEventsDescription *FabricChaosEventsSegmentDescription,
) (result_0 *FabricChaosEventsSegment, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetChaosEvents(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetChaosEventsSegmentResult()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetChaosEvents(
		chaosEventsDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type ComFabricNetworkManagementClient struct {
	ole.IUnknown
}

type comFabricNetworkManagementClientVtbl struct {
	ole.IUnknownVtbl
	BeginCreateNetwork                     uintptr
	EndCreateNetwork                       uintptr
	BeginDeleteNetwork                     uintptr
	EndDeleteNetwork                       uintptr
	BeginGetNetworkList                    uintptr
	EndGetNetworkList                      uintptr
	BeginGetNetworkApplicationList         uintptr
	EndGetNetworkApplicationList           uintptr
	BeginGetNetworkNodeList                uintptr
	EndGetNetworkNodeList                  uintptr
	BeginGetApplicationNetworkList         uintptr
	EndGetApplicationNetworkList           uintptr
	BeginGetDeployedNetworkList            uintptr
	EndGetDeployedNetworkList              uintptr
	BeginGetDeployedNetworkCodePackageList uintptr
	EndGetDeployedNetworkCodePackageList   uintptr
}

func (v *ComFabricNetworkManagementClient) vtable() *comFabricNetworkManagementClientVtbl {
	return (*comFabricNetworkManagementClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricNetworkManagementClient) beginCreateNetwork(
	networkName string,
	description *FabricNetworkDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *uint16
	s_93, _ := windows.UTF16PtrFromString(networkName)
	p_0 = s_93

	var p_1 *innerFabricNetworkDescription
	p_1 = description.toInnerStruct()
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginCreateNetwork,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(p_1)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endCreateNetwork(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndCreateNetwork,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginDeleteNetwork(
	deleteDescription *FabricDeleteNetworkDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeleteNetworkDescription
	p_0 = deleteDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginDeleteNetwork,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endDeleteNetwork(
	context *comIFabricAsyncOperationContext,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndDeleteNetwork,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginGetNetworkList(
	queryDescription *FabricNetworkQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNetworkQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNetworkList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endGetNetworkList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetNetworkListResult, err error) {
	var p_1 *comFabricGetNetworkListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNetworkList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginGetNetworkApplicationList(
	queryDescription *FabricNetworkApplicationQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNetworkApplicationQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNetworkApplicationList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endGetNetworkApplicationList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetNetworkApplicationListResult, err error) {
	var p_1 *comFabricGetNetworkApplicationListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNetworkApplicationList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginGetNetworkNodeList(
	queryDescription *FabricNetworkNodeQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricNetworkNodeQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetNetworkNodeList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endGetNetworkNodeList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetNetworkNodeListResult, err error) {
	var p_1 *comFabricGetNetworkNodeListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetNetworkNodeList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginGetApplicationNetworkList(
	queryDescription *FabricApplicationNetworkQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricApplicationNetworkQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetApplicationNetworkList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endGetApplicationNetworkList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetApplicationNetworkListResult, err error) {
	var p_1 *comFabricGetApplicationNetworkListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetApplicationNetworkList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginGetDeployedNetworkList(
	queryDescription *FabricDeployedNetworkQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedNetworkQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedNetworkList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endGetDeployedNetworkList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedNetworkListResult, err error) {
	var p_1 *comFabricGetDeployedNetworkListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedNetworkList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) beginGetDeployedNetworkCodePackageList(
	queryDescription *FabricDeployedNetworkCodePackageQueryDescription,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricDeployedNetworkCodePackageQueryDescription
	p_0 = queryDescription.toInnerStruct()
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetDeployedNetworkCodePackageList,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) endGetDeployedNetworkCodePackageList(
	context *comIFabricAsyncOperationContext,
) (result *comFabricGetDeployedNetworkCodePackageListResult, err error) {
	var p_1 *comFabricGetDeployedNetworkCodePackageListResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetDeployedNetworkCodePackageList,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricNetworkManagementClient) CreateNetwork(
	ctx context.Context,
	networkName string,
	description *FabricNetworkDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endCreateNetwork(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginCreateNetwork(
		networkName,
		description,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) DeleteNetwork(
	ctx context.Context,
	deleteDescription *FabricDeleteNetworkDescription,
) (err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		err := v.endDeleteNetwork(sfctx)

		if err != nil {
			ch <- err
			return
		}
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginDeleteNetwork(
		deleteDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) GetNetworkList(
	ctx context.Context,
	queryDescription *FabricNetworkQueryDescription,
) (result_0 []FabricNetworkInformation, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNetworkList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNetworkList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNetworkList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) GetNetworkApplicationList(
	ctx context.Context,
	queryDescription *FabricNetworkApplicationQueryDescription,
) (result_0 []FabricNetworkApplicationQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNetworkApplicationList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNetworkApplicationList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNetworkApplicationList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) GetNetworkNodeList(
	ctx context.Context,
	queryDescription *FabricNetworkNodeQueryDescription,
) (result_0 []FabricNetworkNodeQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetNetworkNodeList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetNetworkNodeList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetNetworkNodeList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) GetApplicationNetworkList(
	ctx context.Context,
	queryDescription *FabricApplicationNetworkQueryDescription,
) (result_0 []FabricApplicationNetworkQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetApplicationNetworkList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetApplicationNetworkList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetApplicationNetworkList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) GetDeployedNetworkList(
	ctx context.Context,
	queryDescription *FabricDeployedNetworkQueryDescription,
) (result_0 []FabricDeployedNetworkQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedNetworkList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedNetworkList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedNetworkList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricNetworkManagementClient) GetDeployedNetworkCodePackageList(
	ctx context.Context,
	queryDescription *FabricDeployedNetworkCodePackageQueryDescription,
) (result_0 []FabricDeployedNetworkCodePackageQueryResultItem, result_1 *FabricPagingStatus, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetDeployedNetworkCodePackageList(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetDeployedNetworkCodePackageList()
		if err != nil {
			ch <- err
			return
		}
		result_1, err = rt_1.GetPagingStatus()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetDeployedNetworkCodePackageList(
		queryDescription,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type comFabricGetRepairTaskListResult struct {
	ole.IUnknown
}

type comFabricGetRepairTaskListResultVtbl struct {
	ole.IUnknownVtbl
	get_Tasks uintptr
}

func (v *comFabricGetRepairTaskListResult) vtable() *comFabricGetRepairTaskListResultVtbl {
	return (*comFabricGetRepairTaskListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetRepairTaskListResult) GetTasks() (rt []FabricRepairTask, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Tasks,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricRepairTaskList)(unsafe.Pointer(hr))

	{
		var lst []FabricRepairTask

		var innerlst []innerFabricRepairTask

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricRepairTask

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricServiceDescriptionResult struct {
	ole.IUnknown
}

type comFabricServiceDescriptionResultVtbl struct {
	ole.IUnknownVtbl
	get_Description uintptr
}

func (v *comFabricServiceDescriptionResult) vtable() *comFabricServiceDescriptionResultVtbl {
	return (*comFabricServiceDescriptionResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServiceDescriptionResult) GetDescription() (rt *FabricServiceDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Description,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricServiceGroupDescriptionResult struct {
	ole.IUnknown
}

type comFabricServiceGroupDescriptionResultVtbl struct {
	ole.IUnknownVtbl
	get_Description uintptr
}

func (v *comFabricServiceGroupDescriptionResult) vtable() *comFabricServiceGroupDescriptionResultVtbl {
	return (*comFabricServiceGroupDescriptionResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServiceGroupDescriptionResult) GetDescription() (rt *FabricServiceGroupDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Description,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceGroupDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricResolvedServicePartitionResult struct {
	ole.IUnknown
}

type comFabricResolvedServicePartitionResultVtbl struct {
	ole.IUnknownVtbl
	get_Partition  uintptr
	GetEndpoint    uintptr
	CompareVersion uintptr
}

func (v *comFabricResolvedServicePartitionResult) vtable() *comFabricResolvedServicePartitionResultVtbl {
	return (*comFabricResolvedServicePartitionResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricResolvedServicePartitionResult) GetPartition() (rt *FabricResolvedServicePartition, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Partition,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricResolvedServicePartition)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *comFabricResolvedServicePartitionResult) GetEndpoint() (endpoint *FabricResolvedServiceEndpoint, err error) {
	var p_0 *innerFabricResolvedServiceEndpoint
	defer func() {
		endpoint = p_0.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetEndpoint,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricResolvedServicePartitionResult) CompareVersion(
	other *comFabricResolvedServicePartitionResult,
) (compareResult int32, err error) {
	var p_1 int32
	defer func() {
		compareResult = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().CompareVersion,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(other)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricServiceEndpointsVersion struct {
	ole.IUnknown
}

type comFabricServiceEndpointsVersionVtbl struct {
	ole.IUnknownVtbl
	Compare uintptr
}

func (v *comFabricServiceEndpointsVersion) vtable() *comFabricServiceEndpointsVersionVtbl {
	return (*comFabricServiceEndpointsVersionVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServiceEndpointsVersion) Compare(
	other *comFabricServiceEndpointsVersion,
) (compareResult int32, err error) {
	var p_1 int32
	defer func() {
		compareResult = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().Compare,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(other)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricServiceNotification struct {
	ole.IUnknown
}

type comFabricServiceNotificationVtbl struct {
	ole.IUnknownVtbl
	get_Notification uintptr
	GetVersion       uintptr
}

func (v *comFabricServiceNotification) vtable() *comFabricServiceNotificationVtbl {
	return (*comFabricServiceNotificationVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServiceNotification) GetNotification() (rt *FabricServiceNotification, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Notification,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceNotification)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *comFabricServiceNotification) GetVersion() (result *comFabricServiceEndpointsVersion, err error) {
	var p_0 *comFabricServiceEndpointsVersion
	defer func() {
		result = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetVersion,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricNameEnumerationResult struct {
	ole.IUnknown
}

type comFabricNameEnumerationResultVtbl struct {
	ole.IUnknownVtbl
	get_EnumerationStatus uintptr
	GetNames              uintptr
}

func (v *comFabricNameEnumerationResult) vtable() *comFabricNameEnumerationResultVtbl {
	return (*comFabricNameEnumerationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricNameEnumerationResult) GetEnumerationStatus() (rt FabricErrornumerationStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_EnumerationStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricErrornumerationStatus(hr)
	return
}

type comFabricPropertyMetadataResult struct {
	ole.IUnknown
}

type comFabricPropertyMetadataResultVtbl struct {
	ole.IUnknownVtbl
	get_Metadata uintptr
}

func (v *comFabricPropertyMetadataResult) vtable() *comFabricPropertyMetadataResultVtbl {
	return (*comFabricPropertyMetadataResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPropertyMetadataResult) GetMetadata() (rt *FabricNamedPropertyMetadata, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Metadata,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNamedPropertyMetadata)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricPropertyValueResult struct {
	ole.IUnknown
}

type comFabricPropertyValueResultVtbl struct {
	ole.IUnknownVtbl
	get_Property      uintptr
	GetValueAsBinary  uintptr
	GetValueAsInt64   uintptr
	GetValueAsDouble  uintptr
	GetValueAsWString uintptr
	GetValueAsGuid    uintptr
}

func (v *comFabricPropertyValueResult) vtable() *comFabricPropertyValueResultVtbl {
	return (*comFabricPropertyValueResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPropertyValueResult) GetProperty() (rt *FabricNamedProperty, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Property,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNamedProperty)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
func (v *comFabricPropertyValueResult) GetValueAsBinary() (byteCount uint32, bufferedValue *byte, err error) {
	var p_0 uint32
	defer func() {
		byteCount = p_0
	}()
	var p_1 *byte
	defer func() {
		bufferedValue = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetValueAsBinary,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyValueResult) GetValueAsInt64() (value int64, err error) {
	var p_0 int64
	defer func() {
		value = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetValueAsInt64,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyValueResult) GetValueAsDouble() (value float64, err error) {
	var p_0 float64
	defer func() {
		value = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetValueAsDouble,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyValueResult) GetValueAsWString() (bufferedValue string, err error) {
	var p_0 *uint16
	defer func() {
		bufferedValue = windows.UTF16PtrToString(p_0)
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetValueAsWString,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricPropertyValueResult) GetValueAsGuid() (value windows.GUID, err error) {
	var p_0 windows.GUID
	defer func() {
		value = p_0
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetValueAsGuid,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricPropertyBatchResult struct {
	ole.IUnknown
}

type comFabricPropertyBatchResultVtbl struct {
	ole.IUnknownVtbl
	GetProperty uintptr
}

func (v *comFabricPropertyBatchResult) vtable() *comFabricPropertyBatchResultVtbl {
	return (*comFabricPropertyBatchResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPropertyBatchResult) GetProperty(
	operationIndexInRequest uint32,
) (property *comFabricPropertyValueResult, err error) {
	var p_1 *comFabricPropertyValueResult
	defer func() {
		property = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetProperty,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(operationIndexInRequest),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricPropertyEnumerationResult struct {
	ole.IUnknown
}

type comFabricPropertyEnumerationResultVtbl struct {
	ole.IUnknownVtbl
	get_EnumerationStatus uintptr
	get_PropertyCount     uintptr
	GetProperty           uintptr
}

func (v *comFabricPropertyEnumerationResult) vtable() *comFabricPropertyEnumerationResultVtbl {
	return (*comFabricPropertyEnumerationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPropertyEnumerationResult) GetEnumerationStatus() (rt FabricErrornumerationStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_EnumerationStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricErrornumerationStatus(hr)
	return
}
func (v *comFabricPropertyEnumerationResult) GetPropertyCount() (rt uint32, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PropertyCount,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = uint32(hr)
	return
}
func (v *comFabricPropertyEnumerationResult) GetProperty(
	index uint32,
) (property *comFabricPropertyValueResult, err error) {
	var p_1 *comFabricPropertyValueResult
	defer func() {
		property = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetProperty,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(index),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricApplicationUpgradeProgressResult struct {
	ole.IUnknown
}

type comFabricApplicationUpgradeProgressResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationName              uintptr
	get_ApplicationTypeName          uintptr
	get_TargetApplicationTypeVersion uintptr
	get_UpgradeState                 uintptr
	GetUpgradeDomains                uintptr
	GetChangedUpgradeDomains         uintptr
}

func (v *comFabricApplicationUpgradeProgressResult) vtable() *comFabricApplicationUpgradeProgressResultVtbl {
	return (*comFabricApplicationUpgradeProgressResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricApplicationUpgradeProgressResult) GetApplicationName() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *comFabricApplicationUpgradeProgressResult) GetApplicationTypeName() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationTypeName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *comFabricApplicationUpgradeProgressResult) GetTargetApplicationTypeVersion() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_TargetApplicationTypeVersion,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *comFabricApplicationUpgradeProgressResult) GetUpgradeState() (rt FabricApplicationUpgradeState, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_UpgradeState,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricApplicationUpgradeState(hr)
	return
}

type comFabricApplicationUpgradeProgressResult2 struct {
	comFabricApplicationUpgradeProgressResult
}

type comFabricApplicationUpgradeProgressResult2Vtbl struct {
	comFabricApplicationUpgradeProgressResultVtbl
	get_RollingUpgradeMode uintptr
	get_NextUpgradeDomain  uintptr
}

func (v *comFabricApplicationUpgradeProgressResult2) vtable() *comFabricApplicationUpgradeProgressResult2Vtbl {
	return (*comFabricApplicationUpgradeProgressResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricApplicationUpgradeProgressResult2) GetRollingUpgradeMode() (rt FabricRollingUpgradeMode, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_RollingUpgradeMode,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricRollingUpgradeMode(hr)
	return
}
func (v *comFabricApplicationUpgradeProgressResult2) GetNextUpgradeDomain() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NextUpgradeDomain,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}

type comFabricApplicationUpgradeProgressResult3 struct {
	comFabricApplicationUpgradeProgressResult2
}

type comFabricApplicationUpgradeProgressResult3Vtbl struct {
	comFabricApplicationUpgradeProgressResult2Vtbl
	get_UpgradeProgress uintptr
}

func (v *comFabricApplicationUpgradeProgressResult3) vtable() *comFabricApplicationUpgradeProgressResult3Vtbl {
	return (*comFabricApplicationUpgradeProgressResult3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricApplicationUpgradeProgressResult3) GetUpgradeProgress() (rt *FabricApplicationUpgradeProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_UpgradeProgress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationUpgradeProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricUpgradeProgressResult struct {
	ole.IUnknown
}

type comFabricUpgradeProgressResultVtbl struct {
	ole.IUnknownVtbl
	get_TargetCodeVersion    uintptr
	get_TargetConfigVersion  uintptr
	get_UpgradeState         uintptr
	GetUpgradeDomains        uintptr
	GetChangedUpgradeDomains uintptr
}

func (v *comFabricUpgradeProgressResult) vtable() *comFabricUpgradeProgressResultVtbl {
	return (*comFabricUpgradeProgressResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricUpgradeProgressResult) GetTargetCodeVersion() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_TargetCodeVersion,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *comFabricUpgradeProgressResult) GetTargetConfigVersion() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_TargetConfigVersion,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}
func (v *comFabricUpgradeProgressResult) GetUpgradeState() (rt FabricUpgradeState, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_UpgradeState,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricUpgradeState(hr)
	return
}
func (v *comFabricUpgradeProgressResult) GetUpgradeDomains() (itemCount uint32, bufferedItems *FabricUpgradeDomainStatusDescription, err error) {
	var p_0 uint32
	defer func() {
		itemCount = p_0
	}()
	var p_1 *innerFabricUpgradeDomainStatusDescription
	defer func() {
		bufferedItems = p_1.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().GetUpgradeDomains,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(&p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricUpgradeProgressResult) GetChangedUpgradeDomains(
	previousProgress *comFabricUpgradeProgressResult,
) (itemCount uint32, bufferedItems *FabricUpgradeDomainStatusDescription, err error) {
	var p_1 uint32
	defer func() {
		itemCount = p_1
	}()
	var p_2 *innerFabricUpgradeDomainStatusDescription
	defer func() {
		bufferedItems = p_2.toGoStruct()
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().GetChangedUpgradeDomains,
		4,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(previousProgress)),
		uintptr(unsafe.Pointer(&p_1)),
		uintptr(unsafe.Pointer(&p_2)),
		0,
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricRestartNodeResult struct {
	ole.IUnknown
}

type comFabricRestartNodeResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricRestartNodeResult) vtable() *comFabricRestartNodeResultVtbl {
	return (*comFabricRestartNodeResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricRestartNodeResult) GetResult() (rt *FabricNodeResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricStartNodeResult struct {
	ole.IUnknown
}

type comFabricStartNodeResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricStartNodeResult) vtable() *comFabricStartNodeResultVtbl {
	return (*comFabricStartNodeResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricStartNodeResult) GetResult() (rt *FabricNodeResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricStopNodeResult struct {
	ole.IUnknown
}

type comFabricStopNodeResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricStopNodeResult) vtable() *comFabricStopNodeResultVtbl {
	return (*comFabricStopNodeResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricStopNodeResult) GetResult() (rt *FabricNodeResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricRestartDeployedCodePackageResult struct {
	ole.IUnknown
}

type comFabricRestartDeployedCodePackageResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricRestartDeployedCodePackageResult) vtable() *comFabricRestartDeployedCodePackageResultVtbl {
	return (*comFabricRestartDeployedCodePackageResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricRestartDeployedCodePackageResult) GetResult() (rt *FabricDeployedCodePackageResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedCodePackageResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricMovePrimaryResult struct {
	ole.IUnknown
}

type comFabricMovePrimaryResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricMovePrimaryResult) vtable() *comFabricMovePrimaryResultVtbl {
	return (*comFabricMovePrimaryResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricMovePrimaryResult) GetResult() (rt *FabricMovePrimaryResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricMovePrimaryResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricMoveSecondaryResult struct {
	ole.IUnknown
}

type comFabricMoveSecondaryResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricMoveSecondaryResult) vtable() *comFabricMoveSecondaryResultVtbl {
	return (*comFabricMoveSecondaryResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricMoveSecondaryResult) GetResult() (rt *FabricMoveSecondaryResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricMoveSecondaryResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricUpgradeProgressResult2 struct {
	comFabricUpgradeProgressResult
}

type comFabricUpgradeProgressResult2Vtbl struct {
	comFabricUpgradeProgressResultVtbl
	get_RollingUpgradeMode uintptr
	get_NextUpgradeDomain  uintptr
}

func (v *comFabricUpgradeProgressResult2) vtable() *comFabricUpgradeProgressResult2Vtbl {
	return (*comFabricUpgradeProgressResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricUpgradeProgressResult2) GetRollingUpgradeMode() (rt FabricRollingUpgradeMode, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_RollingUpgradeMode,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	_ = err1
	rt = FabricRollingUpgradeMode(hr)
	return
}
func (v *comFabricUpgradeProgressResult2) GetNextUpgradeDomain() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NextUpgradeDomain,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}

type comFabricUpgradeProgressResult3 struct {
	comFabricUpgradeProgressResult2
}

type comFabricUpgradeProgressResult3Vtbl struct {
	comFabricUpgradeProgressResult2Vtbl
	get_UpgradeProgress uintptr
}

func (v *comFabricUpgradeProgressResult3) vtable() *comFabricUpgradeProgressResult3Vtbl {
	return (*comFabricUpgradeProgressResult3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricUpgradeProgressResult3) GetUpgradeProgress() (rt *FabricUpgradeProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_UpgradeProgress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricUpgradeProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricServicePartitionResolutionChangeHandler struct {
	ole.IUnknown
}

type comFabricServicePartitionResolutionChangeHandlerVtbl struct {
	ole.IUnknownVtbl
	OnChange uintptr
}

func (v *comFabricServicePartitionResolutionChangeHandler) vtable() *comFabricServicePartitionResolutionChangeHandlerVtbl {
	return (*comFabricServicePartitionResolutionChangeHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServicePartitionResolutionChangeHandler) OnChange(
	source *ComFabricServiceManagementClient,
	handlerId int64,
	partition *comFabricResolvedServicePartitionResult,
	error FabricErrorCode,
) (rt interface{}, err error) {
	hr, _, err1 := syscall.Syscall6(
		v.vtable().OnChange,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(source)),
		uintptr(handlerId),
		uintptr(unsafe.Pointer(partition)),
		uintptr(error),
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (unsafe.Pointer)(unsafe.Pointer(hr))

	rt = fromUnsafePointer(tmp)
	return
}

type comFabricServiceNotificationEventHandler struct {
	ole.IUnknown
}

type comFabricServiceNotificationEventHandlerVtbl struct {
	ole.IUnknownVtbl
	OnNotification uintptr
}

func (v *comFabricServiceNotificationEventHandler) vtable() *comFabricServiceNotificationEventHandlerVtbl {
	return (*comFabricServiceNotificationEventHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServiceNotificationEventHandler) OnNotification(
	param_0 *comFabricServiceNotification,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnNotification,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(param_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricClientConnectionEventHandler struct {
	ole.IUnknown
}

type comFabricClientConnectionEventHandlerVtbl struct {
	ole.IUnknownVtbl
	OnConnected    uintptr
	OnDisconnected uintptr
}

func (v *comFabricClientConnectionEventHandler) vtable() *comFabricClientConnectionEventHandlerVtbl {
	return (*comFabricClientConnectionEventHandlerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClientConnectionEventHandler) OnConnected(
	param_0 *comFabricGatewayInformationResult,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnConnected,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(param_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *comFabricClientConnectionEventHandler) OnDisconnected(
	param_0 *comFabricGatewayInformationResult,
) (err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnDisconnected,
		2,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(param_0)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type comFabricClientConnectionEventHandler2 struct {
	comFabricClientConnectionEventHandler
}

type comFabricClientConnectionEventHandler2Vtbl struct {
	comFabricClientConnectionEventHandlerVtbl
	OnClaimsRetrieval uintptr
}

func (v *comFabricClientConnectionEventHandler2) vtable() *comFabricClientConnectionEventHandler2Vtbl {
	return (*comFabricClientConnectionEventHandler2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClientConnectionEventHandler2) OnClaimsRetrieval(
	metadata *FabricClaimsRetrievalMetadata,
) (token *comFabricStringResult, err error) {
	var p_0 *innerFabricClaimsRetrievalMetadata
	p_0 = metadata.toInnerStruct()
	var p_1 *comFabricStringResult
	defer func() {
		token = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().OnClaimsRetrieval,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}

type ComFabricClientSettingsResult struct {
	ole.IUnknown
}

type comFabricClientSettingsResultVtbl struct {
	ole.IUnknownVtbl
	get_Settings uintptr
}

func (v *ComFabricClientSettingsResult) vtable() *comFabricClientSettingsResultVtbl {
	return (*comFabricClientSettingsResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricClientSettingsResult) GetSettings() (rt *FabricClientSettings, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Settings,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricClientSettings)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricClusterHealthResult struct {
	ole.IUnknown
}

type comFabricClusterHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_ClusterHealth uintptr
}

func (v *comFabricClusterHealthResult) vtable() *comFabricClusterHealthResultVtbl {
	return (*comFabricClusterHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricClusterHealthResult) GetClusterHealth() (rt *FabricClusterHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ClusterHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricClusterHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricNodeHealthResult struct {
	ole.IUnknown
}

type comFabricNodeHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_NodeHealth uintptr
}

func (v *comFabricNodeHealthResult) vtable() *comFabricNodeHealthResultVtbl {
	return (*comFabricNodeHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricNodeHealthResult) GetNodeHealth() (rt *FabricNodeHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NodeHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricApplicationHealthResult struct {
	ole.IUnknown
}

type comFabricApplicationHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationHealth uintptr
}

func (v *comFabricApplicationHealthResult) vtable() *comFabricApplicationHealthResultVtbl {
	return (*comFabricApplicationHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricApplicationHealthResult) GetApplicationHealth() (rt *FabricApplicationHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricServiceHealthResult struct {
	ole.IUnknown
}

type comFabricServiceHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_ServiceHealth uintptr
}

func (v *comFabricServiceHealthResult) vtable() *comFabricServiceHealthResultVtbl {
	return (*comFabricServiceHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricServiceHealthResult) GetServiceHealth() (rt *FabricServiceHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricPartitionHealthResult struct {
	ole.IUnknown
}

type comFabricPartitionHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_PartitionHealth uintptr
}

func (v *comFabricPartitionHealthResult) vtable() *comFabricPartitionHealthResultVtbl {
	return (*comFabricPartitionHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPartitionHealthResult) GetPartitionHealth() (rt *FabricPartitionHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PartitionHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPartitionHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricReplicaHealthResult struct {
	ole.IUnknown
}

type comFabricReplicaHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_ReplicaHealth uintptr
}

func (v *comFabricReplicaHealthResult) vtable() *comFabricReplicaHealthResultVtbl {
	return (*comFabricReplicaHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricReplicaHealthResult) GetReplicaHealth() (rt *FabricReplicaHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ReplicaHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricReplicaHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricDeployedApplicationHealthResult struct {
	ole.IUnknown
}

type comFabricDeployedApplicationHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedApplicationHealth uintptr
}

func (v *comFabricDeployedApplicationHealthResult) vtable() *comFabricDeployedApplicationHealthResultVtbl {
	return (*comFabricDeployedApplicationHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricDeployedApplicationHealthResult) GetDeployedApplicationHealth() (rt *FabricDeployedApplicationHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedApplicationHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedApplicationHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricDeployedServicePackageHealthResult struct {
	ole.IUnknown
}

type comFabricDeployedServicePackageHealthResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedServicePackageHealth uintptr
}

func (v *comFabricDeployedServicePackageHealthResult) vtable() *comFabricDeployedServicePackageHealthResultVtbl {
	return (*comFabricDeployedServicePackageHealthResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricDeployedServicePackageHealthResult) GetDeployedServicePackageHealth() (rt *FabricDeployedServicePackageHealth, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedServicePackageHealth,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedServicePackageHealth)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetNodeListResult struct {
	ole.IUnknown
}

type comFabricGetNodeListResultVtbl struct {
	ole.IUnknownVtbl
	get_NodeList uintptr
}

func (v *comFabricGetNodeListResult) vtable() *comFabricGetNodeListResultVtbl {
	return (*comFabricGetNodeListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetNodeListResult) GetNodeList() (rt []FabricNodeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NodeList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricNodeQueryResultItem

		var innerlst []innerFabricNodeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricNodeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetApplicationTypeListResult struct {
	ole.IUnknown
}

type comFabricGetApplicationTypeListResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationTypeList uintptr
}

func (v *comFabricGetApplicationTypeListResult) vtable() *comFabricGetApplicationTypeListResultVtbl {
	return (*comFabricGetApplicationTypeListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationTypeListResult) GetApplicationTypeList() (rt []FabricApplicationTypeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationTypeList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationTypeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricApplicationTypeQueryResultItem

		var innerlst []innerFabricApplicationTypeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricApplicationTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetApplicationTypePagedListResult struct {
	ole.IUnknown
}

type comFabricGetApplicationTypePagedListResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationTypePagedList uintptr
	get_PagingStatus             uintptr
}

func (v *comFabricGetApplicationTypePagedListResult) vtable() *comFabricGetApplicationTypePagedListResultVtbl {
	return (*comFabricGetApplicationTypePagedListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationTypePagedListResult) GetApplicationTypePagedList() (rt []FabricApplicationTypeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationTypePagedList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationTypeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricApplicationTypeQueryResultItem

		var innerlst []innerFabricApplicationTypeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricApplicationTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetApplicationTypePagedListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetApplicationListResult struct {
	ole.IUnknown
}

type comFabricGetApplicationListResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationList uintptr
}

func (v *comFabricGetApplicationListResult) vtable() *comFabricGetApplicationListResultVtbl {
	return (*comFabricGetApplicationListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationListResult) GetApplicationList() (rt []FabricApplicationQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricApplicationQueryResultItem

		var innerlst []innerFabricApplicationQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetServiceTypeListResult struct {
	ole.IUnknown
}

type comFabricGetServiceTypeListResultVtbl struct {
	ole.IUnknownVtbl
	get_ServiceTypeList uintptr
}

func (v *comFabricGetServiceTypeListResult) vtable() *comFabricGetServiceTypeListResultVtbl {
	return (*comFabricGetServiceTypeListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetServiceTypeListResult) GetServiceTypeList() (rt []FabricServiceTypeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceTypeList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceTypeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceTypeQueryResultItem

		var innerlst []innerFabricServiceTypeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetServiceGroupMemberTypeListResult struct {
	ole.IUnknown
}

type comFabricGetServiceGroupMemberTypeListResultVtbl struct {
	ole.IUnknownVtbl
	get_ServiceGroupMemberTypeList uintptr
}

func (v *comFabricGetServiceGroupMemberTypeListResult) vtable() *comFabricGetServiceGroupMemberTypeListResultVtbl {
	return (*comFabricGetServiceGroupMemberTypeListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetServiceGroupMemberTypeListResult) GetServiceGroupMemberTypeList() (rt []FabricServiceGroupMemberTypeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceGroupMemberTypeList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceGroupMemberTypeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceGroupMemberTypeQueryResultItem

		var innerlst []innerFabricServiceGroupMemberTypeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupMemberTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetServiceListResult struct {
	ole.IUnknown
}

type comFabricGetServiceListResultVtbl struct {
	ole.IUnknownVtbl
	get_ServiceList uintptr
}

func (v *comFabricGetServiceListResult) vtable() *comFabricGetServiceListResultVtbl {
	return (*comFabricGetServiceListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetServiceListResult) GetServiceList() (rt []FabricServiceQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceQueryResultItem

		var innerlst []innerFabricServiceQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetServiceGroupMemberListResult struct {
	ole.IUnknown
}

type comFabricGetServiceGroupMemberListResultVtbl struct {
	ole.IUnknownVtbl
	get_ServiceGroupMemberList uintptr
}

func (v *comFabricGetServiceGroupMemberListResult) vtable() *comFabricGetServiceGroupMemberListResultVtbl {
	return (*comFabricGetServiceGroupMemberListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetServiceGroupMemberListResult) GetServiceGroupMemberList() (rt []FabricServiceGroupMemberQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceGroupMemberList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceGroupMemberQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceGroupMemberQueryResultItem

		var innerlst []innerFabricServiceGroupMemberQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceGroupMemberQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetPartitionListResult struct {
	ole.IUnknown
}

type comFabricGetPartitionListResultVtbl struct {
	ole.IUnknownVtbl
	get_PartitionList uintptr
}

func (v *comFabricGetPartitionListResult) vtable() *comFabricGetPartitionListResultVtbl {
	return (*comFabricGetPartitionListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetPartitionListResult) GetPartitionList() (rt []FabricServicePartitionQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PartitionList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServicePartitionQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricServicePartitionQueryResultItem

		var innerlst []innerFabricServicePartitionQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServicePartitionQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetPartitionLoadInformationResult struct {
	ole.IUnknown
}

type comFabricGetPartitionLoadInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_PartitionLoadInformation uintptr
}

func (v *comFabricGetPartitionLoadInformationResult) vtable() *comFabricGetPartitionLoadInformationResultVtbl {
	return (*comFabricGetPartitionLoadInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetPartitionLoadInformationResult) GetPartitionLoadInformation() (rt *FabricPartitionLoadInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PartitionLoadInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPartitionLoadInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetReplicaListResult struct {
	ole.IUnknown
}

type comFabricGetReplicaListResultVtbl struct {
	ole.IUnknownVtbl
	get_ReplicaList uintptr
}

func (v *comFabricGetReplicaListResult) vtable() *comFabricGetReplicaListResultVtbl {
	return (*comFabricGetReplicaListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetReplicaListResult) GetReplicaList() (rt []FabricServiceReplicaQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ReplicaList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceReplicaQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricServiceReplicaQueryResultItem

		var innerlst []innerFabricServiceReplicaQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricServiceReplicaQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetDeployedApplicationListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedApplicationListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedApplicationList uintptr
}

func (v *comFabricGetDeployedApplicationListResult) vtable() *comFabricGetDeployedApplicationListResultVtbl {
	return (*comFabricGetDeployedApplicationListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedApplicationListResult) GetDeployedApplicationList() (rt []FabricDeployedApplicationQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedApplicationList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedApplicationQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedApplicationQueryResultItem

		var innerlst []innerFabricDeployedApplicationQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetDeployedApplicationPagedListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedApplicationPagedListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedApplicationPagedList uintptr
	get_PagingStatus                 uintptr
}

func (v *comFabricGetDeployedApplicationPagedListResult) vtable() *comFabricGetDeployedApplicationPagedListResultVtbl {
	return (*comFabricGetDeployedApplicationPagedListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedApplicationPagedListResult) GetDeployedApplicationPagedList() (rt []FabricDeployedApplicationQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedApplicationPagedList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedApplicationQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedApplicationQueryResultItem

		var innerlst []innerFabricDeployedApplicationQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetDeployedApplicationPagedListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetDeployedServicePackageListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedServicePackageListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedServicePackageList uintptr
}

func (v *comFabricGetDeployedServicePackageListResult) vtable() *comFabricGetDeployedServicePackageListResultVtbl {
	return (*comFabricGetDeployedServicePackageListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedServicePackageListResult) GetDeployedServicePackageList() (rt []FabricDeployedServicePackageQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedServicePackageList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedServicePackageQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedServicePackageQueryResultItem

		var innerlst []innerFabricDeployedServicePackageQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedServicePackageQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetDeployedServiceTypeListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedServiceTypeListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedServiceTypeList uintptr
}

func (v *comFabricGetDeployedServiceTypeListResult) vtable() *comFabricGetDeployedServiceTypeListResultVtbl {
	return (*comFabricGetDeployedServiceTypeListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedServiceTypeListResult) GetDeployedServiceTypeList() (rt []FabricDeployedServiceTypeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedServiceTypeList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedServiceTypeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedServiceTypeQueryResultItem

		var innerlst []innerFabricDeployedServiceTypeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedServiceTypeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetDeployedCodePackageListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedCodePackageListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedCodePackageList uintptr
}

func (v *comFabricGetDeployedCodePackageListResult) vtable() *comFabricGetDeployedCodePackageListResultVtbl {
	return (*comFabricGetDeployedCodePackageListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedCodePackageListResult) GetDeployedCodePackageList() (rt []FabricDeployedCodePackageQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedCodePackageList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedCodePackageQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedCodePackageQueryResultItem

		var innerlst []innerFabricDeployedCodePackageQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedCodePackageQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetDeployedReplicaListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedReplicaListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedReplicaList uintptr
}

func (v *comFabricGetDeployedReplicaListResult) vtable() *comFabricGetDeployedReplicaListResultVtbl {
	return (*comFabricGetDeployedReplicaListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedReplicaListResult) GetDeployedReplicaList() (rt []FabricDeployedServiceReplicaQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedReplicaList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedServiceReplicaQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedServiceReplicaQueryResultItem

		var innerlst []innerFabricDeployedServiceReplicaQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedServiceReplicaQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetDeployedServiceReplicaDetailResult struct {
	ole.IUnknown
}

type comFabricGetDeployedServiceReplicaDetailResultVtbl struct {
	ole.IUnknownVtbl
	get_ReplicaDetail uintptr
}

func (v *comFabricGetDeployedServiceReplicaDetailResult) vtable() *comFabricGetDeployedServiceReplicaDetailResultVtbl {
	return (*comFabricGetDeployedServiceReplicaDetailResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedServiceReplicaDetailResult) GetReplicaDetail() (rt *FabricDeployedServiceReplicaDetailQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ReplicaDetail,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedServiceReplicaDetailQueryResultItem)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetProvisionedCodeVersionListResult struct {
	ole.IUnknown
}

type comFabricGetProvisionedCodeVersionListResultVtbl struct {
	ole.IUnknownVtbl
	get_ProvisionedCodeVersionList uintptr
}

func (v *comFabricGetProvisionedCodeVersionListResult) vtable() *comFabricGetProvisionedCodeVersionListResultVtbl {
	return (*comFabricGetProvisionedCodeVersionListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetProvisionedCodeVersionListResult) GetProvisionedCodeVersionList() (rt []FabricProvisionedCodeVersionQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ProvisionedCodeVersionList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricProvisionedCodeVersionQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricProvisionedCodeVersionQueryResultItem

		var innerlst []innerFabricProvisionedCodeVersionQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricProvisionedCodeVersionQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetClusterLoadInformationResult struct {
	ole.IUnknown
}

type comFabricGetClusterLoadInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_ClusterLoadInformation uintptr
}

func (v *comFabricGetClusterLoadInformationResult) vtable() *comFabricGetClusterLoadInformationResultVtbl {
	return (*comFabricGetClusterLoadInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetClusterLoadInformationResult) GetClusterLoadInformation() (rt *FabricClusterLoadInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ClusterLoadInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricClusterLoadInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetProvisionedConfigVersionListResult struct {
	ole.IUnknown
}

type comFabricGetProvisionedConfigVersionListResultVtbl struct {
	ole.IUnknownVtbl
	get_ProvisionedConfigVersionList uintptr
}

func (v *comFabricGetProvisionedConfigVersionListResult) vtable() *comFabricGetProvisionedConfigVersionListResultVtbl {
	return (*comFabricGetProvisionedConfigVersionListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetProvisionedConfigVersionListResult) GetProvisionedConfigVersionList() (rt []FabricProvisionedConfigVersionQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ProvisionedConfigVersionList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricProvisionedConfigVersionQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricProvisionedConfigVersionQueryResultItem

		var innerlst []innerFabricProvisionedConfigVersionQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricProvisionedConfigVersionQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricGetNodeLoadInformationResult struct {
	ole.IUnknown
}

type comFabricGetNodeLoadInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_NodeLoadInformation uintptr
}

func (v *comFabricGetNodeLoadInformationResult) vtable() *comFabricGetNodeLoadInformationResultVtbl {
	return (*comFabricGetNodeLoadInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetNodeLoadInformationResult) GetNodeLoadInformation() (rt *FabricNodeLoadInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NodeLoadInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeLoadInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetReplicaLoadInformationResult struct {
	ole.IUnknown
}

type comFabricGetReplicaLoadInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_ReplicaLoadInformation uintptr
}

func (v *comFabricGetReplicaLoadInformationResult) vtable() *comFabricGetReplicaLoadInformationResultVtbl {
	return (*comFabricGetReplicaLoadInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetReplicaLoadInformationResult) GetReplicaLoadInformation() (rt *FabricReplicaLoadInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ReplicaLoadInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricReplicaLoadInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetApplicationLoadInformationResult struct {
	ole.IUnknown
}

type comFabricGetApplicationLoadInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationLoadInformation uintptr
}

func (v *comFabricGetApplicationLoadInformationResult) vtable() *comFabricGetApplicationLoadInformationResultVtbl {
	return (*comFabricGetApplicationLoadInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationLoadInformationResult) GetApplicationLoadInformation() (rt *FabricApplicationLoadInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationLoadInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationLoadInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGatewayInformationResult struct {
	ole.IUnknown
}

type comFabricGatewayInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_GatewayInformation uintptr
}

func (v *comFabricGatewayInformationResult) vtable() *comFabricGatewayInformationResultVtbl {
	return (*comFabricGatewayInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGatewayInformationResult) GetGatewayInformation() (rt *FabricGatewayInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_GatewayInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricGatewayInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetRollingUpgradeMonitoringPolicyResult struct {
	ole.IUnknown
}

type comFabricGetRollingUpgradeMonitoringPolicyResultVtbl struct {
	ole.IUnknownVtbl
	get_Policy uintptr
}

func (v *comFabricGetRollingUpgradeMonitoringPolicyResult) vtable() *comFabricGetRollingUpgradeMonitoringPolicyResultVtbl {
	return (*comFabricGetRollingUpgradeMonitoringPolicyResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetRollingUpgradeMonitoringPolicyResult) GetPolicy() (rt *FabricRollingUpgradeMonitoringPolicy, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Policy,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricRollingUpgradeMonitoringPolicy)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetUnplacedReplicaInformationResult struct {
	ole.IUnknown
}

type comFabricGetUnplacedReplicaInformationResultVtbl struct {
	ole.IUnknownVtbl
	get_UnplacedReplicaInformation uintptr
}

func (v *comFabricGetUnplacedReplicaInformationResult) vtable() *comFabricGetUnplacedReplicaInformationResultVtbl {
	return (*comFabricGetUnplacedReplicaInformationResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetUnplacedReplicaInformationResult) GetUnplacedReplicaInformation() (rt *FabricUnplacedReplicaInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_UnplacedReplicaInformation,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricUnplacedReplicaInformation)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetNodeListResult2 struct {
	comFabricGetNodeListResult
}

type comFabricGetNodeListResult2Vtbl struct {
	comFabricGetNodeListResultVtbl
	get_PagingStatus uintptr
}

func (v *comFabricGetNodeListResult2) vtable() *comFabricGetNodeListResult2Vtbl {
	return (*comFabricGetNodeListResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetNodeListResult2) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetApplicationListResult2 struct {
	comFabricGetApplicationListResult
}

type comFabricGetApplicationListResult2Vtbl struct {
	comFabricGetApplicationListResultVtbl
	get_PagingStatus uintptr
}

func (v *comFabricGetApplicationListResult2) vtable() *comFabricGetApplicationListResult2Vtbl {
	return (*comFabricGetApplicationListResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationListResult2) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetServiceListResult2 struct {
	comFabricGetServiceListResult
}

type comFabricGetServiceListResult2Vtbl struct {
	comFabricGetServiceListResultVtbl
	get_PagingStatus uintptr
}

func (v *comFabricGetServiceListResult2) vtable() *comFabricGetServiceListResult2Vtbl {
	return (*comFabricGetServiceListResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetServiceListResult2) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetPartitionListResult2 struct {
	comFabricGetPartitionListResult
}

type comFabricGetPartitionListResult2Vtbl struct {
	comFabricGetPartitionListResultVtbl
	get_PagingStatus uintptr
}

func (v *comFabricGetPartitionListResult2) vtable() *comFabricGetPartitionListResult2Vtbl {
	return (*comFabricGetPartitionListResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetPartitionListResult2) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetReplicaListResult2 struct {
	comFabricGetReplicaListResult
}

type comFabricGetReplicaListResult2Vtbl struct {
	comFabricGetReplicaListResultVtbl
	get_PagingStatus uintptr
}

func (v *comFabricGetReplicaListResult2) vtable() *comFabricGetReplicaListResult2Vtbl {
	return (*comFabricGetReplicaListResult2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetReplicaListResult2) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetClusterHealthChunkResult struct {
	ole.IUnknown
}

type comFabricGetClusterHealthChunkResultVtbl struct {
	ole.IUnknownVtbl
	get_ClusterHealthChunk uintptr
}

func (v *comFabricGetClusterHealthChunkResult) vtable() *comFabricGetClusterHealthChunkResultVtbl {
	return (*comFabricGetClusterHealthChunkResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetClusterHealthChunkResult) GetClusterHealthChunk() (rt *FabricClusterHealthChunk, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ClusterHealthChunk,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricClusterHealthChunk)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricPartitionDataLossProgressResult struct {
	ole.IUnknown
}

type comFabricPartitionDataLossProgressResultVtbl struct {
	ole.IUnknownVtbl
	get_Progress uintptr
}

func (v *comFabricPartitionDataLossProgressResult) vtable() *comFabricPartitionDataLossProgressResultVtbl {
	return (*comFabricPartitionDataLossProgressResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPartitionDataLossProgressResult) GetProgress() (rt *FabricPartitionDataLossProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Progress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPartitionDataLossProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricOrchestrationUpgradeStatusResult struct {
	ole.IUnknown
}

type comFabricOrchestrationUpgradeStatusResultVtbl struct {
	ole.IUnknownVtbl
	get_Progress uintptr
}

func (v *comFabricOrchestrationUpgradeStatusResult) vtable() *comFabricOrchestrationUpgradeStatusResultVtbl {
	return (*comFabricOrchestrationUpgradeStatusResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricOrchestrationUpgradeStatusResult) GetProgress() (rt *FabricOrchestrationUpgradeProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Progress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricOrchestrationUpgradeProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricUpgradeOrchestrationServiceStateResult struct {
	ole.IUnknown
}

type comFabricUpgradeOrchestrationServiceStateResultVtbl struct {
	ole.IUnknownVtbl
	get_State uintptr
}

func (v *comFabricUpgradeOrchestrationServiceStateResult) vtable() *comFabricUpgradeOrchestrationServiceStateResultVtbl {
	return (*comFabricUpgradeOrchestrationServiceStateResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricUpgradeOrchestrationServiceStateResult) GetState() (rt *FabricUpgradeOrchestrationServiceState, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_State,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricUpgradeOrchestrationServiceState)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricPartitionQuorumLossProgressResult struct {
	ole.IUnknown
}

type comFabricPartitionQuorumLossProgressResultVtbl struct {
	ole.IUnknownVtbl
	get_Progress uintptr
}

func (v *comFabricPartitionQuorumLossProgressResult) vtable() *comFabricPartitionQuorumLossProgressResultVtbl {
	return (*comFabricPartitionQuorumLossProgressResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPartitionQuorumLossProgressResult) GetProgress() (rt *FabricPartitionQuorumLossProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Progress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPartitionQuorumLossProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricPartitionRestartProgressResult struct {
	ole.IUnknown
}

type comFabricPartitionRestartProgressResultVtbl struct {
	ole.IUnknownVtbl
	get_Progress uintptr
}

func (v *comFabricPartitionRestartProgressResult) vtable() *comFabricPartitionRestartProgressResultVtbl {
	return (*comFabricPartitionRestartProgressResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricPartitionRestartProgressResult) GetProgress() (rt *FabricPartitionRestartProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Progress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPartitionRestartProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricTestCommandStatusResult struct {
	ole.IUnknown
}

type comFabricTestCommandStatusResultVtbl struct {
	ole.IUnknownVtbl
	get_Result uintptr
}

func (v *comFabricTestCommandStatusResult) vtable() *comFabricTestCommandStatusResultVtbl {
	return (*comFabricTestCommandStatusResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricTestCommandStatusResult) GetResult() (rt []interface{}, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Result,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerTestCommandQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []interface{}

		var innerlst []unsafe.Pointer

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem interface{}

			tmpitem = fromUnsafePointer(item)

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricChaosEventsSegmentResult struct {
	ole.IUnknown
}

type comFabricChaosEventsSegmentResultVtbl struct {
	ole.IUnknownVtbl
	get_ChaosEventsSegmentResult uintptr
}

func (v *comFabricChaosEventsSegmentResult) vtable() *comFabricChaosEventsSegmentResultVtbl {
	return (*comFabricChaosEventsSegmentResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricChaosEventsSegmentResult) GetChaosEventsSegmentResult() (rt *FabricChaosEventsSegment, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ChaosEventsSegmentResult,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricChaosEventsSegment)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricChaosDescriptionResult struct {
	ole.IUnknown
}

type comFabricChaosDescriptionResultVtbl struct {
	ole.IUnknownVtbl
	get_ChaosDescriptionResult uintptr
}

func (v *comFabricChaosDescriptionResult) vtable() *comFabricChaosDescriptionResultVtbl {
	return (*comFabricChaosDescriptionResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricChaosDescriptionResult) GetChaosDescriptionResult() (rt *FabricChaosDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ChaosDescriptionResult,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricChaosDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricChaosScheduleDescriptionResult struct {
	ole.IUnknown
}

type comFabricChaosScheduleDescriptionResultVtbl struct {
	ole.IUnknownVtbl
	get_ChaosScheduleDescriptionResult uintptr
}

func (v *comFabricChaosScheduleDescriptionResult) vtable() *comFabricChaosScheduleDescriptionResultVtbl {
	return (*comFabricChaosScheduleDescriptionResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricChaosScheduleDescriptionResult) GetChaosScheduleDescriptionResult() (rt *FabricChaosScheduleDescription, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ChaosScheduleDescriptionResult,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricChaosScheduleDescription)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricChaosReportResult struct {
	ole.IUnknown
}

type comFabricChaosReportResultVtbl struct {
	ole.IUnknownVtbl
	get_ChaosReportResult uintptr
}

func (v *comFabricChaosReportResult) vtable() *comFabricChaosReportResultVtbl {
	return (*comFabricChaosReportResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricChaosReportResult) GetChaosReportResult() (rt *FabricChaosReport, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ChaosReportResult,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricChaosReport)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricNodeTransitionProgressResult struct {
	ole.IUnknown
}

type comFabricNodeTransitionProgressResultVtbl struct {
	ole.IUnknownVtbl
	get_Progress uintptr
}

func (v *comFabricNodeTransitionProgressResult) vtable() *comFabricNodeTransitionProgressResultVtbl {
	return (*comFabricNodeTransitionProgressResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricNodeTransitionProgressResult) GetProgress() (rt *FabricNodeTransitionProgress, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Progress,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNodeTransitionProgress)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetServiceNameResult struct {
	ole.IUnknown
}

type comFabricGetServiceNameResultVtbl struct {
	ole.IUnknownVtbl
	get_ServiceName uintptr
}

func (v *comFabricGetServiceNameResult) vtable() *comFabricGetServiceNameResultVtbl {
	return (*comFabricGetServiceNameResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetServiceNameResult) GetServiceName() (rt *FabricServiceNameQueryResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ServiceName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricServiceNameQueryResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetApplicationNameResult struct {
	ole.IUnknown
}

type comFabricGetApplicationNameResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationName uintptr
}

func (v *comFabricGetApplicationNameResult) vtable() *comFabricGetApplicationNameResultVtbl {
	return (*comFabricGetApplicationNameResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationNameResult) GetApplicationName() (rt *FabricApplicationNameQueryResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationName,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationNameQueryResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricSecretsResult struct {
	ole.IUnknown
}

type comFabricSecretsResultVtbl struct {
	ole.IUnknownVtbl
	get_Secrets uintptr
}

func (v *comFabricSecretsResult) vtable() *comFabricSecretsResultVtbl {
	return (*comFabricSecretsResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricSecretsResult) GetSecrets() (rt []FabricSecret, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_Secrets,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricSecretList)(unsafe.Pointer(hr))

	{
		var lst []FabricSecret

		var innerlst []innerFabricSecret

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricSecret

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type comFabricSecretReferencesResult struct {
	ole.IUnknown
}

type comFabricSecretReferencesResultVtbl struct {
	ole.IUnknownVtbl
	get_SecretReferences uintptr
}

func (v *comFabricSecretReferencesResult) vtable() *comFabricSecretReferencesResultVtbl {
	return (*comFabricSecretReferencesResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricSecretReferencesResult) GetSecretReferences() (rt []FabricSecretReference, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_SecretReferences,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricSecretReferenceList)(unsafe.Pointer(hr))

	{
		var lst []FabricSecretReference

		var innerlst []innerFabricSecretReference

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricSecretReference

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}

type ComFabricSecretStoreClient struct {
	ole.IUnknown
}

type comFabricSecretStoreClientVtbl struct {
	ole.IUnknownVtbl
	BeginGetSecrets        uintptr
	EndGetSecrets          uintptr
	BeginSetSecrets        uintptr
	EndSetSecrets          uintptr
	BeginRemoveSecrets     uintptr
	EndRemoveSecrets       uintptr
	BeginGetSecretVersions uintptr
	EndGetSecretVersions   uintptr
}

func (v *ComFabricSecretStoreClient) vtable() *comFabricSecretStoreClientVtbl {
	return (*comFabricSecretStoreClientVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *ComFabricSecretStoreClient) beginGetSecrets(
	secretReferences []FabricSecretReference,
	includeValue bool,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricSecretReferenceList
	{
		lst := &innerFabricSecretReferenceList{}

		var tmp []innerFabricSecretReference

		for _, item := range secretReferences {
			var tmpitem innerFabricSecretReference

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	p_1 := 0
	if includeValue {
		p_1 = 1
	}
	var p_4 *comIFabricAsyncOperationContext
	defer func() {
		context = p_4
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetSecrets,
		6,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(p_1),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_4)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) endGetSecrets(
	context *comIFabricAsyncOperationContext,
) (result *comFabricSecretsResult, err error) {
	var p_1 *comFabricSecretsResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetSecrets,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) beginSetSecrets(
	secrets []FabricSecret,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricSecretList
	{
		lst := &innerFabricSecretList{}

		var tmp []innerFabricSecret

		for _, item := range secrets {
			var tmpitem innerFabricSecret

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginSetSecrets,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) endSetSecrets(
	context *comIFabricAsyncOperationContext,
) (result *comFabricSecretsResult, err error) {
	var p_1 *comFabricSecretsResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndSetSecrets,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) beginRemoveSecrets(
	secretReferences []FabricSecretReference,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricSecretReferenceList
	{
		lst := &innerFabricSecretReferenceList{}

		var tmp []innerFabricSecretReference

		for _, item := range secretReferences {
			var tmpitem innerFabricSecretReference

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginRemoveSecrets,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) endRemoveSecrets(
	context *comIFabricAsyncOperationContext,
) (result *comFabricSecretReferencesResult, err error) {
	var p_1 *comFabricSecretReferencesResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndRemoveSecrets,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) beginGetSecretVersions(
	secretReferences []FabricSecretReference,
	timeoutMilliseconds uint32,
	callback *comIFabricAsyncOperationCallback,
) (context *comIFabricAsyncOperationContext, err error) {
	var p_0 *innerFabricSecretReferenceList
	{
		lst := &innerFabricSecretReferenceList{}

		var tmp []innerFabricSecretReference

		for _, item := range secretReferences {
			var tmpitem innerFabricSecretReference

			tmpitem = *item.toInnerStruct()

			tmp = append(tmp, tmpitem)
		}

		lst.Count = uint32(len(tmp))
		if len(tmp) > 0 {
			lst.Items = &tmp[0]
		}

		p_0 = lst
	}
	var p_3 *comIFabricAsyncOperationContext
	defer func() {
		context = p_3
	}()
	hr, _, err1 := syscall.Syscall6(
		v.vtable().BeginGetSecretVersions,
		5,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(p_0)),
		uintptr(timeoutMilliseconds),
		uintptr(unsafe.Pointer(callback)),
		uintptr(unsafe.Pointer(&p_3)),
		0,
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) endGetSecretVersions(
	context *comIFabricAsyncOperationContext,
) (result *comFabricSecretReferencesResult, err error) {
	var p_1 *comFabricSecretReferencesResult
	defer func() {
		result = p_1
	}()
	hr, _, err1 := syscall.Syscall(
		v.vtable().EndGetSecretVersions,
		3,
		uintptr(unsafe.Pointer(v)),
		uintptr(unsafe.Pointer(context)),
		uintptr(unsafe.Pointer(&p_1)),
	)
	if hr != 0 {
		err = errno(hr, err1)
		return
	}
	return
}
func (v *ComFabricSecretStoreClient) GetSecrets(
	ctx context.Context,
	secretReferences []FabricSecretReference,
	includeValue bool,
) (result_0 []FabricSecret, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetSecrets(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetSecrets()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetSecrets(
		secretReferences,
		includeValue,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricSecretStoreClient) SetSecrets(
	ctx context.Context,
	secrets []FabricSecret,
) (result_0 []FabricSecret, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endSetSecrets(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetSecrets()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginSetSecrets(
		secrets,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricSecretStoreClient) RemoveSecrets(
	ctx context.Context,
	secretReferences []FabricSecretReference,
) (result_0 []FabricSecretReference, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endRemoveSecrets(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetSecretReferences()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginRemoveSecrets(
		secretReferences,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}
func (v *ComFabricSecretStoreClient) GetSecretVersions(
	ctx context.Context,
	secretReferences []FabricSecretReference,
) (result_0 []FabricSecretReference, err error) {
	ch := make(chan error, 1)
	defer close(ch)
	callback := newFabricAsyncOperationCallback(func(sfctx *comIFabricAsyncOperationContext) {

		rt_1, err := v.endGetSecretVersions(sfctx)

		if err != nil {
			ch <- err
			return
		}
		result_0, err = rt_1.GetSecretReferences()
		if err != nil {
			ch <- err
			return
		}
		ch <- nil
	})

	var timeout time.Duration
	{
		deadline, ok := ctx.Deadline()
		if ok {
			timeout = deadline.Sub(time.Now())
		} else {
			timeout = 15 * time.Minute
		}

		_ = timeout
	}
	sfctx, err := v.beginGetSecretVersions(
		secretReferences,
		uint32(timeout.Milliseconds()),
		callback,
	)

	if err != nil {
		return
	}

	select {
	case err = <-ch:
		return

	case <-ctx.Done():
		sfctx.Cancel()
		err = ctx.Err()
		return
	case <-time.After(timeout):
		sfctx.Cancel()
		err = FabricErrorTimeout
		return
	}

}

type comFabricGetNetworkListResult struct {
	ole.IUnknown
}

type comFabricGetNetworkListResultVtbl struct {
	ole.IUnknownVtbl
	get_NetworkList  uintptr
	get_PagingStatus uintptr
}

func (v *comFabricGetNetworkListResult) vtable() *comFabricGetNetworkListResultVtbl {
	return (*comFabricGetNetworkListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetNetworkListResult) GetNetworkList() (rt []FabricNetworkInformation, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NetworkList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNetworkQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricNetworkInformation

		var innerlst []innerFabricNetworkInformation

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricNetworkInformation

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetNetworkListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetNetworkApplicationListResult struct {
	ole.IUnknown
}

type comFabricGetNetworkApplicationListResultVtbl struct {
	ole.IUnknownVtbl
	get_NetworkApplicationList uintptr
	get_PagingStatus           uintptr
}

func (v *comFabricGetNetworkApplicationListResult) vtable() *comFabricGetNetworkApplicationListResultVtbl {
	return (*comFabricGetNetworkApplicationListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetNetworkApplicationListResult) GetNetworkApplicationList() (rt []FabricNetworkApplicationQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NetworkApplicationList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNetworkApplicationQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricNetworkApplicationQueryResultItem

		var innerlst []innerFabricNetworkApplicationQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricNetworkApplicationQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetNetworkApplicationListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetNetworkNodeListResult struct {
	ole.IUnknown
}

type comFabricGetNetworkNodeListResultVtbl struct {
	ole.IUnknownVtbl
	get_NetworkNodeList uintptr
	get_PagingStatus    uintptr
}

func (v *comFabricGetNetworkNodeListResult) vtable() *comFabricGetNetworkNodeListResultVtbl {
	return (*comFabricGetNetworkNodeListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetNetworkNodeListResult) GetNetworkNodeList() (rt []FabricNetworkNodeQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_NetworkNodeList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricNetworkNodeQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricNetworkNodeQueryResultItem

		var innerlst []innerFabricNetworkNodeQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricNetworkNodeQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetNetworkNodeListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetApplicationNetworkListResult struct {
	ole.IUnknown
}

type comFabricGetApplicationNetworkListResultVtbl struct {
	ole.IUnknownVtbl
	get_ApplicationNetworkList uintptr
	get_PagingStatus           uintptr
}

func (v *comFabricGetApplicationNetworkListResult) vtable() *comFabricGetApplicationNetworkListResultVtbl {
	return (*comFabricGetApplicationNetworkListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetApplicationNetworkListResult) GetApplicationNetworkList() (rt []FabricApplicationNetworkQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ApplicationNetworkList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricApplicationNetworkQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricApplicationNetworkQueryResultItem

		var innerlst []innerFabricApplicationNetworkQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricApplicationNetworkQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetApplicationNetworkListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetDeployedNetworkListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedNetworkListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedNetworkList uintptr
	get_PagingStatus        uintptr
}

func (v *comFabricGetDeployedNetworkListResult) vtable() *comFabricGetDeployedNetworkListResultVtbl {
	return (*comFabricGetDeployedNetworkListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedNetworkListResult) GetDeployedNetworkList() (rt []FabricDeployedNetworkQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedNetworkList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedNetworkQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedNetworkQueryResultItem

		var innerlst []innerFabricDeployedNetworkQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedNetworkQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetDeployedNetworkListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}

type comFabricGetDeployedNetworkCodePackageListResult struct {
	ole.IUnknown
}

type comFabricGetDeployedNetworkCodePackageListResultVtbl struct {
	ole.IUnknownVtbl
	get_DeployedNetworkCodePackageList uintptr
	get_PagingStatus                   uintptr
}

func (v *comFabricGetDeployedNetworkCodePackageListResult) vtable() *comFabricGetDeployedNetworkCodePackageListResultVtbl {
	return (*comFabricGetDeployedNetworkCodePackageListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetDeployedNetworkCodePackageListResult) GetDeployedNetworkCodePackageList() (rt []FabricDeployedNetworkCodePackageQueryResultItem, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_DeployedNetworkCodePackageList,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricDeployedNetworkCodePackageQueryResultList)(unsafe.Pointer(hr))

	{
		var lst []FabricDeployedNetworkCodePackageQueryResultItem

		var innerlst []innerFabricDeployedNetworkCodePackageQueryResultItem

		{
			srclst := tmp
			slice := (*reflect.SliceHeader)(unsafe.Pointer(&innerlst))
			slice.Data = uintptr(unsafe.Pointer(srclst.Items))
			slice.Len = int(srclst.Count)
			slice.Cap = int(srclst.Count)
		}

		for _, item := range innerlst {
			var tmpitem FabricDeployedNetworkCodePackageQueryResultItem

			tmpitem = *item.toGoStruct()

			lst = append(lst, tmpitem)
		}

		rt = lst
	}
	return
}
func (v *comFabricGetDeployedNetworkCodePackageListResult) GetPagingStatus() (rt *FabricPagingStatus, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_PagingStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricPagingStatus)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
