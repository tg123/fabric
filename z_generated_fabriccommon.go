// Code generated by "go run github.com/tg123/fabric/mkidl"; DO NOT EDIT.
package fabric

import (
	"github.com/go-ole/go-ole"
	"golang.org/x/sys/windows"
	"syscall"
	"unsafe"
)

type comFabricStringResult struct {
	ole.IUnknown
}

type comFabricStringResultVtbl struct {
	ole.IUnknownVtbl
	get_String uintptr
}

func (v *comFabricStringResult) vtable() *comFabricStringResultVtbl {
	return (*comFabricStringResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricStringResult) GetString() (rt string, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_String,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*uint16)(unsafe.Pointer(hr))

	rt = windows.UTF16PtrToString(tmp)
	return
}

type comFabricStringListResult struct {
	ole.IUnknown
}

type comFabricStringListResultVtbl struct {
	ole.IUnknownVtbl
	GetStrings uintptr
}

func (v *comFabricStringListResult) vtable() *comFabricStringListResultVtbl {
	return (*comFabricStringListResultVtbl)(unsafe.Pointer(v.RawVTable))
}

type comFabricGetReplicatorStatusResult struct {
	ole.IUnknown
}

type comFabricGetReplicatorStatusResultVtbl struct {
	ole.IUnknownVtbl
	get_ReplicatorStatus uintptr
}

func (v *comFabricGetReplicatorStatusResult) vtable() *comFabricGetReplicatorStatusResultVtbl {
	return (*comFabricGetReplicatorStatusResultVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *comFabricGetReplicatorStatusResult) GetReplicatorStatus() (rt *FabricReplicatorStatusQueryResult, err error) {
	hr, _, err1 := syscall.Syscall(
		v.vtable().get_ReplicatorStatus,
		1,
		uintptr(unsafe.Pointer(v)),
		0,
		0,
	)
	if hr == 0 {
		err = err1
		return
	}

	tmp := (*innerFabricReplicatorStatusQueryResult)(unsafe.Pointer(hr))

	rt = tmp.toGoStruct()
	return
}
